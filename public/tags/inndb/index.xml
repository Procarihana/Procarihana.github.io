<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>InnDB on FAFA Blog</title>
    <link>https://procarihana.github.io/public/tags/inndb/</link>
    <description>Recent content in InnDB on FAFA Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 08 Sep 2020 11:24:13 +0800</lastBuildDate>
    
	<atom:link href="https://procarihana.github.io/public/tags/inndb/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MYSQL</title>
      <link>https://procarihana.github.io/public/notes/mysql/</link>
      <pubDate>Tue, 08 Sep 2020 11:24:13 +0800</pubDate>
      
      <guid>https://procarihana.github.io/public/notes/mysql/</guid>
      <description>数据库主键  UUID是无序的，所以不能用UUID进行数据库主键查找  主键 -- 唯一标识一条记录，不能有重复的，不允许为空 外键 -- 表的外键不一定是另一表的主键，但必须是唯一性索引,外键可以有重复的, 可以是空值 索引 -- 该字段没有重复值，但可以有一个空值 作用： 主键 -- 用来保证数据完整性 外键 -- 用来和其他表建立联系用的 索引 -- 是提高查询排序的速度 个数： 主键 -- 主键只能有一个 外键 -- 一个表可以有多个外键 索引 -- 一个表可以有多个唯一索引 SQL标准事务  原子性：事物内的业务全部完成才算成功，有一步失败都会回滚到最初。 一致性：满足数据库完整性的约束，就是建表的时候数据的类型约束、数据范围等，都会满足。 隔离性：写的内容没有提交前，其他读的对象是只能够执行没有改变前的数据内容，只有写的内容提交后才能够读到变更后的内容。 持久性：事物一旦提交，就会永久保存到数据库里面，即使系统发生故障，数据库也能够将数据恢复。  隔离级别  read-commited 云服务器一般都会用这个，因为隔离级别比较高 Console begin并不是开始，只有执行语句才是真正的开始 read uncommitted 读未提交： 一个事务还没提交时，它做的变更就能被别的事务看到。    脏读： 没有commit 的数据被 另一个console读取到了 可以获得最新的数据，    读提交（READ COMMITTED）只能看到提交的事物，但是不可重复度，因为执行多次的查询可能会得到不同的结果（因为多次查询中间如果其他事务进行了commit，查询的结果就会出现不同） 可重复读：在同一个事务中，多次进行查询的到的结果也是一样的，即使在多次读取的中间有其他事务进行了commit，读取的结果也不会因为其他的commit而改变。(没有commit也不能够读取到)    但是可能会出现幻读：在其他事务已经插入了某个ID的数据且commit，在可重复读的事务里不能够查询到这个数据，还能够用同样的ID进行数据的插入和查询，没有出现主键冲突的现象，commit后查询能够看到同一个ID插入了两条不一样的数据   但是在mysql 8 后就禁用了，一般都不会出现   在一个事务中SELECT操作一致，就是依靠ReadView(一致性视图的生成)    可串行化（SERIAIZABLE）：   事务查询数据时，如果其他事务在进行数据的变更时候没有commit，就必须等待直到其他事务commit后才能够查询出数据结果，否则会一直等待到超时     对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。     实现serializable(可串行)采用加锁的策略通过牺牲并发能力而保证数据安全)   事务隔离级别就是系统并发能力和数据安全性间的妥协，隔离性越高，数据库的性能就越差  Mysql 事务  在不同的隔离级别下，数据库通过 MVCC 和隔离级别，让事务之间并行操作遵循了某种规则，来保证单个事务内前后数据的一致性 Multiversion concurrency control 多版本并发控制   并发访问（读或者写）数据库时，对正在事务内处理的数据做多版本的管理，用来避免由于写操作的堵塞，而引发读操作失败的并发问题。     MVCC机制下基于生成的Undo log链和一致性视图ReadView来实现的    MYISAM并不支持事务  独立于操作系统，可以轻松地将其从Windows服务器移植到LIinux 里面 选择密集型的表。 MyISAM存储引擎在筛选大量数据时非常迅速，这是它最突出的优点。 插入密集型的表。 MyISAM的并发插入特性允许同时选择和插入数据。  InnoDB实现了MVCC的事务并发处理机  需要事务支持，并且有较高的并发读取频率选择InnDB    单纯的MVCC机制并不能解决幻读问题,InnoDB也是通过加间隙锁来防止幻读    InnoDB 下的 MVCC 实现原理（Undo log）    在InnoDB中MVCC的实现通过两个重要的字段进行连接：DB_TRX_ID和DB_ROLL_PT，在多个事务并行操作某行数据的情况下，不同事务对该行数据的UPDATE会产生多个版本，数据库通过DB_TRX_ID来标记版本，然后用DB_ROLL_PT回滚指针将这些版本以先后顺序连接成一条 Undo Log 链。   DB_TRX_ID: 事务id，6byte，每处理一个事务，值自动加一。     InnoDB中每个事务有一个唯一的事务ID叫做 transaction id。在事务开始时向InnoDB事务系统申请得到，是按申请顺序严格递增的     每行数据是有多个版本的，每次事务更新数据时都会生成一个新的数据版本，并且把transaction id赋值给这个数据行的DB_TRX_ID    DB_ROLL_PT: 回滚指针，7byte     指向当前记录的ROLLBACK SEGMENT 的undolog记录，通过这个指针获得之前版本的数据。该行记录上所有旧版本在 undolog 中都通过链表的形式组织。    还有一个DB_ROW_ID(隐含id,6byte，由innodb自动产生)，      InnoDB下聚簇索引B+Tree的构造规则:</description>
    </item>
    
  </channel>
</rss>