<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on FAFA Blog</title>
        <link>https://procarihana.github.io/public/posts/</link>
        <description>Recent content in Posts on FAFA Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-Hans</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 01 Sep 2020 18:41:11 +0800</lastBuildDate>
        <atom:link href="https://procarihana.github.io/public/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Docker的原理和应用</title>
            <link>https://procarihana.github.io/public/posts/docker%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E5%BA%94%E7%94%A8/</link>
            <pubDate>Tue, 01 Sep 2020 18:41:11 +0800</pubDate>
            
            <guid>https://procarihana.github.io/public/posts/docker%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E5%BA%94%E7%94%A8/</guid>
            <description>虚拟机有一套完整独立的操作系统，非常占内存和资源  Docker  保证开发、测试、交付、部署的环境完全一致 保证资源的隔离   通过fastjson 任意代码执行漏洞，通过java进程获得来操控别的进程从而过得Linux的控制权限。而Docker 资源隔离只能够获得Docker内的权限，对宿主机没有任何影响   启动临时的、用完即弃的环境，例如测试 迅速（秒级）超大规模部署和扩容   可以迅速扩容大量的容器，且环境是一模一样的    Docker 的基本概念  镜像 image   一个预定好的模板文件，Docker 引擎可以按照这个模板文件启动无数个一模一样，互不干扰的容器     像是一份清单一样，每次启动这个镜像就按照这份清单来启动   容器 container   一台虚拟的计算机，拥有独立的：      网络 文件系统 进程      默认和宿主机不发生任何交互      意味着数据是没有持久化的   Tag  不指定就是latest Docker运行的镜像要放到指定的仓库里面 Tag 前面是url/域名，push、pull、run，就会把镜像自动解析到相应的仓库里面 my.</description>
            <content type="html"><![CDATA[<ul>
<li>虚拟机有一套完整独立的操作系统，非常占内存和资源</li>
</ul>
<h2 id="docker">Docker</h2>
<ul>
<li>保证开发、测试、交付、部署的环境完全一致</li>
<li>保证资源的隔离</li>
<li>
<ul>
<li>通过fastjson 任意代码执行漏洞，通过java进程获得来操控别的进程从而过得Linux的控制权限。而Docker 资源隔离只能够获得Docker内的权限，对宿主机没有任何影响</li>
</ul>
</li>
<li>启动临时的、用完即弃的环境，例如测试</li>
<li>迅速（秒级）超大规模部署和扩容</li>
<li>
<ul>
<li>可以迅速扩容大量的容器，且环境是一模一样的</li>
</ul>
</li>
</ul>
<h2 id="docker-的基本概念">Docker 的基本概念</h2>
<ul>
<li>镜像 image</li>
<li>
<ul>
<li>一个预定好的模板文件，Docker 引擎可以按照这个模板文件启动无数个一模一样，互不干扰的容器</li>
</ul>
</li>
<li>
<ul>
<li>像是一份清单一样，每次启动这个镜像就按照这份清单来启动</li>
</ul>
</li>
<li>容器 container</li>
<li>
<ul>
<li>一台虚拟的计算机，拥有独立的：</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>网络</li>
<li>文件系统</li>
<li>进程</li>
</ul>
</blockquote>
<ul>
<li>
<ul>
<li>默认和宿主机不发生任何交互</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>意味着数据是没有持久化的</li>
</ul>
</blockquote>
<h4 id="tag">Tag</h4>
<ul>
<li>不指定就是latest</li>
<li>Docker运行的镜像要放到指定的仓库里面</li>
<li>Tag 前面是url/域名，push、pull、run，就会把镜像自动解析到相应的仓库里面
<code>my.company.com/jenkins</code></li>
</ul>
<h2 id="tip">Tip</h2>
<ul>
<li><code>$ docker run -it +启动不成功的镜像 </code> 能够看到启动不成功的原因</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>算法和数据结构</title>
            <link>https://procarihana.github.io/public/posts/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
            <pubDate>Mon, 31 Aug 2020 20:15:50 +0800</pubDate>
            
            <guid>https://procarihana.github.io/public/posts/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
            <description>空接口:只是说明有这个功能，使用这个框架，但是不提供实现
例如：RandomAccess…… 随机访问  时间复杂度与常数时间的哈希表  时间复杂度   O(1) - 哈希桶/数组随机寻址（常数时间复杂度）      无论问题的规模多大，都可以在常数时间范围内求得解 解决的题的时间和问题的规模没有关系 O(1) = O(2) =O(3) = …… 因为只要是常数都是等价的   内存寻址：内存寻址的时间和内存的大小、内存存放的位置无关，和硬件电路有关     数组：array、arrayList（继承object）   哈希桶、哈希表   把对象映射成整数，然后这个整数放进哈希表里（数组）       数组的容量是有限的，但是对象的变化是无限的，造成在有限中存放无限，就会产生碰撞，而碰撞就通过链表来解决。（但是在java8发生了改变）          O(n) - 遍历（线性）     O(log(n)) - 二分查找，二叉树（对数）     O(n^2) -    递归  把一个大问题分解成小问题 假设小问题已经解决 对分解的小问题进行求解   要完成递归就需要完成递归本身 把传进来的参数经过规定的计算方法完成计算，不需要了解如何如何进行。需要执行的方法就会存放在方法栈（先进后出）里面，运行后就会被销毁，知道所有栈运行完成。 一定要有返回条件（退出条件），否则就会发生栈溢出  阶乘  当 i=1 的时候，就会返回1（满足退出条件），这是就会开始执行方法栈里面的方法栈帧，每执行一个方法栈帧，就会销毁一个直到完全执行完返回结果。   1！= 1 2!</description>
            <content type="html"><![CDATA[<ul>
<li>空接口:只是说明有这个功能，使用这个框架，但是不提供实现<br>
例如：RandomAccess……
随机访问</li>
</ul>
<h2 id="时间复杂度与常数时间的哈希表">时间复杂度与常数时间的哈希表</h2>
<ul>
<li>时间复杂度</li>
<li>
<ul>
<li>O(1) - 哈希桶/数组随机寻址（常数时间复杂度）</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>无论问题的规模多大，都可以在常数时间范围内求得解</li>
<li>解决的题的时间和问题的规模没有关系</li>
<li>O(1) = O(2) =O(3) = …… 因为只要是常数都是等价的</li>
<li>
<ul>
<li>内存寻址：内存寻址的时间和内存的大小、内存存放的位置无关，和硬件电路有关</li>
</ul>
</li>
<li>
<ul>
<li>数组：array、arrayList（继承object）</li>
</ul>
</li>
<li>哈希桶、哈希表</li>
<li>
<ul>
<li>把对象映射成整数，然后这个整数放进哈希表里（数组）</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li>数组的容量是有限的，但是对象的变化是无限的，造成在有限中存放无限，就会产生碰撞，而碰撞就通过链表来解决。（但是在java8发生了改变）</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li>
<ul>
<li>O(n) - 遍历（线性）</li>
</ul>
</li>
<li>
<ul>
<li>O(log(n)) - 二分查找，二叉树（对数）</li>
</ul>
</li>
<li>
<ul>
<li>O(n^2) -</li>
</ul>
</li>
</ul>
<h2 id="递归">递归</h2>
<ol>
<li>把一个大问题分解成小问题</li>
<li>假设小问题已经解决</li>
<li>对分解的小问题进行求解</li>
</ol>
<ul>
<li>要完成递归就需要完成递归本身</li>
<li>把传进来的参数经过规定的计算方法完成计算，不需要了解如何如何进行。需要执行的方法就会存放在方法栈（先进后出）里面，运行后就会被销毁，知道所有栈运行完成。</li>
<li>一定要有返回条件（退出条件），否则就会发生栈溢出</li>
</ul>
<h4 id="阶乘">阶乘</h4>
<ul>
<li>当 i=1 的时候，就会返回1（满足退出条件），这是就会开始执行方法栈里面的方法栈帧，每执行一个方法栈帧，就会销毁一个直到完全执行完返回结果。</li>
</ul>
<pre><code> 1！= 1
 2! = 2*1
 3! = 3*2*1
……
N！ = N*……*3*2*1

public static int f(int i){
  if (i == 1) {
    return 1;
  } else {
    return i * f(i-1)；
  }
}
</code></pre><h4 id="数组求和">数组求和</h4>
<ul>
<li><code>List.subList(int,lisr.size())</code> :从第int个元素开始后面的元素和（不包括int）</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"> <span style="color:#f92672">*</span> <span style="color:#a6e22e">@param</span> fromIndex low <span style="color:#a6e22e">endpoint</span> <span style="color:#f92672">(</span>inclusive<span style="color:#f92672">)</span> of the subList
     <span style="color:#f92672">*</span> <span style="color:#a6e22e">@param</span> toIndex high <span style="color:#a6e22e">endpoint</span> <span style="color:#f92672">(</span>exclusive<span style="color:#f92672">)</span> of the subList
     <span style="color:#f92672">*</span> <span style="color:#a6e22e">@return</span> a view of the specified range within <span style="color:#66d9ef">this</span> list
     <span style="color:#f92672">*</span> <span style="color:#a6e22e">@throws</span> IndexOutOfBoundsException <span style="color:#66d9ef">for</span> an illegal endpoint index value
     <span style="color:#f92672">*</span>         <span style="color:#f92672">(&lt;</span>tt<span style="color:#f92672">&gt;</span>fromIndex <span style="color:#f92672">&amp;</span>lt<span style="color:#f92672">;</span> 0 <span style="color:#f92672">||</span> toIndex <span style="color:#f92672">&amp;</span>gt<span style="color:#f92672">;</span> size <span style="color:#f92672">||</span>
     <span style="color:#f92672">*</span>         fromIndex <span style="color:#f92672">&amp;</span>gt<span style="color:#f92672">;</span> toIndex<span style="color:#f92672">&lt;/</span>tt<span style="color:#f92672">&gt;)</span>
     <span style="color:#f92672">*/</span>
    List<span style="color:#f92672">&lt;</span>E<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">subList</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> fromIndex<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> toIndex<span style="color:#f92672">);</span>
    <span style="color:#960050;background-color:#1e0010">```</span>
<span style="color:#960050;background-color:#1e0010">```</span>java
   <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">sum</span><span style="color:#f92672">(</span>List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> list<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>list<span style="color:#f92672">.</span><span style="color:#a6e22e">isEmpty</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">return</span> 0<span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">return</span> list<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>0<span style="color:#f92672">)</span> <span style="color:#f92672">+</span> sum<span style="color:#f92672">(</span>list<span style="color:#f92672">.</span><span style="color:#a6e22e">subList</span><span style="color:#f92672">(</span>1<span style="color:#f92672">,</span> list<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">()));</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>sum<span style="color:#f92672">(</span>Arrays<span style="color:#f92672">.</span><span style="color:#a6e22e">asList</span><span style="color:#f92672">(</span>1<span style="color:#f92672">,</span> 2<span style="color:#f92672">,</span> 3<span style="color:#f92672">,</span> 4<span style="color:#f92672">,</span> 5<span style="color:#f92672">,</span> 6<span style="color:#f92672">,</span> 7<span style="color:#f92672">,</span> 8<span style="color:#f92672">,</span> 9<span style="color:#f92672">)));</span>
    <span style="color:#f92672">}</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Java 部署</title>
            <link>https://procarihana.github.io/public/posts/java-%E9%83%A8%E7%BD%B2/</link>
            <pubDate>Sun, 30 Aug 2020 17:47:43 +0800</pubDate>
            
            <guid>https://procarihana.github.io/public/posts/java-%E9%83%A8%E7%BD%B2/</guid>
            <description>应用开发流程  产品调研 产品设计 系统设计 -&amp;gt; 全后端文档等 开发 测试 部署  Web应用是怎么工作的  默认443端口 每个HTTP请求背后都是一台主机  分布式  解决用户量大的问题   垂直扩展 ：购入更好的机器     水平扩展 ： 购入更多的机器（分布式）      负载均衡器 Load Balance   负载均衡 容灾（单点故障）：一个服务器故障也不会影响到业务    如何保持数据一致性   让负载均衡器保证同一个用户的请求都发到同一台机器上，但是HTTP是无状态的，同一个用户的不同请求是没有先后顺序的，没有用户标识，都是HTTP请求，即使有Cookie也不行     单一数据源：数据都存在同一个数据库，即使服务器杀死重启复原数据都不会改变，但是不能够避免单点故障的问题，数据库会出问题      大多数情况下，数据库都是稳定的。 数据库会有备份   部署  将开发好的程序放在服务器上   监听端口     相应HTTP请求     进行预定义的业务逻辑处理   产品不停迭代   灰度发布：部分停止服务器进行更新。剩余的服务器有可能承受不了业务请求的数量而垮掉，即使停止的重新工作也不一定能够解决。 半夜更新     部署的版本需要不停进行更新     分布式更新   环境问题   开发环境（测试环境）     预发布环境（预生产环境，可能是生产环境的副本）     生产魂晶（正式环境）   环境的兼容性问题   硬件、软件      开发的软件、运行的软件、服务器系统      数据库等      数据库版本、内容、结构   发布和部署程序  如何在生产环境下运行 解决   编写的代码     依赖的第三方库     依赖的特殊环境配置（数据库、缓存）     稳定性     升级和回滚    使用Maven exec plugin  自动将所有的传递性依赖加入   优点：简单     缺点： 不适用与自动化的场景      运行的时候需要把代码都下载下来，才能够运行。不能够把代码编译成字节码，所以需要绑定到编译后的阶段才能够运行    exec:exec -&amp;gt; 在一个独立的进程中执行一个程序 exec:java -&amp;gt; 在同一个JVM里执行java  &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
            <content type="html"><![CDATA[<h2 id="应用开发流程">应用开发流程</h2>
<ul>
<li>产品调研</li>
<li>产品设计</li>
<li>系统设计 -&gt; 全后端文档等</li>
<li>开发</li>
<li>测试</li>
<li>部署</li>
</ul>
<h2 id="web应用是怎么工作的">Web应用是怎么工作的</h2>
<ul>
<li>默认443端口</li>
<li>每个HTTP请求背后都是一台主机</li>
</ul>
<h2 id="分布式">分布式</h2>
<ul>
<li>解决用户量大的问题</li>
<li>
<ul>
<li>垂直扩展 ：购入更好的机器</li>
</ul>
</li>
<li>
<ul>
<li>水平扩展 ： 购入更多的机器（分布式）</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>负载均衡器 Load Balance</li>
</ul>
<ol>
<li>负载均衡</li>
<li>容灾（单点故障）：一个服务器故障也不会影响到业务</li>
</ol>
</blockquote>
<ul>
<li>如何保持数据一致性</li>
<li>
<ul>
<li>让负载均衡器保证同一个用户的请求都发到同一台机器上，但是HTTP是无状态的，同一个用户的不同请求是没有先后顺序的，没有用户标识，都是HTTP请求，即使有Cookie也不行</li>
</ul>
</li>
<li>
<ul>
<li>单一数据源：数据都存在同一个数据库，即使服务器杀死重启复原数据都不会改变，但是不能够避免单点故障的问题，数据库会出问题</li>
</ul>
</li>
</ul>
<blockquote>
<ol>
<li>大多数情况下，数据库都是稳定的。</li>
<li>数据库会有备份</li>
</ol>
</blockquote>
<h2 id="部署">部署</h2>
<ul>
<li>将开发好的程序放在服务器上</li>
<li>
<ul>
<li>监听端口</li>
</ul>
</li>
<li>
<ul>
<li>相应HTTP请求</li>
</ul>
</li>
<li>
<ul>
<li>进行预定义的业务逻辑处理</li>
</ul>
</li>
<li>产品不停迭代</li>
</ul>
<ol>
<li>灰度发布：部分停止服务器进行更新。剩余的服务器有可能承受不了业务请求的数量而垮掉，即使停止的重新工作也不一定能够解决。</li>
<li>半夜更新</li>
</ol>
<ul>
<li>
<ul>
<li>部署的版本需要不停进行更新</li>
</ul>
</li>
<li>
<ul>
<li>分布式更新</li>
</ul>
</li>
<li>环境问题</li>
<li>
<ul>
<li>开发环境（测试环境）</li>
</ul>
</li>
<li>
<ul>
<li>预发布环境（预生产环境，可能是生产环境的副本）</li>
</ul>
</li>
<li>
<ul>
<li>生产魂晶（正式环境）</li>
</ul>
</li>
<li>环境的兼容性问题</li>
<li>
<ul>
<li>硬件、软件</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>开发的软件、运行的软件、服务器系统</li>
</ul>
</blockquote>
<ul>
<li>
<ul>
<li>数据库等</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>数据库版本、内容、结构</li>
</ul>
</blockquote>
<h2 id="发布和部署程序">发布和部署程序</h2>
<ul>
<li>如何在生产环境下运行</li>
<li>解决</li>
<li>
<ul>
<li>编写的代码</li>
</ul>
</li>
<li>
<ul>
<li>依赖的第三方库</li>
</ul>
</li>
<li>
<ul>
<li>依赖的特殊环境配置（数据库、缓存）</li>
</ul>
</li>
<li>
<ul>
<li>稳定性</li>
</ul>
</li>
<li>
<ul>
<li>升级和回滚</li>
</ul>
</li>
</ul>
<h2 id="使用maven-exec-plugin">使用Maven exec plugin</h2>
<ul>
<li>自动将所有的传递性依赖加入</li>
<li>
<ul>
<li>优点：简单</li>
</ul>
</li>
<li>
<ul>
<li>缺点： 不适用与自动化的场景</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>运行的时候需要把代码都下载下来，才能够运行。不能够把代码编译成字节码，所以需要绑定到编译后的阶段才能够运行</li>
</ul>
</blockquote>
<ul>
<li>exec:exec -&gt; 在一个独立的进程中执行一个程序</li>
<li>exec:java -&gt; 在同一个JVM里执行java</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">&lt;</span>plugin<span style="color:#f92672">&gt;</span>
        <span style="color:#f92672">&lt;</span>groupId<span style="color:#f92672">&gt;</span>org<span style="color:#f92672">.</span><span style="color:#a6e22e">codehaus</span><span style="color:#f92672">.</span><span style="color:#a6e22e">mojo</span><span style="color:#f92672">&lt;/</span>groupId<span style="color:#f92672">&gt;</span>
        <span style="color:#f92672">&lt;</span>artifactId<span style="color:#f92672">&gt;</span>exec<span style="color:#f92672">-</span>maven<span style="color:#f92672">-</span>plugin<span style="color:#f92672">&lt;/</span>artifactId<span style="color:#f92672">&gt;</span>
        <span style="color:#f92672">&lt;</span>version<span style="color:#f92672">&gt;</span>3<span style="color:#f92672">.</span><span style="color:#a6e22e">0</span><span style="color:#f92672">.</span><span style="color:#a6e22e">0</span><span style="color:#f92672">&lt;/</span>version<span style="color:#f92672">&gt;</span>
      <span style="color:#f92672">&lt;</span>configuration<span style="color:#f92672">&gt;</span>
      <span style="color:#f92672">&lt;--</span> executable <span style="color:#f92672">:</span>要运行什么程序 <span style="color:#f92672">--&gt;</span>
          <span style="color:#f92672">&lt;</span>executable<span style="color:#f92672">&gt;</span>java<span style="color:#f92672">&lt;/</span>executable<span style="color:#f92672">&gt;</span>
          <span style="color:#f92672">&lt;</span>arguments<span style="color:#f92672">&gt;</span>
           <span style="color:#f92672">&lt;</span>argument<span style="color:#f92672">&gt;-</span>classpath<span style="color:#f92672">&lt;/</span>argument<span style="color:#f92672">&gt;</span>
            <span style="color:#f92672">&lt;!--</span> automatically creates the classpath using all project dependencies<span style="color:#f92672">,</span>
                 also adding the project build directory
                 自动给jvm运行的class生成classpath<span style="color:#960050;background-color:#1e0010">（</span>全地址<span style="color:#960050;background-color:#1e0010">），</span>避免填写的麻烦<span style="color:#f92672">--&gt;</span>
            <span style="color:#f92672">&lt;</span>classpath<span style="color:#f92672">/&gt;</span>
           <span style="color:#f92672">&lt;--</span> argument运行程序是用的参数<span style="color:#960050;background-color:#1e0010">（</span>jvm要启动的类名<span style="color:#960050;background-color:#1e0010">）</span> <span style="color:#f92672">--&gt;</span>
            <span style="color:#f92672">&lt;</span>argument<span style="color:#f92672">&gt;</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">example</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Main</span><span style="color:#f92672">&lt;/</span>argument<span style="color:#f92672">&gt;</span>
          <span style="color:#f92672">&lt;/</span>arguments<span style="color:#f92672">&gt;</span>
        <span style="color:#f92672">&lt;/</span>configuration<span style="color:#f92672">&gt;</span>
<span style="color:#f92672">&lt;/</span>plugin<span style="color:#f92672">&gt;</span>
</code></pre></div><ul>
<li>命令行：可执行程序+参数</li>
<li>
<ul>
<li>mvn exec:exec 执行java</li>
</ul>
</li>
<li>
<ul>
<li>mvn exec:exex -x 打印出执行的信息</li>
</ul>
</li>
</ul>
<h2 id="jar包">jar包</h2>
<ul>
<li>编译后的代码打包</li>
<li>
<ul>
<li>java 启动方式(两种方式都是一样的，因为jar包里面有清单文件（manifest），文件里面包含mainClass)</li>
</ul>
</li>
</ul>
<ol>
<li>java -classpath mainClass</li>
<li>java -jar jarName.zip/jarName.jar</li>
</ol>
<ul>
<li>jar包和war包区别</li>
<li>
<ul>
<li>jar包本质是一个压缩包，把所以代码打包压缩，运行信息、依赖、内嵌Tomcat等等</li>
</ul>
</li>
<li>
<ul>
<li>war包也是压缩包，但是只包含依赖（资源），没有内嵌Tomcat，不能够运行。如果要运行就要放在servlet容器里面运行</li>
</ul>
</li>
<li>
<ul>
<li>Eg：SpringBoot.jar = war + Tomcat(Servlet容器提供底层HTTP互交)</li>
</ul>
</li>
<li>SpringBoot repackage: 创建一个自动可执行的jar或war文件。它可以替换常规的artifact(手动运行)，或者用一个单独的classifier附属在maven构建的生命周期中，使得程序可以自动执行。</li>
<li>优点：简单可靠</li>
<li>缺点：依赖于JVM环境，虽然碰到问题的概率低</li>
</ul>
<h2 id="部署-1">部署</h2>
<ul>
<li>域名指向服务器IP地址</li>
<li>
<ul>
<li>把Spring xml配置里面的<code>datasource.url</code>更改成IP地址（网域名）
<code>spring.datasource.url = jdbc:mysql://localhost:3306/user</code></li>
</ul>
</li>
<li>NGINX 监听80端口</li>
</ul>
<h4 id="maven-直接运行源代码">maven 直接运行源代码</h4>
<h4 id="jar方式">jar方式</h4>
<h4 id="docker-方式">Docker 方式</h4>
]]></content>
        </item>
        
        <item>
            <title>JAVA IO</title>
            <link>https://procarihana.github.io/public/posts/io/</link>
            <pubDate>Sun, 30 Aug 2020 15:29:44 +0800</pubDate>
            
            <guid>https://procarihana.github.io/public/posts/io/</guid>
            <description>cpu 负责所有运算
  3GHz 每秒运行30亿条指令，做一件事情只需要0.38纳秒
   SSD（固态硬盘）：寻址时间太慢了，和CPU形成矛盾     内存：存数据，断电丢失     硬盘（硬盘驱动器） 存数据容量大，断电不丢失    一个文件本质上是一段字节流，由一个执行程序决定怎么执行一段字节流（16进制）
  字节范围 0～255
一切文件的本质  一段字节流：   文本文件（txt/代码/HTML等）     二进制文件   每个程序负责解释文件中的字节流  输入输出是站在程序的角度
InputStream/PutputStream  抽象的输入/输出操作   从文件读取字节流 【实战】    value ==-1 的时候，循环结束
 -从网络读取字节流【实战】 -从其他
最好使用绝对路径
抽象类不能直接实例化，因为抽象类里面包含还没有实现的方法 InputStream…… 这种只是抽象方法，不能够直接实现 用ProcessBuilder建立新的进程  Java中的File   file 代表的是文件路径</description>
            <content type="html"><![CDATA[<ul>
<li>
<p>cpu 负责所有运算</p>
</li>
<li>
<p>3GHz 每秒运行30亿条指令，做一件事情只需要0.38纳秒</p>
</li>
<li>
<ul>
<li>SSD（固态硬盘）：寻址时间太慢了，和CPU形成矛盾</li>
</ul>
</li>
<li>
<ul>
<li>内存：存数据，断电丢失</li>
</ul>
</li>
<li>
<ul>
<li>硬盘（硬盘驱动器） 存数据容量大，断电不丢失</li>
</ul>
</li>
<li>
<p>一个文件本质上是一段字节流，由一个执行程序决定怎么执行一段字节流（16进制）</p>
</li>
</ul>
<p>字节范围 0～255</p>
<h2 id="一切文件的本质">一切文件的本质</h2>
<ul>
<li>一段字节流：</li>
<li>
<ul>
<li>文本文件（txt/代码/HTML等）</li>
</ul>
</li>
<li>
<ul>
<li>二进制文件</li>
</ul>
</li>
<li>每个程序负责解释文件中的字节流</li>
</ul>
<p>输入输出是站在程序的角度</p>
<h2 id="inputstreamputputstream">InputStream/PutputStream</h2>
<ul>
<li>抽象的输入/输出操作</li>
<li>
<ul>
<li>从文件读取字节流 【实战】</li>
</ul>
</li>
</ul>
<p>value ==-1 的时候，循环结束</p>
<ul>
<li>-从网络读取字节流【实战】</li>
<li>-从其他<br>
<strong>最好使用绝对路径</strong><br>
抽象类不能直接实例化，因为抽象类里面包含还没有实现的方法</li>
<li>InputStream…… 这种只是抽象方法，不能够直接实现</li>
<li>用ProcessBuilder建立新的进程</li>
</ul>
<h2 id="java中的file">Java中的File</h2>
<ul>
<li>
<p>file 代表的是文件路径</p>
</li>
<li>
<p>抽象的“文件”：文件或者文件夹</p>
</li>
<li>
<p>File 的常见方法</p>
</li>
<li>
<ul>
<li>
<p>file.exists 判断文件是否存在</p>
<pre><code> .listfile 当前文件下有什么文件
 .isAbsolute 是否是绝对路径
 .getname
 .isDirectory 是否是文件夹
 .getAbsolutePath
 .listFile
</code></pre>
</li>
</ul>
</li>
<li>
<ul>
<li>file.isfile 判断是不是文件</li>
</ul>
</li>
<li>
<ul>
<li>file.isDirectory 判断路径是不是分拣家</li>
</ul>
</li>
<li>
<ul>
<li>getAbsolutePath 获得绝对路径</li>
</ul>
</li>
<li>
<ul>
<li>listfiles 查看当前文件夹下面有什么文件</li>
</ul>
</li>
<li>
<ul>
<li>new File（目录名字，子目录的名字）快速构建一个新的子目录</li>
</ul>
</li>
<li>
<ul>
<li>file.walkFileTree 遍历</li>
</ul>
</li>
<li>
<ul>
<li>readAllLine（不用依赖第三方库）</li>
</ul>
</li>
<li>
<p>绝对路径与相对路径</p>
</li>
<li>
<ul>
<li>相对路径只有在相对一个路径时候才有效</li>
</ul>
</li>
<li>
<ul>
<li>相对的就是JVM进程的当前工作目录</li>
</ul>
</li>
<li>
<ul>
<li>绝对路径只会对应一个文件</li>
</ul>
</li>
<li>
<p>读/写文件</p>
</li>
<li>
<ul>
<li>解决IO速度慢</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li>BufferReader/Writer</li>
</ul>
</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li>换行符</li>
</ul>
</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li>BufferReader - 一次性读好多东西到缓冲区里面</li>
</ul>
</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li>BufferWriter - 一次性写好多东西</li>
</ul>
</li>
</ul>
</li>
<li>
<p>NIO的Path（Java 7+）
LInxu 硬连接和软连接</p>
</li>
<li>
<p>New IO 新的IO</p>
</li>
<li>
<p>Non -blocking IO 非阻塞IO</p>
</li>
<li>
<p>NIO的Path - 就是旧版本的File</p>
</li>
<li>
<ul>
<li>经典的IO模型基于流</li>
</ul>
</li>
<li>
<ul>
<li>优点：容易理解，方便抽象</li>
</ul>
</li>
<li>
<ul>
<li>缺点：慢（流：一个字节一个字节按顺序）</li>
</ul>
</li>
</ul>
<h2 id="解决io太慢">解决IO太慢</h2>
<ul>
<li>BufferedReader/Writer</li>
<li>
<ul>
<li>BufferedReader - ⼀次性读取好多东⻄到缓冲区⾥</li>
</ul>
</li>
<li>
<ul>
<li>BufferedWriter - ⼀次性写好多东⻄到缓冲区⾥</li>
</ul>
</li>
<li>在内存中创建好，⼀次写⼊</li>
</ul>
<p>path.tofile &ndash;
file.topath
两个东西相互转换</p>
<p>Buffer是一个缓冲区，是内存的一块</p>
<p>块和块之间是没有顺序的，所以可以同时写</p>
<p>写入：</p>
<ol>
<li>一个一个字节地写</li>
<li>存一些后一次性写入（并发；多线程）//CPU在等待IO的时候做其他事情</li>
</ol>
<h2 id="homework">HomeWork</h2>
<h4 id="多种方法写入读出">多种方法写入读出</h4>
<ul>
<li>Apache Commons IO</li>
<li>
<ul>
<li>通过·FilesUtils.readFileToString<code>读取</code>writeStringToFile`写入</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"> <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">readFile2</span><span style="color:#f92672">(</span>File file<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IOException <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> Arrays<span style="color:#f92672">.</span><span style="color:#a6e22e">asList</span><span style="color:#f92672">(</span>FileUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">readFileToString</span><span style="color:#f92672">(</span>file<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;utf8&#34;</span><span style="color:#f92672">).</span><span style="color:#a6e22e">split</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;\n&#34;</span><span style="color:#f92672">));</span>
    <span style="color:#f92672">}</span>

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">writeLinesToFile2</span><span style="color:#f92672">(</span>List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> lines<span style="color:#f92672">,</span> File file<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IOException <span style="color:#f92672">{</span>
        String result <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> String<span style="color:#f92672">();</span>
        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>String s <span style="color:#f92672">:</span> lines<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            result <span style="color:#f92672">+=</span> s<span style="color:#f92672">;</span>
            result <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;\n&#34;</span><span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span>
        FileUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">writeStringToFile</span><span style="color:#f92672">(</span>file<span style="color:#f92672">,</span> result<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;utf8&#34;</span><span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>FileInputStream 和FileOutPutStream</li>
<li>
<ul>
<li>注意getByte 得到的是字节流</li>
</ul>
</li>
<li>
<ul>
<li>读取迭代的过程中，要记得readInt 需要不断地从fileInputStream里面读入，否则就会一直只读第一个字节，变成死循环</li>
</ul>
</li>
<li>
<ul>
<li>InputStream 结束的标志就是<code>-1</code></li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">readFile1</span><span style="color:#f92672">(</span>File file<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IOException <span style="color:#f92672">{</span>
        FileInputStream fileInputStream <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> FileInputStream<span style="color:#f92672">(</span>file<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">int</span> readInt <span style="color:#f92672">=</span> fileInputStream<span style="color:#f92672">.</span><span style="color:#a6e22e">read</span><span style="color:#f92672">();</span>
        String s <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> String<span style="color:#f92672">();</span>
        <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>readInt <span style="color:#f92672">!=</span> <span style="color:#f92672">-</span>1<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            s <span style="color:#f92672">+=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> readInt<span style="color:#f92672">;</span>
            readInt <span style="color:#f92672">=</span> fileInputStream<span style="color:#f92672">.</span><span style="color:#a6e22e">read</span><span style="color:#f92672">();</span>
        <span style="color:#f92672">}</span>
        fileInputStream<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
        <span style="color:#66d9ef">return</span> Arrays<span style="color:#f92672">.</span><span style="color:#a6e22e">asList</span><span style="color:#f92672">(</span>s<span style="color:#f92672">.</span><span style="color:#a6e22e">split</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;\n&#34;</span><span style="color:#f92672">));</span>
    <span style="color:#f92672">}</span>

  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">writeLinesToFile1</span><span style="color:#f92672">(</span>List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> lines<span style="color:#f92672">,</span> File file<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IOException <span style="color:#f92672">{</span>
        FileOutputStream fileOutputStream <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> FileOutputStream<span style="color:#f92672">(</span>file<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>String s <span style="color:#f92672">:</span> lines<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> bytes <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">getBytes</span><span style="color:#f92672">();</span>
            fileOutputStream<span style="color:#f92672">.</span><span style="color:#a6e22e">write</span><span style="color:#f92672">(</span>bytes<span style="color:#f92672">);</span>
            fileOutputStream<span style="color:#f92672">.</span><span style="color:#a6e22e">write</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#39;\n&#39;</span><span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span>
        fileOutputStream<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
    <span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>BufferReader和BufferWriter</li>
<li>
<ul>
<li>BufferReader 继承 Reader ，而Reader 实现closeable 接口，所以BufferReader 需要关闭</li>
</ul>
</li>
<li>
<ul>
<li>BufferReader 是有锁的，所以是线程安全的方法</li>
</ul>
</li>
<li>
<ul>
<li>BufferReader.readLine()只是read一行，所以要记得用循环</li>
</ul>
</li>
<li>
<ul>
<li>BufferReader.readLine()到达末尾的时候会返回null，如果直接用是否为null判断是否结束的话，会造成死循环（readline不断地返回null），要用一个变量来接受方法的返回值来间接判断。</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"> <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">readFile1</span><span style="color:#f92672">(</span>File file<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> result <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LinkedList<span style="color:#f92672">&lt;&gt;();</span>
        String readLines<span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> String<span style="color:#f92672">();</span>
        String checkReadLine <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> String<span style="color:#f92672">();</span>
        <span style="color:#66d9ef">try</span> <span style="color:#f92672">(</span>BufferedReader bufferedReader <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BufferedReader<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> FileReader<span style="color:#f92672">(</span>file<span style="color:#f92672">)))</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">while</span> <span style="color:#f92672">((</span>checkReadLine <span style="color:#f92672">=</span> bufferedReader<span style="color:#f92672">.</span><span style="color:#a6e22e">readLine</span><span style="color:#f92672">())</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">){</span>
               readLines <span style="color:#f92672">+=</span> checkReadLine<span style="color:#f92672">;</span>
               readLines <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;\n&#34;</span><span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span>
            result <span style="color:#f92672">=</span> Arrays<span style="color:#f92672">.</span><span style="color:#a6e22e">asList</span><span style="color:#f92672">(</span>readLines<span style="color:#f92672">.</span><span style="color:#a6e22e">split</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;\n&#34;</span><span style="color:#f92672">));</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>IOException e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            e<span style="color:#f92672">.</span><span style="color:#a6e22e">printStackTrace</span><span style="color:#f92672">();</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">return</span> result<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">writeLinesToFile1</span><span style="color:#f92672">(</span>List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> lines<span style="color:#f92672">,</span> File file<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IOException <span style="color:#f92672">{</span>
        BufferedWriter bufferedWriter <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BufferedWriter<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> FileWriter<span style="color:#f92672">(</span>file<span style="color:#f92672">));</span>
        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>String s <span style="color:#f92672">:</span> lines<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            bufferedWriter<span style="color:#f92672">.</span><span style="color:#a6e22e">write</span><span style="color:#f92672">(</span>s<span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>       
</code></pre></div><ul>
<li>使用Java 7+的NIO引入的<code>Files.readAllBytes()</code>/<code>Files.readAllLines()</code>/<code>Files.write()</code>方法</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">readFile3</span><span style="color:#f92672">(</span>File file<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IOException <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> Files<span style="color:#f92672">.</span><span style="color:#a6e22e">readAllLines</span><span style="color:#f92672">(</span>file<span style="color:#f92672">.</span><span style="color:#a6e22e">toPath</span><span style="color:#f92672">());</span>
    <span style="color:#f92672">}</span> 
       <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">writeLinesToFile3</span><span style="color:#f92672">(</span>List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> lines<span style="color:#f92672">,</span> File file<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IOException <span style="color:#f92672">{</span>
        Files<span style="color:#f92672">.</span><span style="color:#a6e22e">write</span><span style="color:#f92672">(</span>file<span style="color:#f92672">.</span><span style="color:#a6e22e">toPath</span><span style="color:#f92672">(),</span> lines<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>实现</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">   <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IOException <span style="color:#f92672">{</span>
       File projectDir <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> File<span style="color:#f92672">(</span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">getProperty</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;basedir&#34;</span><span style="color:#f92672">,</span> System<span style="color:#f92672">.</span><span style="color:#a6e22e">getProperty</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;user.dir&#34;</span><span style="color:#f92672">)));</span>
       File testFile <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> File<span style="color:#f92672">(</span>projectDir<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;target/test.txt&#34;</span><span style="color:#f92672">);</span>
       List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> lines <span style="color:#f92672">=</span> Arrays<span style="color:#f92672">.</span><span style="color:#a6e22e">asList</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;AAA&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;BBB&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;CCC&#34;</span><span style="color:#f92672">);</span>
       writeLinesToFile1<span style="color:#f92672">(</span>lines<span style="color:#f92672">,</span> testFile<span style="color:#f92672">);</span>
       writeLinesToFile2<span style="color:#f92672">(</span>lines<span style="color:#f92672">,</span> testFile<span style="color:#f92672">);</span>
       writeLinesToFile3<span style="color:#f92672">(</span>lines<span style="color:#f92672">,</span> testFile<span style="color:#f92672">);</span>

       System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>readFile1<span style="color:#f92672">(</span>testFile<span style="color:#f92672">));</span>
       System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>readFile2<span style="color:#f92672">(</span>testFile<span style="color:#f92672">));</span>
       System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>readFile3<span style="color:#f92672">(</span>testFile<span style="color:#f92672">));</span>
       <span style="color:#f92672">}</span>
   <span style="color:#f92672">}</span>
</code></pre></div><h4 id="读取网络内容csvfile">读取网络内容———&gt;csvFile</h4>
<ul>
<li>csvFile：逗号分隔值（Comma-Separated Values，CSV，有时也称为字符分隔值，因为分隔字符也可以不是逗号），其文件以纯文本形式存储表格数据（数字和文本）。 纯文本意味着该文件是一个字符序列，不含必须像二进制数字那样被解读的数据。</li>
<li>爬取github 信息可以用 GitHub 库的 connectAnonumously匿名链接去爬取</li>
<li>用GHRespository 来获得github仓库的名字</li>
<li>通过GHPullRequest 来发出pull请求，获得仓库的内容,用GHPullRequest里面get的方法来过滤内容</li>
<li>
<ul>
<li>getUser（）获得的是GitHub User 的内容，需要getLogin（）才能够过滤出用户名字</li>
</ul>
</li>
<li>
<ul>
<li>在过滤的过程中要手动添加&rdquo;,&ldquo;来分隔内容，达到csvFile 的要求</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">    <span style="color:#75715e">// 给定一个仓库名，例如&#34;golang/go&#34;，或者&#34;gradle/gradle&#34;，读取前n个Pull request并保存至csvFile指定的文件中，格式如下：
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// number,author,title
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// 12345,blindpirate,这是一个标题
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// 12345,FrankFang,这是第二个标题
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">savePullRequestsToCSV</span><span style="color:#f92672">(</span>String repo<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> n<span style="color:#f92672">,</span> File csvFile<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IOException <span style="color:#f92672">{</span>
        GitHub github <span style="color:#f92672">=</span> GitHub<span style="color:#f92672">.</span><span style="color:#a6e22e">connectAnonymously</span><span style="color:#f92672">();</span>
        GHRepository repository <span style="color:#f92672">=</span> github<span style="color:#f92672">.</span><span style="color:#a6e22e">getRepository</span><span style="color:#f92672">(</span>repo<span style="color:#f92672">);</span>
        List<span style="color:#f92672">&lt;</span>GHPullRequest<span style="color:#f92672">&gt;</span> pullRequests <span style="color:#f92672">=</span> repository<span style="color:#f92672">.</span><span style="color:#a6e22e">getPullRequests</span><span style="color:#f92672">(</span>GHIssueState<span style="color:#f92672">.</span><span style="color:#a6e22e">OPEN</span><span style="color:#f92672">);</span>

        String title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;number,author,title&#34;</span><span style="color:#f92672">;</span>
        List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> lines <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
        List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> body <span style="color:#f92672">=</span> pullRequests<span style="color:#f92672">.</span><span style="color:#a6e22e">stream</span><span style="color:#f92672">().</span><span style="color:#a6e22e">map</span><span style="color:#f92672">(</span>Crawler<span style="color:#f92672">::</span>getLine<span style="color:#f92672">).</span><span style="color:#a6e22e">collect</span><span style="color:#f92672">(</span>Collectors<span style="color:#f92672">.</span><span style="color:#a6e22e">toList</span><span style="color:#f92672">());</span>
        lines<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>title<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> n<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
            lines<span style="color:#f92672">.</span><span style="color:#a6e22e">addAll</span><span style="color:#f92672">(</span>Collections<span style="color:#f92672">.</span><span style="color:#a6e22e">singleton</span><span style="color:#f92672">(</span>body<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>i<span style="color:#f92672">)));</span>
        <span style="color:#f92672">}</span>


        Files<span style="color:#f92672">.</span><span style="color:#a6e22e">write</span><span style="color:#f92672">(</span>csvFile<span style="color:#f92672">.</span><span style="color:#a6e22e">toPath</span><span style="color:#f92672">(),</span> lines<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">static</span> String <span style="color:#a6e22e">getLine</span><span style="color:#f92672">(</span>GHPullRequest pullRequest<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">return</span> pullRequest<span style="color:#f92672">.</span><span style="color:#a6e22e">getNumber</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;,&#34;</span> <span style="color:#f92672">+</span> pullRequest<span style="color:#f92672">.</span><span style="color:#a6e22e">getUser</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getLogin</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;,&#34;</span> <span style="color:#f92672">+</span> pullRequest<span style="color:#f92672">.</span><span style="color:#a6e22e">getTitle</span><span style="color:#f92672">();</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>IOException e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> UncheckedIOException<span style="color:#f92672">(</span>e<span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>计算机网络TCP and Socket</title>
            <link>https://procarihana.github.io/public/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Ctcp-and-socket/</link>
            <pubDate>Sun, 30 Aug 2020 11:39:13 +0800</pubDate>
            
            <guid>https://procarihana.github.io/public/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9Ctcp-and-socket/</guid>
            <description>没有100%可靠的通信协议  红军/蓝军 计算机网络：虚电路分组，A服务器把报文给离目标IP最近的力所能及的设备（过程为HOP），这个设备再把报文发给下一个设备，如果中间某个最佳的设备被毁，就选择另一个设备绕过，直到到达目标IP（快递发货）   网络分层模型  TCP/IP模型（应用层、传输层【四层交换机、四层路由器】、网络层【路由器，三层交换机】） TCP Transmisson Control ProTocal 传输控制协议   TCP的握手与断开       三次握手建立连接        SYN SENT seq = x 发送请求建立连接的请求 -&amp;gt; 获得SYN seq=y,ACK x+1 （同意建立请求） ACK =y+1 表明收到同意建立连接 ==&amp;gt; 连接建立，        四次挥手断开连接        FIN seq = x+2 ACK = y+1发送断链接的请求 -&amp;gt; 获得ACK x+3 表示收到，又获得 FIN seq= y+1 表示断开链接 ACK = y+2 表示收到同意断开链接        如果中间有信息丢掉没有成功收到，会通过请求超时来知道链接断开成功     TCP 协议无法传递数据包，只能把所有数据包拆、黏包   TCP 没有规定包的界限，需要自己设计协议、分隔符、结束符来设计包的边界   TCP 中的数据包含TCP 包首部和数据两个部分，而IP中的数据包含前两个部分，在加上IP包首部 TCP 只有两个字节的端口（65536），端口数量有限制（同时使用），而每个端口访问的对象是不限制   TCP数据里面有确认号码，如果接受的没有收到，就需要重传。校验和可以检验数据是否有被串改，如果有则向发送的一方放再次发送请求 的   以太网则在IP数据的基础杀昂添加以太网包首部 TCP特点   面向连接     点对点 需要有目标端口     可靠交付 校验和、序列号码、确认号码 保证数据正确     面向字节流   UDP 协议（用于视频）   无连接的 无法保证数据是否到达     尽最大可能交付     面向报文的    Scoket  TCP包含客户端和服务器双方的ip和port。这四个元素是四元组（client的src源ip、port和dest目标ip。port），也就是socket/socket的链接。   ip &amp;ndash;&amp;gt; 唯一确定一台计算机，port &amp;ndash;&amp;gt; 端口可以唯一确定监听端口的一个程序   socket 只要制定目标ip和port 就可以发送信息，自身ip会自动提供，如果有指定的port就会使用，如果没有就会自动挑选一个空闲的端口   查询网站ip地址： $ nslookup + 地址    public class SocketTest { public static void main(String[] args) throws IOException { Socket socket = new Socket(&amp;#34;182.</description>
            <content type="html"><![CDATA[<h2 id="没有100可靠的通信协议">没有100%可靠的通信协议</h2>
<ul>
<li>红军/蓝军</li>
<li>计算机网络：虚电路分组，A服务器把报文给离目标IP最近的力所能及的设备（过程为HOP），这个设备再把报文发给下一个设备，如果中间某个最佳的设备被毁，就选择另一个设备绕过，直到到达目标IP（快递发货）</li>
<li></li>
</ul>
<h2 id="网络分层模型">网络分层模型</h2>
<ul>
<li>TCP/IP模型（应用层、传输层【四层交换机、四层路由器】、网络层【路由器，三层交换机】）</li>
<li>TCP Transmisson Control ProTocal 传输控制协议</li>
<li>
<ul>
<li>TCP的握手与断开</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li>三次握手建立连接</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li><code>SYN SENT seq = x</code> 发送请求建立连接的请求 -&gt; 获得<code>SYN seq=y,ACK x+1</code> （同意建立请求）</li>
<li><code>ACK =y+1</code> 表明收到同意建立连接 ==&gt; 连接建立，</li>
</ul>
</blockquote>
<ul>
<li>
<ul>
<li>
<ul>
<li>四次挥手断开连接</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li><code>FIN seq = x+2 ACK = y+1</code>发送断链接的请求 -&gt; 获得<code>ACK x+3</code> 表示收到，又获得 <code>FIN seq= y+1</code> 表示断开链接</li>
<li><code>ACK = y+2</code> 表示收到同意断开链接</li>
</ul>
</blockquote>
<ul>
<li>
<ul>
<li>
<ul>
<li>如果中间有信息丢掉没有成功收到，会通过请求超时来知道链接断开成功</li>
</ul>
</li>
</ul>
</li>
<li>TCP 协议无法传递数据包，只能把所有数据包拆、黏包</li>
<li>
<ul>
<li>TCP 没有规定包的界限，需要自己设计协议、分隔符、结束符来设计包的边界</li>
</ul>
</li>
<li>TCP 中的数据包含TCP 包首部和数据两个部分，而IP中的数据包含前两个部分，在加上IP包首部</li>
<li>TCP 只有两个字节的端口（65536），端口数量有限制（同时使用），而每个端口访问的对象是不限制</li>
<li>
<ul>
<li>TCP数据里面有确认号码，如果接受的没有收到，就需要重传。校验和可以检验数据是否有被串改，如果有则向发送的一方放再次发送请求
的</li>
</ul>
</li>
<li>以太网则在IP数据的基础杀昂添加以太网包首部</li>
<li>TCP特点</li>
<li>
<ul>
<li>面向连接</li>
</ul>
</li>
<li>
<ul>
<li>点对点 需要有目标端口</li>
</ul>
</li>
<li>
<ul>
<li>可靠交付 校验和、序列号码、确认号码 保证数据正确</li>
</ul>
</li>
<li>
<ul>
<li>面向字节流</li>
</ul>
</li>
<li>UDP 协议（用于视频）</li>
<li>
<ul>
<li>无连接的 无法保证数据是否到达</li>
</ul>
</li>
<li>
<ul>
<li>尽最大可能交付</li>
</ul>
</li>
<li>
<ul>
<li>面向报文的</li>
</ul>
</li>
</ul>
<h2 id="scoket">Scoket</h2>
<ul>
<li>TCP包含客户端和服务器双方的ip和port。这四个元素是四元组（client的src源ip、port和dest目标ip。port），也就是socket/socket的链接。</li>
<li>
<ul>
<li>ip &ndash;&gt; 唯一确定一台计算机，port &ndash;&gt; 端口可以唯一确定监听端口的一个程序</li>
</ul>
</li>
<li>socket 只要制定目标ip和port 就可以发送信息，自身ip会自动提供，如果有指定的port就会使用，如果没有就会自动挑选一个空闲的端口</li>
<li>
<ul>
<li>查询网站ip地址： $ nslookup + 地址</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SocketTest</span> <span style="color:#f92672">{</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IOException <span style="color:#f92672">{</span>
        Socket socket <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Socket<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;182.61.200.7&#34;</span><span style="color:#f92672">,</span>443<span style="color:#f92672">);</span>
        socket<span style="color:#f92672">.</span><span style="color:#a6e22e">getOutputStream</span><span style="color:#f92672">().</span><span style="color:#a6e22e">write</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>
<p>Socket 里传输速Http 协议</p>
</li>
<li>
<ul>
<li>抵达服务器地第一个字节一定时是<code>G</code>之后是<code>E</code>、<code>T</code>、<code>0x20</code></li>
</ul>
</li>
<li>
<ul>
<li>按照HTTP协议格式的规定，给服务器返回字节流，就能够手写出HTTP服务器</li>
</ul>
</li>
<li>
<ul>
<li>请求行：</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>请求方法</th>
<th><code>|</code>空格</th>
<th><code>|</code>URL方法</th>
<th><code>|</code>空格</th>
<th><code>|</code>协议版本</th>
<th><code>|</code>回车符（\r）</th>
<th><code>|</code>换行符（\n）</th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
</table>
<ul>
<li>
<ul>
<li>请求头部：</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>头部字段名</th>
<th><code>|</code>：</th>
<th><code>|</code>value</th>
<th><code>|</code>\r</th>
<th><code>|</code>\n</th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>……</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>头部字段名</td>
<td><code>|</code>：</td>
<td><code>|</code>value</td>
<td><code>|</code>\r</td>
<td><code>|</code>\n</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>\r</td>
<td><code>|</code>\n</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>
<ul>
<li>请求数据</li>
</ul>
</li>
<li>手写HTTP协议</li>
<li>
<ul>
<li>本地环回网络接口：127.0.0.1。 能够通过这个接口访问自己的机器</li>
</ul>
</li>
<li>
<ul>
<li><code>socker.accept()</code>执行后要是没有设置返回或者没有下一步的操作，就会一直停在那里阻塞，返回的是一个socket。</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SocketTest</span> <span style="color:#f92672">{</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IOException <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">int</span> port <span style="color:#f92672">=</span> 8080<span style="color:#f92672">;</span>
        ServerSocket serverSocket <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ServerSocket<span style="color:#f92672">();</span>
         serverSocket<span style="color:#f92672">.</span><span style="color:#a6e22e">bind</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> InetSocketAddress<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;127.0.0.1&#34;</span><span style="color:#f92672">,</span>port<span style="color:#f92672">));</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">print</span><span style="color:#f92672">(</span>serverSocket<span style="color:#f92672">.</span><span style="color:#a6e22e">accept</span><span style="color:#f92672">());</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
serverSocket<span style="color:#f92672">.</span><span style="color:#a6e22e">accept</span><span style="color:#f92672">()</span><span style="color:#960050;background-color:#1e0010">：</span>Socket<span style="color:#f92672">[</span>addr<span style="color:#f92672">=/</span>127<span style="color:#f92672">.</span><span style="color:#a6e22e">0</span><span style="color:#f92672">.</span><span style="color:#a6e22e">0</span><span style="color:#f92672">.</span><span style="color:#a6e22e">1</span><span style="color:#f92672">,</span>port<span style="color:#f92672">=</span>54777<span style="color:#f92672">,</span>localport<span style="color:#f92672">=</span>8080<span style="color:#f92672">]</span>

</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SocketTest</span> <span style="color:#f92672">{</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IOException <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">int</span> port <span style="color:#f92672">=</span> 8080<span style="color:#f92672">;</span>
        ServerSocket serverSocket <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ServerSocket<span style="color:#f92672">();</span>
        serverSocket<span style="color:#f92672">.</span><span style="color:#a6e22e">bind</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> InetSocketAddress<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;127.0.0.1&#34;</span><span style="color:#f92672">,</span> port<span style="color:#f92672">));</span>
        Socket socket <span style="color:#f92672">=</span> serverSocket<span style="color:#f92672">.</span><span style="color:#a6e22e">accept</span><span style="color:#f92672">();</span>
        BufferedReader bufferedReader <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BufferedReader<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> InputStreamReader<span style="color:#f92672">(</span>socket<span style="color:#f92672">.</span><span style="color:#a6e22e">getInputStream</span><span style="color:#f92672">()));</span>
        String line <span style="color:#f92672">=</span> bufferedReader<span style="color:#f92672">.</span><span style="color:#a6e22e">readLine</span><span style="color:#f92672">();</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>line<span style="color:#f92672">);</span>
        <span style="color:#75715e">//HTTP response header
</span><span style="color:#75715e"></span>        socket<span style="color:#f92672">.</span><span style="color:#a6e22e">getOutputStream</span><span style="color:#f92672">().</span><span style="color:#a6e22e">write</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;HTTP/1.1 200OK\r\n&#34;</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getBytes</span><span style="color:#f92672">());</span>
        <span style="color:#75715e">//HTTP response header/body 分隔符
</span><span style="color:#75715e"></span>        socket<span style="color:#f92672">.</span><span style="color:#a6e22e">getOutputStream</span><span style="color:#f92672">().</span><span style="color:#a6e22e">write</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;\r\n&#34;</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getBytes</span><span style="color:#f92672">());</span>
        <span style="color:#75715e">//HTTP response body
</span><span style="color:#75715e"></span>        socket<span style="color:#f92672">.</span><span style="color:#a6e22e">getOutputStream</span><span style="color:#f92672">().</span><span style="color:#a6e22e">write</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Hello!&#34;</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getBytes</span><span style="color:#f92672">());</span>

        <span style="color:#75715e">//清理缓冲区，避免堵在缓冲区没有执行
</span><span style="color:#75715e"></span>        socket<span style="color:#f92672">.</span><span style="color:#a6e22e">getOutputStream</span><span style="color:#f92672">().</span><span style="color:#a6e22e">flush</span><span style="color:#f92672">();</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>AccountingService</title>
            <link>https://procarihana.github.io/public/posts/accountingservice/</link>
            <pubDate>Mon, 10 Aug 2020 20:48:22 +0800</pubDate>
            
            <guid>https://procarihana.github.io/public/posts/accountingservice/</guid>
            <description>.ignore放什么 1 *.iml 是 intellij idea的工程配置文件，里面是当前project的一些配置信息。.Idea存放项目的配置信息，包括历史记录，版本控制信息等。 2. .idea/ 3. target/
项目结构和模型转换  external 用于存放外部团队的接口和服务，然后再Manager里面放。在接口处写注析。 exception 异常处理 config 存放MybatisBean等等的Bean Controller 存放SpringBoot对外接口（API接口）   不要有过多的处理逻辑 参数校验越早做越好  manager 组合各个业务的逻辑 先写接口后写实现 Dao Converter 用于转换 Moudle的common向service等等的转换但是不能够用于Http、数据库、IO等操作 Service 部分是给前段展示的内容，不能直接返回密码（加密后的还是可以的）等内容  添加Maven  通过Maven getting start  SpringBoot Spring boot 开发四大步  添加相应依赖   SpringBoot 引入       基础Maven引入：、spring-boot-starter-web、plugin     添加相应注解   添加Appliation类作为SpringBoot入口，并添加注解@SpringBootApplication     添加Controller类，并添加注解@RestController      @RestController == @Controller + @ResponseBodymapping    编写代码 添加相应配置   在resources里添加application.</description>
            <content type="html"><![CDATA[<h2 id="ignore放什么"><code>.ignore</code>放什么</h2>
<p>1 <code>*.iml</code> 是 intellij idea的工程配置文件，里面是当前project的一些配置信息。.Idea存放项目的配置信息，包括历史记录，版本控制信息等。
2. <code>.idea/</code>
3. <code>target/</code></p>
<h2 id="项目结构和模型转换">项目结构和模型转换</h2>
<ol>
<li>external 用于存放外部团队的接口和服务，然后再Manager里面放。在接口处写注析。</li>
<li>exception 异常处理</li>
<li>config  存放MybatisBean等等的Bean</li>
<li>Controller 存放SpringBoot对外接口（API接口）</li>
</ol>
<ul>
<li>不要有过多的处理逻辑</li>
<li>参数校验越早做越好</li>
</ul>
<ol start="5">
<li>manager 组合各个业务的逻辑 先写接口后写实现</li>
<li>Dao</li>
<li>Converter 用于转换 Moudle的common向service等等的转换但是不能够用于Http、数据库、IO等操作</li>
<li>Service 部分是给前段展示的内容，不能直接返回密码（加密后的还是可以的）等内容</li>
</ol>
<h2 id="添加maven">添加Maven</h2>
<ul>
<li>通过Maven getting start</li>
</ul>
<h2 id="springboot">SpringBoot</h2>
<h4 id="spring-boot-开发四大步">Spring boot 开发四大步</h4>
<ul>
<li>添加相应依赖</li>
<li>
<ul>
<li>SpringBoot 引入</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li>基础Maven引入：<!-- raw HTML omitted -->、spring-boot-starter-web、plugin</li>
</ul>
</li>
</ul>
</li>
<li>添加相应注解</li>
<li>
<ul>
<li>添加Appliation类作为SpringBoot入口，并添加注解<code>@SpringBootApplication</code></li>
</ul>
</li>
<li>
<ul>
<li>添加Controller类，并添加注解<code>@RestController</code></li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li><code>@RestController</code> == <code>@Controller</code> + @<code>ResponseBody</code>mapping</li>
</ul>
</blockquote>
<ul>
<li>编写代码</li>
<li>添加相应配置</li>
<li>
<ul>
<li>在<code>resources</code>里添加<code>application.properties</code>或<code>application.yml</code>都可以更改配置</li>
</ul>
</li>
</ul>
<pre><code>server:
  port: 8000(注意是冒号加空格)
</code></pre><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html</a></p>
<h2 id="mybatis">Mybatis</h2>
<ul>
<li>通过Docker 运行mysql</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">docker run <span style="color:#f92672">-</span>d <span style="color:#f92672">--</span>name AccountingService<span style="color:#f92672">-</span>mysql <span style="color:#f92672">-</span>v <span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">`</span>pwd<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#f92672">/</span>MysqlDatabase<span style="color:#f92672">:/</span>var<span style="color:#f92672">/</span>mysql<span style="color:#f92672">/</span>conf<span style="color:#f92672">.</span><span style="color:#a6e22e">d</span>  <span style="color:#f92672">-</span>v <span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">`</span>pwd<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#f92672">/</span>MysqlDatabase<span style="color:#f92672">:/</span>var<span style="color:#f92672">/</span>log<span style="color:#f92672">/</span>mysql <span style="color:#f92672">-</span>v <span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">`</span>pwd<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#f92672">/</span>MysqlDatabase<span style="color:#f92672">:/</span>var<span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>mysql <span style="color:#f92672">-</span>e MYSQL_ROOT_PASSWORD<span style="color:#f92672">=</span>hana <span style="color:#f92672">-</span>p 3306<span style="color:#f92672">:</span>3306 mysql<span style="color:#f92672">:</span>8<span style="color:#f92672">.</span><span style="color:#a6e22e">0</span>
</code></pre></div><ul>
<li>设置mysql</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">create table <span style="color:#960050;background-color:#1e0010">`</span>accounting_userInfo<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#f92672">(</span>
<span style="color:#960050;background-color:#1e0010">`</span>id<span style="color:#960050;background-color:#1e0010">`</span> bigint<span style="color:#f92672">(</span>20<span style="color:#f92672">)</span> unsigned NOT NULL AUTO_INCREMENT<span style="color:#f92672">,</span>
<span style="color:#960050;background-color:#1e0010">`</span>username<span style="color:#960050;background-color:#1e0010">`</span> varchar<span style="color:#f92672">(</span>64<span style="color:#f92672">)</span> NOT NULL COMMENT <span style="color:#960050;background-color:#1e0010">&#39;</span>user name<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">,</span>
<span style="color:#960050;background-color:#1e0010">`</span>password<span style="color:#960050;background-color:#1e0010">`</span> varchar<span style="color:#f92672">(</span>64<span style="color:#f92672">)</span> NOT NULL<span style="color:#f92672">,</span>
<span style="color:#960050;background-color:#1e0010">`</span>create_time<span style="color:#960050;background-color:#1e0010">`</span> datetime<span style="color:#f92672">,</span>
<span style="color:#960050;background-color:#1e0010">`</span>update_time<span style="color:#960050;background-color:#1e0010">`</span> datetime DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP<span style="color:#f92672">,</span>
PRIMARY KEY <span style="color:#960050;background-color:#1e0010">`</span>pk_id<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#f92672">(</span><span style="color:#960050;background-color:#1e0010">`</span>id<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#f92672">),</span>
UNIQUE KEY <span style="color:#960050;background-color:#1e0010">`</span>uk_username<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#f92672">(</span><span style="color:#960050;background-color:#1e0010">`</span>username<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#f92672">)</span>
<span style="color:#f92672">)</span>
ENGINE<span style="color:#f92672">=</span>InnoDB AUTO_INCREMENT<span style="color:#f92672">=</span>1 DEFAULT CHARSET<span style="color:#f92672">=</span>utf8<span style="color:#f92672">;</span>
</code></pre></div><ul>
<li>
<ul>
<li>注意<code>COMMENT</code> 后使用的符号</li>
</ul>
</li>
<li>
<ul>
<li>设置引擎</li>
</ul>
</li>
<li>
<ul>
<li>设置默认字符串utf8</li>
</ul>
</li>
<li>
<ul>
<li>查看数据库table的设置</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">DESC accounting_test<span style="color:#f92672">.</span><span style="color:#a6e22e">accounting_userInfo</span>
</code></pre></div><table>
<thead>
<tr>
<th align="center">Field</th>
<th align="center">Type</th>
<th align="center">Null</th>
<th align="center">Key</th>
<th align="center">Default</th>
<th align="center">Extra</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">id</td>
<td align="center">bigint unsigned</td>
<td align="center">NO</td>
<td align="center">PRI</td>
<td align="center"><code>&lt;null&gt;</code></td>
<td align="center">auto_increment</td>
</tr>
<tr>
<td align="center">username</td>
<td align="center">varchar(64)</td>
<td align="center">NO</td>
<td align="center">UNI</td>
<td align="center"><code>&lt;null&gt;</code></td>
<td></td>
</tr>
<tr>
<td align="center">password</td>
<td align="center">varchar(64)</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center"><code>&lt;null&gt;</code></td>
<td></td>
</tr>
<tr>
<td align="center">create_time</td>
<td align="center">datetime</td>
<td align="center">YES</td>
<td align="center"></td>
<td align="center"><code>&lt;null&gt;</code></td>
<td></td>
</tr>
<tr>
<td align="center">update_time</td>
<td align="center">datetime</td>
<td align="center">YES</td>
<td align="center"></td>
<td align="center"><code>&lt;null&gt;</code></td>
<td align="center">on update CURRENT_TIMESTAMP</td>
</tr>
</tbody>
</table>
<ul>
<li>
<ul>
<li>更改数据库内容</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">UPDATE accounting_userinfo SET password<span style="color:#f92672">=</span><span style="color:#960050;background-color:#1e0010">&#39;</span>111<span style="color:#960050;background-color:#1e0010">&#39;</span> where id<span style="color:#f92672">=</span>1
</code></pre></div><ul>
<li>添加Mybatis 和Mysql 依赖</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">&lt;!--</span> mybatis<span style="color:#f92672">-</span>spring<span style="color:#f92672">-</span>boot<span style="color:#f92672">-</span>starter <span style="color:#f92672">--&gt;</span>
<span style="color:#f92672">&lt;</span>dependency<span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;</span>groupId<span style="color:#f92672">&gt;</span>org<span style="color:#f92672">.</span><span style="color:#a6e22e">mybatis</span><span style="color:#f92672">.</span><span style="color:#a6e22e">spring</span><span style="color:#f92672">.</span><span style="color:#a6e22e">boot</span><span style="color:#f92672">&lt;/</span>groupId<span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;</span>artifactId<span style="color:#f92672">&gt;</span>mybatis<span style="color:#f92672">-</span>spring<span style="color:#f92672">-</span>boot<span style="color:#f92672">-</span>starter<span style="color:#f92672">&lt;/</span>artifactId<span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;</span>version<span style="color:#f92672">&gt;</span>2<span style="color:#f92672">.</span><span style="color:#a6e22e">1</span><span style="color:#f92672">.</span><span style="color:#a6e22e">1</span><span style="color:#f92672">&lt;/</span>version<span style="color:#f92672">&gt;</span>
<span style="color:#f92672">&lt;/</span>dependency<span style="color:#f92672">&gt;</span>

<span style="color:#f92672">&lt;!--</span>Mysql driver<span style="color:#f92672">--&gt;</span>
<span style="color:#f92672">&lt;</span>dependency<span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;</span>groupId<span style="color:#f92672">&gt;</span>mysql<span style="color:#f92672">&lt;/</span>groupId<span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;</span>artifactId<span style="color:#f92672">&gt;</span>mysql<span style="color:#f92672">-</span>connector<span style="color:#f92672">-</span>java<span style="color:#f92672">&lt;/</span>artifactId<span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;</span>version<span style="color:#f92672">&gt;</span>8<span style="color:#f92672">.</span><span style="color:#a6e22e">0</span><span style="color:#f92672">.</span><span style="color:#a6e22e">15</span><span style="color:#f92672">&lt;/</span>version<span style="color:#f92672">&gt;</span>
<span style="color:#f92672">&lt;/</span>dependency<span style="color:#f92672">&gt;</span>
</code></pre></div><ul>
<li>添加Mapper,在Mapper里运行简单的数据库操作</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">package</span> com.Procarihana.AccountingService.Dao.Mapper<span style="color:#f92672">;</span>


<span style="color:#f92672">import</span> com.Procarihana.AccountingService.Moudle.presistence.UserInfo<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> org.apache.ibatis.annotations.Mapper<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> org.apache.ibatis.annotations.Param<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> org.apache.ibatis.annotations.Select<span style="color:#f92672">;</span>

<span style="color:#a6e22e">@Mapper</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">UserInfoMapper</span> <span style="color:#f92672">{</span>

    <span style="color:#a6e22e">@Select</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;SELECT id, username, password, create_time, update_time FROM accounting_userinfo where id =#{id}&#34;</span><span style="color:#f92672">)</span>
    UserInfo <span style="color:#a6e22e">getUserInfoByyUserId</span><span style="color:#f92672">(</span><span style="color:#a6e22e">@Param</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;id&#34;</span><span style="color:#f92672">)</span>Long id<span style="color:#f92672">);</span>

<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>在Dao里完成数据库交互</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">package</span> com.Procarihana.AccountingService.Dao<span style="color:#f92672">;</span>

<span style="color:#f92672">import</span> com.Procarihana.AccountingService.Dao.Mapper.UserInfoMapper<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> com.Procarihana.AccountingService.Moudle.presistence.UserInfo<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> org.springframework.beans.factory.annotation.Autowired<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> org.springframework.stereotype.Repository<span style="color:#f92672">;</span>

<span style="color:#a6e22e">@Repository</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserInfoDaoImpl</span> <span style="color:#66d9ef">implements</span> UserInfoDao<span style="color:#f92672">{</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> UserInfoMapper userInfoMapper<span style="color:#f92672">;</span>

    <span style="color:#a6e22e">@Autowired</span>
    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">UserInfoDaoImpl</span><span style="color:#f92672">(</span>UserInfoMapper userInfoMapper<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">userInfoMapper</span> <span style="color:#f92672">=</span> userInfoMapper<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> UserInfo <span style="color:#a6e22e">getUserInfoById</span><span style="color:#f92672">(</span>Long id<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> userInfoMapper<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserInfoByyUserId</span><span style="color:#f92672">(</span>id<span style="color:#f92672">)</span> <span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><h2 id="api接口">API接口</h2>
<table>
<thead>
<tr>
<th>Method</th>
<th align="center">Description</th>
<th align="right">Is Idempotent</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td align="center"><code>Return the current value of an object</code></td>
<td align="right">True</td>
</tr>
<tr>
<td>PUT</td>
<td align="center"><code>Replace an object, or create a named object, when applicable</code></td>
<td align="right">True</td>
</tr>
<tr>
<td>DELETE</td>
<td align="center"><code>Delete an object</code></td>
<td align="right">True</td>
</tr>
<tr>
<td>POST</td>
<td align="center"><code>Create a new object based on the data provided, or submit a command</code></td>
<td align="right">False</td>
</tr>
<tr>
<td>HEAD</td>
<td align="center"><code>Return metadata of an object for a GET response. Resources that support the GET method MAY support the HEAD method as well</code></td>
<td align="right">True</td>
</tr>
<tr>
<td>PATCH</td>
<td align="center"><code>Apply a partial update to an object</code></td>
<td align="right">False</td>
</tr>
<tr>
<td>OPTIONS</td>
<td align="center"><code>Get information about a request; see below for details.</code></td>
<td align="right">True</td>
</tr>
</tbody>
</table>
<ul>
<li>幂等（）</li>
<li>
<ul>
<li>一次请求和多次请求某个资源应该具有同样的副作用，并非相同结果</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li><code>Get</code> 获取资源（不应有副作用），但结果不一定相同
<a href="http://api.accountingService.com/resources/latest">http://api.accountingService.com/resources/latest</a></li>
</ul>
</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li><code>POST</code> 创建资源（执行动作，有副作用） 多次提交创建出不同的资源（需要有防止多次频繁提交的操作）&mdash;&gt;不是幂等</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code>http://api.accountingService.com/resources/
http://api.accountingService.com/resources/1
http://api.accountingService.com/resources/2
</code></pre><ul>
<li>
<ul>
<li>
<ul>
<li><code>PUT</code>更新操作，也是有副作用，满足幂等性</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code>https://api.hardcore.com/resources/123
更新id为123的资源
</code></pre><ul>
<li>
<ul>
<li>幂等性只与后端服务器的实际状态有关，而每一次请求接收到的状态码不一定相同。</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li>例：<code>DELETE </code> /idX/delete HTTP/1.1是幂等的，即便是不同请求之间接收到的状态码不一样：</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code>DELETE /idX/delete HTTP/1.1   -&gt; Returns 200 if idX exists
DELETE /idX/delete HTTP/1.1   -&gt; Returns 404 as it just got deleted
DELETE /idX/delete HTTP/1.1   -&gt; Returns 404
</code></pre><ul>
<li>
<ul>
<li>类似：f(x)=f(f(x))</li>
</ul>
</li>
<li>
<p>Response格式</p>
</li>
<li>
<ul>
<li>基本要求</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li>JSON属性应该用camelCased</li>
</ul>
</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li>Service应该将JSON作为默认编码</li>
</ul>
</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li>Service必须要支持application/json，并且将application/json作为默认response format</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;user&#34;</span>: {
    <span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#ae81ff">1</span>,
    <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;hardcore&#34;</span>
  }
}
</code></pre></div><ul>
<li>
<ul>
<li>错误请求的Response</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li><strong>一定要用HTTP status code</strong></li>
</ul>
</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li>最简单的三类：</li>
</ul>
</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li>OK 200</li>
</ul>
</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li>Client side error：4XX</li>
</ul>
</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li>Service side error： 5XX</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;error&#34;</span>: {
    <span style="color:#f92672">&#34;code&#34;</span>: <span style="color:#e6db74">&#34;BadArgument&#34;</span>,
    <span style="color:#f92672">&#34;message&#34;</span>: <span style="color:#e6db74">&#34;Multiple errors in ContactInfo data&#34;</span>,
    <span style="color:#f92672">&#34;target&#34;</span>: <span style="color:#e6db74">&#34;ContactInfo&#34;</span>,
    <span style="color:#f92672">&#34;details&#34;</span>: [
      {
        <span style="color:#f92672">&#34;code&#34;</span>: <span style="color:#e6db74">&#34;NullValue&#34;</span>,
        <span style="color:#f92672">&#34;target&#34;</span>: <span style="color:#e6db74">&#34;PhoneNumber&#34;</span>,
        <span style="color:#f92672">&#34;message&#34;</span>: <span style="color:#e6db74">&#34;Phone number must not be null&#34;</span>
      },
      {
        <span style="color:#f92672">&#34;code&#34;</span>: <span style="color:#e6db74">&#34;NullValue&#34;</span>,
        <span style="color:#f92672">&#34;target&#34;</span>: <span style="color:#e6db74">&#34;LastName&#34;</span>,
        <span style="color:#f92672">&#34;message&#34;</span>: <span style="color:#e6db74">&#34;Last name must not be null&#34;</span>
      },
      {
        <span style="color:#f92672">&#34;code&#34;</span>: <span style="color:#e6db74">&#34;MalformedValue&#34;</span>,
        <span style="color:#f92672">&#34;target&#34;</span>: <span style="color:#e6db74">&#34;Address&#34;</span>,
        <span style="color:#f92672">&#34;message&#34;</span>: <span style="color:#e6db74">&#34;Address is not valid&#34;</span>
      }
    ]
  }
}
</code></pre></div><h2 id="异常处理exception">异常处理Exception</h2>
<ul>
<li>异常的报错给前端为Service部分，通过<code>ServiceException</code>来定义报错信息的内容</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">import</span> lombok.Data<span style="color:#f92672">;</span>

<span style="color:#75715e">/**
</span><span style="color:#75715e"> * Accounting Service Exception
</span><span style="color:#75715e"> */</span>
<span style="color:#a6e22e">@Data</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ServiceException</span> <span style="color:#66d9ef">extends</span> RuntimeException <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> statusCode<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> String errorCode<span style="color:#f92672">;</span><span style="color:#75715e">//biz error code
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">private</span> ServiceException<span style="color:#f92672">.</span><span style="color:#a6e22e">ErrorType</span> errorType<span style="color:#f92672">;</span><span style="color:#75715e">//Service,Client,Unknown
</span><span style="color:#75715e"></span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">enum</span> ErrorType <span style="color:#f92672">{</span>
        Cline<span style="color:#f92672">,</span>
        Service<span style="color:#f92672">,</span>
        Unknown
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">ServiceException</span><span style="color:#f92672">(</span>String message<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">super</span><span style="color:#f92672">(</span>message<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>

</code></pre></div><ul>
<li>通过<code>Optional</code>给出异常信息</li>
<li>
<ul>
<li>先写出一个目标异常</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">
<span style="color:#f92672">import</span> org.springframework.http.HttpStatus<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> org.springframework.web.bind.annotation.ResponseStatus<span style="color:#f92672">;</span>

<span style="color:#75715e">/**
</span><span style="color:#75715e"> * Accounting Service ResourceNotFoundException
</span><span style="color:#75715e"> */</span>

<span style="color:#a6e22e">@ResponseStatus</span><span style="color:#f92672">(</span>code <span style="color:#f92672">=</span> HttpStatus<span style="color:#f92672">.</span><span style="color:#a6e22e">NOT_FOUND</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ResourceNotFoundException</span> <span style="color:#66d9ef">extends</span> ServiceException <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">ResourceNotFoundException</span><span style="color:#f92672">(</span>String message<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">super</span><span style="color:#f92672">(</span>message<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">setStatusCode</span><span style="color:#f92672">(</span>HttpStatus<span style="color:#f92672">.</span><span style="color:#a6e22e">NOT_FOUND</span><span style="color:#f92672">.</span><span style="color:#a6e22e">value</span><span style="color:#f92672">());</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>
<ul>
<li>通过<code>Optional</code>得出结果或者抛出异常</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"> <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> UserInfo <span style="color:#a6e22e">getUserInfoByUserID</span><span style="color:#f92672">(</span>Long userId<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#75715e">//com.Procarihana.AccountingService.Moudle.presistence.UserInfo userInfo = userInfoDao.getUserInfoById(userId);
</span><span style="color:#75715e"></span>        val userInfo <span style="color:#f92672">=</span> Optional<span style="color:#f92672">.</span><span style="color:#a6e22e">ofNullable</span><span style="color:#f92672">(</span>userInfoDao<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserInfoById</span><span style="color:#f92672">(</span>userId<span style="color:#f92672">))</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">orElseThrow</span><span style="color:#f92672">(()-&gt;</span><span style="color:#66d9ef">new</span> ResourceNotFoundException<span style="color:#f92672">(</span>String<span style="color:#f92672">.</span><span style="color:#a6e22e">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34; User %s was not found&#34;</span><span style="color:#f92672">,</span>userId<span style="color:#f92672">)));</span>
        UserInfo commonUserInfo <span style="color:#f92672">=</span> userInfoPresToComConverter<span style="color:#f92672">.</span><span style="color:#a6e22e">convert</span><span style="color:#f92672">(</span>userInfo<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">return</span> commonUserInfo<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>更改异常status &ndash;&gt; 通过<code>@RseonseStatus</code>更改status</li>
<li>
<ul>
<li>Eg：<code>500</code>&ndash;&gt;<code>404</code></li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@ResponseStatus</span><span style="color:#f92672">(</span>code <span style="color:#f92672">=</span> HttpStatus<span style="color:#f92672">.</span><span style="color:#a6e22e">NOT_FOUND</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ResourceNotFoundException</span> <span style="color:#66d9ef">extends</span> ServiceException <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">ResourceNotFoundException</span><span style="color:#f92672">(</span>String message<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">super</span><span style="color:#f92672">(</span>message<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">setStatusCode</span><span style="color:#f92672">(</span>HttpStatus<span style="color:#f92672">.</span><span style="color:#a6e22e">NOT_FOUND</span><span style="color:#f92672">.</span><span style="color:#a6e22e">value</span><span style="color:#f92672">());</span>

    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
    <span style="color:#f92672">&#34;timestamp&#34;</span>: <span style="color:#e6db74">&#34;2020-08-12T02:53:49.581+0000&#34;</span>,
    <span style="color:#f92672">&#34;status&#34;</span>: <span style="color:#ae81ff">500</span>,
    <span style="color:#f92672">&#34;error&#34;</span>: <span style="color:#e6db74">&#34;Internal Server Error&#34;</span>,
    <span style="color:#f92672">&#34;message&#34;</span>: <span style="color:#e6db74">&#34; User 2 was not found&#34;</span>,
    <span style="color:#f92672">&#34;path&#34;</span>: <span style="color:#e6db74">&#34;/v1/users/2&#34;</span>
}
</code></pre></div><p>===&gt;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
    <span style="color:#f92672">&#34;timestamp&#34;</span>: <span style="color:#e6db74">&#34;2020-08-12T02:50:36.129+0000&#34;</span>,
    <span style="color:#f92672">&#34;status&#34;</span>: <span style="color:#ae81ff">404</span>,
    <span style="color:#f92672">&#34;error&#34;</span>: <span style="color:#e6db74">&#34;Not Found&#34;</span>,
    <span style="color:#f92672">&#34;message&#34;</span>: <span style="color:#e6db74">&#34; User 2 was not found&#34;</span>,
    <span style="color:#f92672">&#34;path&#34;</span>: <span style="color:#e6db74">&#34;/v1/users/2&#34;</span>
}
</code></pre></div><ul>
<li>自定义ErrorResponse</li>
<li>
<ul>
<li>先写一个异常错误信息类</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Data</span>
<span style="color:#a6e22e">@Builder</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ErrorResponse</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">private</span> String code<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> ServiceException<span style="color:#f92672">.</span><span style="color:#a6e22e">ErrorType</span> errorType<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> String massage<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> statusCode<span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>
<ul>
<li>放在需要自定义异常报错的地方,通过bulider模式完成异常报错的自定义。</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserController</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> UserInfoManager userInfoManager<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> UserInfoCToSeConverter userInfoCToSeConverter<span style="color:#f92672">;</span>

    <span style="color:#a6e22e">@Autowired</span>
    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">UserController</span><span style="color:#f92672">(</span><span style="color:#66d9ef">final</span> UserInfoManager userInfoManager<span style="color:#f92672">,</span>
                          <span style="color:#66d9ef">final</span> UserInfoCToSeConverter userInfoCToSeConverter
                          <span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">userInfoManager</span> <span style="color:#f92672">=</span> userInfoManager<span style="color:#f92672">;</span>
        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">userInfoCToSeConverter</span> <span style="color:#f92672">=</span> userInfoCToSeConverter<span style="color:#f92672">;</span>

    <span style="color:#f92672">}</span>


    <span style="color:#a6e22e">@GetMapping</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/{id}&#34;</span><span style="color:#f92672">,</span>produces <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;application/json; charset=utf-8&#34;</span> <span style="color:#f92672">)</span>
    <span style="color:#66d9ef">public</span> ResponseEntity<span style="color:#f92672">&lt;?&gt;</span> getUserInfoByUserId<span style="color:#f92672">(</span><span style="color:#a6e22e">@PathVariable</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;id&#34;</span><span style="color:#f92672">)</span> Long userId<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        log<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Get user info by user id {}&#34;</span><span style="color:#f92672">,</span> userId<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
            UserInfo userInfo <span style="color:#f92672">=</span> userInfoManager<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserInfoByUserID</span><span style="color:#f92672">(</span>userId<span style="color:#f92672">);</span>
            <span style="color:#66d9ef">return</span> ResponseEntity<span style="color:#f92672">.</span><span style="color:#a6e22e">ok</span><span style="color:#f92672">(</span>userInfoCToSeConverter<span style="color:#f92672">.</span><span style="color:#a6e22e">convert</span><span style="color:#f92672">(</span>userInfo<span style="color:#f92672">));</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>ResourceNotFoundException ex<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">return</span> ResponseEntity<span style="color:#f92672">.</span><span style="color:#a6e22e">status</span><span style="color:#f92672">(</span>HttpStatus<span style="color:#f92672">.</span><span style="color:#a6e22e">NOT_FOUND</span><span style="color:#f92672">)</span>
                    <span style="color:#f92672">.</span><span style="color:#a6e22e">body</span><span style="color:#f92672">(</span>ErrorResponse<span style="color:#f92672">.</span><span style="color:#a6e22e">builder</span><span style="color:#f92672">()</span>
                            <span style="color:#f92672">.</span><span style="color:#a6e22e">code</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;USER_NOT_FOUND&#34;</span><span style="color:#f92672">)</span>
                            <span style="color:#f92672">.</span><span style="color:#a6e22e">errorType</span><span style="color:#f92672">(</span>ServiceException<span style="color:#f92672">.</span><span style="color:#a6e22e">ErrorType</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Cline</span><span style="color:#f92672">)</span>
                            <span style="color:#f92672">.</span><span style="color:#a6e22e">massage</span><span style="color:#f92672">(</span>ex<span style="color:#f92672">.</span><span style="color:#a6e22e">getMessage</span><span style="color:#f92672">())</span>
                            <span style="color:#f92672">.</span><span style="color:#a6e22e">statusCode</span><span style="color:#f92672">(</span>HttpStatus<span style="color:#f92672">.</span><span style="color:#a6e22e">NOT_FOUND</span><span style="color:#f92672">.</span><span style="color:#a6e22e">value</span><span style="color:#f92672">())</span>
                            <span style="color:#f92672">.</span><span style="color:#a6e22e">build</span><span style="color:#f92672">());</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>

<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>
<ul>
<li>异常信息</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
    <span style="color:#f92672">&#34;code&#34;</span>: <span style="color:#e6db74">&#34;USER_NOT_FOUND&#34;</span>,
    <span style="color:#f92672">&#34;errorType&#34;</span>: <span style="color:#e6db74">&#34;Cline&#34;</span>,
    <span style="color:#f92672">&#34;massage&#34;</span>: <span style="color:#e6db74">&#34; User 2 was not found&#34;</span>,
    <span style="color:#f92672">&#34;statusCode&#34;</span>: <span style="color:#ae81ff">404</span>
}
</code></pre></div><ul>
<li>
<ul>
<li>通过统一处理<code>try/catch</code>来优化代码(放在一个类里)</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li><code>@RestControllerAdvice</code>控制增强</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@RestControllerAdvice</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">GlobalExceptionHandler</span> <span style="color:#f92672">{</span>
    <span style="color:#a6e22e">@ExceptionHandler</span><span style="color:#f92672">(</span>ResourceNotFoundException<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">)</span>
    ResponseEntity<span style="color:#f92672">&lt;?&gt;</span> handleResourceNotFoundException<span style="color:#f92672">(</span>ResourceNotFoundException exception<span style="color:#f92672">){</span>
         ErrorResponse errorResponse <span style="color:#f92672">=</span> ErrorResponse<span style="color:#f92672">.</span><span style="color:#a6e22e">builder</span><span style="color:#f92672">()</span>
                 <span style="color:#f92672">.</span><span style="color:#a6e22e">statusCode</span><span style="color:#f92672">(</span>HttpStatus<span style="color:#f92672">.</span><span style="color:#a6e22e">NOT_FOUND</span><span style="color:#f92672">.</span><span style="color:#a6e22e">value</span><span style="color:#f92672">())</span>
                 <span style="color:#f92672">.</span><span style="color:#a6e22e">code</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;USER_NOT_FOUND&#34;</span><span style="color:#f92672">)</span>
                 <span style="color:#f92672">.</span><span style="color:#a6e22e">errorType</span><span style="color:#f92672">(</span>ServiceException<span style="color:#f92672">.</span><span style="color:#a6e22e">ErrorType</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Cline</span><span style="color:#f92672">)</span>
                 <span style="color:#f92672">.</span><span style="color:#a6e22e">massage</span><span style="color:#f92672">(</span>exception<span style="color:#f92672">.</span><span style="color:#a6e22e">getMessage</span><span style="color:#f92672">())</span>
                 <span style="color:#f92672">.</span><span style="color:#a6e22e">build</span><span style="color:#f92672">();</span>
         <span style="color:#66d9ef">return</span> ResponseEntity<span style="color:#f92672">.</span><span style="color:#a6e22e">status</span><span style="color:#f92672">(</span>HttpStatus<span style="color:#f92672">.</span><span style="color:#a6e22e">NOT_FOUND</span><span style="color:#f92672">)</span>
                 <span style="color:#f92672">.</span><span style="color:#a6e22e">body</span><span style="color:#f92672">(</span>errorResponse<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>
<ul>
<li>
<ul>
<li>优化后</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@GetMapping</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/{id}&#34;</span><span style="color:#f92672">,</span> produces <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;application/json; charset=utf-8&#34;</span><span style="color:#f92672">)</span>
    <span style="color:#66d9ef">public</span> ResponseEntity<span style="color:#f92672">&lt;?&gt;</span> getUserInfoByUserId<span style="color:#f92672">(</span><span style="color:#a6e22e">@PathVariable</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;id&#34;</span><span style="color:#f92672">)</span> Long userId<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        log<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Get user info by user id {}&#34;</span><span style="color:#f92672">,</span> userId<span style="color:#f92672">);</span>
        UserInfo userInfo <span style="color:#f92672">=</span> userInfoManager<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserInfoByUserID</span><span style="color:#f92672">(</span>userId<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">return</span> ResponseEntity<span style="color:#f92672">.</span><span style="color:#a6e22e">ok</span><span style="color:#f92672">(</span>userInfoCToSeConverter<span style="color:#f92672">.</span><span style="color:#a6e22e">convert</span><span style="color:#f92672">(</span>userInfo<span style="color:#f92672">));</span> <span style="color:#75715e">//为空的时候会抛出异常，所以不会为空
</span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>设置一个通用的Exception来处理异常</li>
<li>
<ul>
<li><code>setErrorCode</code>一般很少会直接定义，会根据不同的需要在return处来决定，除非是简单且非常明确的异常</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">InvalidParameterException</span> <span style="color:#66d9ef">extends</span> ServiceException<span style="color:#f92672">{</span>
    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">InvalidParameterException</span><span style="color:#f92672">(</span>String message<span style="color:#f92672">){</span>
        <span style="color:#66d9ef">super</span><span style="color:#f92672">(</span>message<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">setStatusCode</span><span style="color:#f92672">(</span>HttpStatus<span style="color:#f92672">.</span><span style="color:#a6e22e">BAD_REQUEST</span><span style="color:#f92672">.</span><span style="color:#a6e22e">value</span><span style="color:#f92672">());</span> <span style="color:#75715e">//BAD_REQUEST.value()为400.
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">setErrorCode</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;INVALID_PARAMETER&#34;</span><span style="color:#f92672">);</span>
        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">setErrorType</span><span style="color:#f92672">(</span>ErrorType<span style="color:#f92672">.</span><span style="color:#a6e22e">Cline</span><span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>
<ul>
<li>使用</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@RestControllerAdvice</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">GlobalExceptionHandler</span> <span style="color:#f92672">{</span>
    <span style="color:#a6e22e">@ExceptionHandler</span><span style="color:#f92672">(</span>InvalidParameterException<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">)</span>
    ResponseEntity<span style="color:#f92672">&lt;?&gt;</span> handleInvalidParameterException<span style="color:#f92672">(</span>InvalidParameterException exception<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        ErrorResponse errorResponse <span style="color:#f92672">=</span> ErrorResponse<span style="color:#f92672">.</span><span style="color:#a6e22e">builder</span><span style="color:#f92672">()</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">statusCode</span><span style="color:#f92672">(</span>exception<span style="color:#f92672">.</span><span style="color:#a6e22e">getStatusCode</span><span style="color:#f92672">())</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">code</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;USER_NOT_FOUND&#34;</span><span style="color:#f92672">)</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">errorType</span><span style="color:#f92672">(</span>exception<span style="color:#f92672">.</span><span style="color:#a6e22e">getErrorType</span><span style="color:#f92672">())</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">massage</span><span style="color:#f92672">(</span>exception<span style="color:#f92672">.</span><span style="color:#a6e22e">getMessage</span><span style="color:#f92672">())</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">build</span><span style="color:#f92672">();</span>
        <span style="color:#66d9ef">return</span> ResponseEntity<span style="color:#f92672">.</span><span style="color:#a6e22e">status</span><span style="color:#f92672">(</span>exception<span style="color:#f92672">.</span><span style="color:#a6e22e">getStatusCode</span><span style="color:#f92672">()</span> <span style="color:#f92672">!=</span> 0 <span style="color:#f92672">?</span>
                exception<span style="color:#f92672">.</span><span style="color:#a6e22e">getStatusCode</span><span style="color:#f92672">()</span>
                <span style="color:#f92672">:</span>HttpStatus<span style="color:#f92672">.</span><span style="color:#a6e22e">INTERNAL_SERVER_ERROR</span><span style="color:#f92672">.</span><span style="color:#a6e22e">value</span><span style="color:#f92672">())</span> <span style="color:#75715e">//如果为空就返回500
</span><span style="color:#75715e"></span>                <span style="color:#f92672">.</span><span style="color:#a6e22e">body</span><span style="color:#f92672">(</span>errorResponse<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>当Exception 继承某个类的时候，通过↓，可以根据限制条件来自动选择执行Exctption</li>
<li>
<ul>
<li>Eg：Exception 都继承ServiceException</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">InvalidParameterException</span> <span style="color:#66d9ef">extends</span> ServiceException<span style="color:#f92672">{</span>
<span style="color:#f92672">}</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ResourceNotFoundException</span> <span style="color:#66d9ef">extends</span> ServiceException <span style="color:#f92672">{</span>
<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>
<ul>
<li>根据使用的条件</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@GetMapping</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/{id}&#34;</span><span style="color:#f92672">,</span> produces <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;application/json; charset=utf-8&#34;</span><span style="color:#f92672">)</span>
    <span style="color:#66d9ef">public</span> ResponseEntity<span style="color:#f92672">&lt;?&gt;</span> getUserInfoByUserId<span style="color:#f92672">(</span><span style="color:#a6e22e">@PathVariable</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;id&#34;</span><span style="color:#f92672">)</span> Long userId<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        log<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Get user info by user id {}&#34;</span><span style="color:#f92672">,</span> userId<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>userId <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">|</span>userId <span style="color:#f92672">&lt;=</span>0<span style="color:#f92672">){</span>
         <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> InvalidParameterException<span style="color:#f92672">(</span>String<span style="color:#f92672">.</span><span style="color:#a6e22e">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;The user id %s is invalid.&#34;</span><span style="color:#f92672">,</span>userId<span style="color:#f92672">));</span>
        <span style="color:#f92672">}</span>
        UserInfo userInfo <span style="color:#f92672">=</span> userInfoManager<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserInfoByUserID</span><span style="color:#f92672">(</span>userId<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">return</span> ResponseEntity<span style="color:#f92672">.</span><span style="color:#a6e22e">ok</span><span style="color:#f92672">(</span>userInfoCToSeConverter<span style="color:#f92672">.</span><span style="color:#a6e22e">convert</span><span style="color:#f92672">(</span>userInfo<span style="color:#f92672">));</span> <span style="color:#75715e">//为空的时候会抛出异常，所以不会为空
</span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>
<ul>
<li>直接执行对应的exception，从而能够全局地处理异常</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@RestControllerAdvice</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">GlobalExceptionHandler</span> <span style="color:#f92672">{</span>
    <span style="color:#a6e22e">@ExceptionHandler</span><span style="color:#f92672">(</span>ServiceException<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">)</span>
    ResponseEntity<span style="color:#f92672">&lt;?&gt;</span> handleParameterException<span style="color:#f92672">(</span>ServiceException exception<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        ErrorResponse errorResponse <span style="color:#f92672">=</span> ErrorResponse<span style="color:#f92672">.</span><span style="color:#a6e22e">builder</span><span style="color:#f92672">()</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">statusCode</span><span style="color:#f92672">(</span>exception<span style="color:#f92672">.</span><span style="color:#a6e22e">getStatusCode</span><span style="color:#f92672">())</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">code</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;USER_NOT_FOUND&#34;</span><span style="color:#f92672">)</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">errorType</span><span style="color:#f92672">(</span>exception<span style="color:#f92672">.</span><span style="color:#a6e22e">getErrorType</span><span style="color:#f92672">())</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">massage</span><span style="color:#f92672">(</span>exception<span style="color:#f92672">.</span><span style="color:#a6e22e">getMessage</span><span style="color:#f92672">())</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">build</span><span style="color:#f92672">();</span>
        <span style="color:#66d9ef">return</span> ResponseEntity<span style="color:#f92672">.</span><span style="color:#a6e22e">status</span><span style="color:#f92672">(</span>exception<span style="color:#f92672">.</span><span style="color:#a6e22e">getStatusCode</span><span style="color:#f92672">()</span> <span style="color:#f92672">!=</span> 0 <span style="color:#f92672">?</span>
                exception<span style="color:#f92672">.</span><span style="color:#a6e22e">getStatusCode</span><span style="color:#f92672">()</span>
                <span style="color:#f92672">:</span> HttpStatus<span style="color:#f92672">.</span><span style="color:#a6e22e">INTERNAL_SERVER_ERROR</span><span style="color:#f92672">.</span><span style="color:#a6e22e">value</span><span style="color:#f92672">())</span> <span style="color:#75715e">//如果为空就返回500
</span><span style="color:#75715e"></span>                <span style="color:#f92672">.</span><span style="color:#a6e22e">body</span><span style="color:#f92672">(</span>errorResponse<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>

</code></pre></div><h2 id="单元测试">单元测试</h2>
<ul>
<li>SpringBoot tset maven</li>
<li>
<ul>
<li>exclusion 是为了把Junit4排除，从而使用Junit5</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">       <span style="color:#f92672">&lt;</span>dependency<span style="color:#f92672">&gt;</span>
            <span style="color:#f92672">&lt;</span>groupId<span style="color:#f92672">&gt;</span>org<span style="color:#f92672">.</span><span style="color:#a6e22e">springframework</span><span style="color:#f92672">.</span><span style="color:#a6e22e">boot</span><span style="color:#f92672">&lt;/</span>groupId<span style="color:#f92672">&gt;</span>
            <span style="color:#f92672">&lt;</span>artifactId<span style="color:#f92672">&gt;</span>spring<span style="color:#f92672">-</span>boot<span style="color:#f92672">-</span>starter<span style="color:#f92672">-</span>test<span style="color:#f92672">&lt;/</span>artifactId<span style="color:#f92672">&gt;</span>
            <span style="color:#f92672">&lt;</span>scope<span style="color:#f92672">&gt;</span>test<span style="color:#f92672">&lt;/</span>scope<span style="color:#f92672">&gt;</span>
            <span style="color:#f92672">&lt;</span>exclusions<span style="color:#f92672">&gt;</span>
                <span style="color:#f92672">&lt;</span>exclusion<span style="color:#f92672">&gt;</span>
                    <span style="color:#f92672">&lt;</span>groupId<span style="color:#f92672">&gt;</span>org<span style="color:#f92672">.</span><span style="color:#a6e22e">junit</span><span style="color:#f92672">.</span><span style="color:#a6e22e">vintage</span><span style="color:#f92672">&lt;/</span>groupId<span style="color:#f92672">&gt;</span>
                    <span style="color:#f92672">&lt;</span>artifactId<span style="color:#f92672">&gt;</span>junit<span style="color:#f92672">-</span>vintage<span style="color:#f92672">-</span>engine<span style="color:#f92672">&lt;/</span>artifactId<span style="color:#f92672">&gt;</span>
                <span style="color:#f92672">&lt;/</span>exclusion<span style="color:#f92672">&gt;</span>
            <span style="color:#f92672">&lt;/</span>exclusions<span style="color:#f92672">&gt;</span>
        <span style="color:#f92672">&lt;/</span>dependency<span style="color:#f92672">&gt;</span>
</code></pre></div><ul>
<li>package :utils</li>
<li>
<ul>
<li>用于继承需要测试的接口，然后build一个实例</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li>接口</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Mapper</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">UserInfoMapper</span> <span style="color:#f92672">{</span>

    <span style="color:#a6e22e">@Select</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;SELECT id, username, password, create_time, update_time FROM accounting_userinfo where id =#{id}&#34;</span><span style="color:#f92672">)</span>
    UserInfo <span style="color:#a6e22e">getUserInfoByyUserId</span><span style="color:#f92672">(</span><span style="color:#a6e22e">@Param</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;id&#34;</span><span style="color:#f92672">)</span>Long id<span style="color:#f92672">);</span>

<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>
<ul>
<li>
<ul>
<li>实现</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserInfoMapperTestLmp</span> <span style="color:#66d9ef">implements</span> UserInfoMapper <span style="color:#f92672">{</span>

    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> UserInfo <span style="color:#a6e22e">getUserInfoByyUserId</span><span style="color:#f92672">(</span>Long id<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> id <span style="color:#f92672">&gt;</span>0<span style="color:#f92672">?</span>UserInfo<span style="color:#f92672">.</span><span style="color:#a6e22e">builder</span><span style="color:#f92672">()</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">(</span>id<span style="color:#f92672">)</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">username</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;TestUsername&#34;</span><span style="color:#f92672">)</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">password</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;TestPassword&#34;</span><span style="color:#f92672">)</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">updateTime</span><span style="color:#f92672">(</span>LocalDate<span style="color:#f92672">.</span><span style="color:#a6e22e">now</span><span style="color:#f92672">())</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">createTime</span><span style="color:#f92672">(</span>LocalDate<span style="color:#f92672">.</span><span style="color:#a6e22e">now</span><span style="color:#f92672">())</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">build</span><span style="color:#f92672">():</span><span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li><code>@BeforeEach</code></li>
<li><code>assertEquals</code></li>
<li><code>assertThrow</code></li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#75715e">/**
</span><span style="color:#75715e">	 * &lt;em&gt;Assert&lt;/em&gt; that execution of the supplied {@code executable} throws
</span><span style="color:#75715e">	 * an exception of the {@code expectedType} and returns the exception.
</span><span style="color:#75715e">	 *
</span><span style="color:#75715e">	 * &lt;p&gt;If no exception is thrown, or if an exception of a different type is
</span><span style="color:#75715e">	 * thrown, this method will fail.
</span><span style="color:#75715e">	 *
</span><span style="color:#75715e">	 * &lt;p&gt;If you do not want to perform additional checks on the exception instance,
</span><span style="color:#75715e">	 * simply ignore the return value.
</span><span style="color:#75715e">	 */</span>
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#f92672">&lt;</span>T <span style="color:#66d9ef">extends</span> Throwable<span style="color:#f92672">&gt;</span> T <span style="color:#a6e22e">assertThrows</span><span style="color:#f92672">(</span>Class<span style="color:#f92672">&lt;</span>T<span style="color:#f92672">&gt;</span> expectedType<span style="color:#f92672">,</span> Executable executable<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">return</span> AssertThrows<span style="color:#f92672">.</span><span style="color:#a6e22e">assertThrows</span><span style="color:#f92672">(</span>expectedType<span style="color:#f92672">,</span> executable<span style="color:#f92672">);</span>
	<span style="color:#f92672">}</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">  <span style="color:#a6e22e">@Test</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">testUserInfoByInvalidUserId</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
        Long userId <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>1L<span style="color:#f92672">;</span>
        Assertions<span style="color:#f92672">.</span><span style="color:#a6e22e">assertThrows</span><span style="color:#f92672">(</span>ResourceNotFoundException<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span> <span style="color:#f92672">()</span> <span style="color:#f92672">-&gt;</span> userInfoManager<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserInfoByUserID</span><span style="color:#f92672">(</span>userId<span style="color:#f92672">));</span>
    <span style="color:#f92672">}</span>
</code></pre></div><ul>
<li><code>assertThat</code> AssertJ</li>
<li>
<ul>
<li>引入的包要正确<code>import static org.assertj.core.api.Assertions.assertThat;</code></li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">    <span style="color:#a6e22e">@Test</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">testUserInfoByUserId</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
        Long userId <span style="color:#f92672">=</span> 1L<span style="color:#f92672">;</span>

        UserInfo result <span style="color:#f92672">=</span> userInfoManager<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserInfoByUserID</span><span style="color:#f92672">(</span>userId<span style="color:#f92672">);</span>
        <span style="color:#75715e">//AssertJ
</span><span style="color:#75715e"></span>        assertThat<span style="color:#f92672">(</span>result<span style="color:#f92672">).</span><span style="color:#a6e22e">isNotNull</span><span style="color:#f92672">()</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">hasFieldOrPropertyWithValue</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;id&#34;</span><span style="color:#f92672">,</span>userId<span style="color:#f92672">)</span>
                 <span style="color:#75715e">//有没有这个属性,并核对属性的内容是否正确
</span><span style="color:#75715e"></span>                <span style="color:#f92672">.</span><span style="color:#a6e22e">hasFieldOrPropertyWithValue</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;username&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;TestUsername&#34;</span><span style="color:#f92672">)</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">hasFieldOrPropertyWithValue</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;password&#34;</span><span style="color:#f92672">,</span><span style="color:#e6db74">&#34;TestPassword&#34;</span><span style="color:#f92672">);</span>

    <span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>和没有Mockito对比,需要去创建一个真实的对象</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserInfoManagerTest</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">private</span> UserInfoManager userInfoManager<span style="color:#f92672">;</span>

    <span style="color:#a6e22e">@BeforeEach</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setup</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
        val userInfoMapper <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> UserInfoMapperTestImp<span style="color:#f92672">();</span>
        val userInfoPresToComConverter <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> UserInfoPresToComConverter<span style="color:#f92672">();</span>
        val userInfoDao <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> UserInfoDaoImpl<span style="color:#f92672">(</span>userInfoMapper<span style="color:#f92672">);</span>
        userInfoManager <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> UserInfoManagerImpl<span style="color:#f92672">(</span>userInfoDao<span style="color:#f92672">,</span> userInfoPresToComConverter<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>

    <span style="color:#a6e22e">@Test</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">testUserInfoByUserId</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
        Long userId <span style="color:#f92672">=</span> 1L<span style="color:#f92672">;</span>

        UserInfo result <span style="color:#f92672">=</span> userInfoManager<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserInfoByUserID</span><span style="color:#f92672">(</span>userId<span style="color:#f92672">);</span>

        Assertions<span style="color:#f92672">.</span><span style="color:#a6e22e">assertEquals</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;TestUsername&#34;</span><span style="color:#f92672">,</span> result<span style="color:#f92672">.</span><span style="color:#a6e22e">getUsername</span><span style="color:#f92672">());</span>
        Assertions<span style="color:#f92672">.</span><span style="color:#a6e22e">assertEquals</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;TestPassword&#34;</span><span style="color:#f92672">,</span> result<span style="color:#f92672">.</span><span style="color:#a6e22e">getPassword</span><span style="color:#f92672">());</span>

    <span style="color:#f92672">}</span>

</code></pre></div><ul>
<li>Mockito</li>
<li>
<ul>
<li><code>verify</code> == <code>assert</code>，都是用于判断</li>
</ul>
</li>
<li>
<ul>
<li><code>when/then</code> 用于设定一个模拟对象进行测试</li>
</ul>
</li>
<li>
<ul>
<li><code>do</code> == <code>when/then</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>doNothing<br>
doReturn<br>
doThrow</p>
<ul>
<li>注意使用的方法</li>
</ul>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"> doThrow<span style="color:#f92672">(</span>exception<span style="color:#f92672">).</span><span style="color:#a6e22e">when</span><span style="color:#f92672">(</span>mock<span style="color:#f92672">).</span><span style="color:#a6e22e">someVoidMethod</span><span style="color:#f92672">();</span>
</code></pre></div><p>sort？？？</p>
<ul>
<li>
<ul>
<li>区别在于Mockito在调用<code>spy()</code>进行实现的过程中，执行<code>when/then</code> 的时候，如果有规定模拟的结果就会返回该模拟结果，如果没有，则会返回真是数据的结果。而执行<code>do</code>方法则会和普通的调用<code>mock()</code>一样只会调用提前设置好的虚拟对象和结果，不会返回真实的数据</li>
</ul>
</li>
<li>
<ul>
<li><code>spy()</code>如果一个方法定制了返回值或者异常，那么就会按照定制的方式被调用执行；如果一个方法没被定制，那么调用的就是真实类的方法。
cnblogs.com/softidea/p/4204389.html</li>
</ul>
</li>
<li>
<p><code>MockitoAnnotations.initMocks(this);</code>  用来体型Mockito 识别对象</p>
</li>
</ul>
<blockquote>
<p>MockitoAnnotations.initMocks(this); initializes fields annotated with Mockito annotations.
See also {@link MockitoSession} which not only initializes mocks
but also adds extra validation for cleaner tests!</p>
</blockquote>
<ul>
<li>ControllerTest</li>
<li>
<ul>
<li>MockMvc 虚拟出一个Mvc用于测试</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@ExtendWith</span><span style="color:#f92672">(</span>MockitoExtension<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">)</span>
<span style="color:#a6e22e">@ExtendWith</span><span style="color:#f92672">(</span>SpringExtension<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserControllerTest</span> <span style="color:#f92672">{</span>
 <span style="color:#66d9ef">private</span> MockMvc mockMvc<span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>
<ul>
<li>运行Controller 需要用到的业务通过Mock虚拟出来,如果是简单的转换等的方法可以通过new 出新的对象来完成</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"> <span style="color:#a6e22e">@Mock</span>
 <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserControllerTest</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">private</span> UserInfoManager userInfoManager<span style="color:#f92672">;</span>
 <span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>
<ul>
<li>装配mockMvc</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"> <span style="color:#a6e22e">@BeforeEach</span>
    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setup</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
        mockMvc <span style="color:#f92672">=</span> MockMvcBuilders<span style="color:#f92672">.</span><span style="color:#a6e22e">standaloneSetup</span><span style="color:#f92672">(</span>
                <span style="color:#66d9ef">new</span> UserController<span style="color:#f92672">(</span>
                        userInfoManager<span style="color:#f92672">,</span> <span style="color:#66d9ef">new</span> UserInfoCToSeConverter<span style="color:#f92672">()))</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">setControllerAdvice</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> GlobalExceptionHandler<span style="color:#f92672">())</span> <span style="color:#75715e">//通过`setControllerAdvice`引入自定义的异常
</span><span style="color:#75715e"></span>                <span style="color:#f92672">.</span><span style="color:#a6e22e">build</span><span style="color:#f92672">();</span>
    <span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>
<ul>
<li>Mock出来的虚拟对象如果要进行多次的测试，且每次测试对象的内容都不一样的时候，要进行清空</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">   <span style="color:#a6e22e">@AfterEach</span>
    <span style="color:#66d9ef">void</span>  <span style="color:#a6e22e">teatDown</span><span style="color:#f92672">(){</span>
        reset<span style="color:#f92672">(</span>userInfoManager<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>
<ul>
<li>检测返回的json结果是否正确</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">    <span style="color:#f92672">.</span><span style="color:#a6e22e">andExpect</span><span style="color:#f92672">(</span>content<span style="color:#f92672">().</span><span style="color:#a6e22e">string</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> ObjectMapper<span style="color:#f92672">().</span><span style="color:#a6e22e">writeValueAsString</span><span style="color:#f92672">(</span>userInfoS<span style="color:#f92672">)))</span>
    <span style="color:#f92672">.</span><span style="color:#a6e22e">andExpect</span><span style="color:#f92672">(</span>content<span style="color:#f92672">().</span><span style="color:#a6e22e">string</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{\&#34;id\&#34;:2,\&#34;username\&#34;:\&#34;666\&#34;,\&#34;password\&#34;:null}&#34;</span><span style="color:#f92672">));</span>
</code></pre></div><ul>
<li>
<ul>
<li>进行测试的时候</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li>要注意<code>@Test</code>引入的包是否正确</li>
</ul>
</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li><code>doReturn(返回对象).when(条件对象).条件对象的方法</code>格式</li>
</ul>
</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li><code>mockMvc.perform(get(&quot;&quot;))</code>要以&rdquo;/&ldquo;开头</li>
</ul>
</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li>最后要用<code>verify</code>来检测<code>@Mock</code>的对象是否正常运行</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">  <span style="color:#a6e22e">@Test</span>
    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">getUserInfoByUserIdTest</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
        String username <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;666&#34;</span><span style="color:#f92672">;</span>
        String password <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;666&#34;</span><span style="color:#f92672">;</span>
        LocalDate createTime <span style="color:#f92672">=</span> LocalDate<span style="color:#f92672">.</span><span style="color:#a6e22e">now</span><span style="color:#f92672">();</span>
        LocalDate updateTime <span style="color:#f92672">=</span> LocalDate<span style="color:#f92672">.</span><span style="color:#a6e22e">now</span><span style="color:#f92672">();</span>
        Long userId <span style="color:#f92672">=</span> 2L<span style="color:#f92672">;</span>
        UserInfo userInfoC <span style="color:#f92672">=</span> UserInfo<span style="color:#f92672">.</span><span style="color:#a6e22e">builder</span><span style="color:#f92672">()</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">(</span>userId<span style="color:#f92672">)</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">username</span><span style="color:#f92672">(</span>username<span style="color:#f92672">)</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">password</span><span style="color:#f92672">(</span>password<span style="color:#f92672">)</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">build</span><span style="color:#f92672">();</span>
        doReturn<span style="color:#f92672">(</span>userInfoC<span style="color:#f92672">).</span><span style="color:#a6e22e">when</span><span style="color:#f92672">(</span>userInfoManager<span style="color:#f92672">).</span><span style="color:#a6e22e">getUserInfoByUserID</span><span style="color:#f92672">(</span>anyLong<span style="color:#f92672">());</span>


        mockMvc<span style="color:#f92672">.</span><span style="color:#a6e22e">perform</span><span style="color:#f92672">(</span>get<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/v1.0/users/&#34;</span> <span style="color:#f92672">+</span> userId<span style="color:#f92672">))</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">andExpect</span><span style="color:#f92672">(</span>status<span style="color:#f92672">().</span><span style="color:#a6e22e">isOk</span><span style="color:#f92672">())</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">andExpect</span><span style="color:#f92672">(</span>content<span style="color:#f92672">().</span><span style="color:#a6e22e">contentType</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;application/json;charset=utf-8 &#34;</span><span style="color:#f92672">))</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">andExpect</span><span style="color:#f92672">(</span>content<span style="color:#f92672">().</span><span style="color:#a6e22e">string</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{\&#34;id\&#34;:2,\&#34;username\&#34;:\&#34;666\&#34;,\&#34;password\&#34;:null}&#34;</span><span style="color:#f92672">));</span>
        verify<span style="color:#f92672">(</span>userInfoManager<span style="color:#960050;background-color:#1e0010">，</span>never<span style="color:#f92672">).</span><span style="color:#a6e22e">getUserInfoByUserID</span><span style="color:#f92672">(</span>anyLong<span style="color:#f92672">());</span>
    <span style="color:#f92672">}</span>

</code></pre></div><h2 id="checkstyle">CheckStyle</h2>
<ul>
<li>maven</li>
<li>
<ul>
<li><code>&lt;phase&gt;validate</code>是在没有编译代码的时候进行检查，如果是verify则是在最后的阶段进行检查</li>
</ul>
</li>
<li>
<ul>
<li>引用后要记得更改configLocation<code>&lt;configLocation&gt;checkstyle.xml&lt;/configLocation&gt;</code>&ndash;&gt;</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">&lt;</span>plugin<span style="color:#f92672">&gt;</span>
        <span style="color:#f92672">&lt;</span>groupId<span style="color:#f92672">&gt;</span>org<span style="color:#f92672">.</span><span style="color:#a6e22e">apache</span><span style="color:#f92672">.</span><span style="color:#a6e22e">maven</span><span style="color:#f92672">.</span><span style="color:#a6e22e">plugins</span><span style="color:#f92672">&lt;/</span>groupId<span style="color:#f92672">&gt;</span>
        <span style="color:#f92672">&lt;</span>artifactId<span style="color:#f92672">&gt;</span>maven<span style="color:#f92672">-</span>checkstyle<span style="color:#f92672">-</span>plugin<span style="color:#f92672">&lt;/</span>artifactId<span style="color:#f92672">&gt;</span>
        <span style="color:#f92672">&lt;</span>version<span style="color:#f92672">&gt;</span>3<span style="color:#f92672">.</span><span style="color:#a6e22e">1</span><span style="color:#f92672">.</span><span style="color:#a6e22e">1</span><span style="color:#f92672">&lt;/</span>version<span style="color:#f92672">&gt;</span>
        <span style="color:#f92672">&lt;</span>configuration<span style="color:#f92672">&gt;</span>
          <span style="color:#f92672">&lt;</span>configLocation<span style="color:#f92672">&gt;</span>$<span style="color:#f92672">{</span>project<span style="color:#f92672">.</span><span style="color:#a6e22e">basedir</span><span style="color:#f92672">}/</span>src<span style="color:#f92672">/</span>main<span style="color:#f92672">/</span>resources<span style="color:#f92672">/</span>checkstyle_checks<span style="color:#f92672">.</span><span style="color:#a6e22e">xml</span><span style="color:#f92672">&lt;/</span>configLocation<span style="color:#f92672">&gt;</span>
          <span style="color:#f92672">&lt;</span>encoding<span style="color:#f92672">&gt;</span>UTF<span style="color:#f92672">-</span>8<span style="color:#f92672">&lt;/</span>encoding<span style="color:#f92672">&gt;</span>
     <span style="color:#f92672">&lt;</span>consoleOutput<span style="color:#f92672">&gt;</span><span style="color:#66d9ef">true</span><span style="color:#f92672">&lt;/</span>consoleOutput<span style="color:#f92672">&gt;</span>
     <span style="color:#f92672">&lt;</span>failsOnError<span style="color:#f92672">&gt;</span><span style="color:#66d9ef">true</span><span style="color:#f92672">&lt;/</span>failsOnError<span style="color:#f92672">&gt;</span>
     <span style="color:#f92672">&lt;</span>linkXRef<span style="color:#f92672">&gt;</span><span style="color:#66d9ef">false</span><span style="color:#f92672">&lt;/</span>linkXRef<span style="color:#f92672">&gt;</span>
        <span style="color:#f92672">&lt;/</span>configuration<span style="color:#f92672">&gt;</span>
        <span style="color:#f92672">&lt;</span>executions<span style="color:#f92672">&gt;</span>
     <span style="color:#f92672">&lt;</span>execution<span style="color:#f92672">&gt;</span>
       <span style="color:#f92672">&lt;</span>id<span style="color:#f92672">&gt;</span>validate<span style="color:#f92672">&lt;/</span>id<span style="color:#f92672">&gt;</span>
       <span style="color:#f92672">&lt;</span>phase<span style="color:#f92672">&gt;</span>validate<span style="color:#f92672">&lt;/</span>phase<span style="color:#f92672">&gt;</span>
       <span style="color:#f92672">&lt;</span>goals<span style="color:#f92672">&gt;</span>
         <span style="color:#f92672">&lt;</span>goal<span style="color:#f92672">&gt;</span>check<span style="color:#f92672">&lt;/</span>goal<span style="color:#f92672">&gt;</span>
       <span style="color:#f92672">&lt;/</span>goals<span style="color:#f92672">&gt;</span>
     <span style="color:#f92672">&lt;/</span>execution<span style="color:#f92672">&gt;</span>
   <span style="color:#f92672">&lt;/</span>executions<span style="color:#f92672">&gt;</span>
      <span style="color:#f92672">&lt;/</span>plugin<span style="color:#f92672">&gt;</span>
</code></pre></div><ul>
<li><code>checstyle_checks.xml</code> 一般会放在resources 里</li>
<li>
<ul>
<li><code>&lt;property name=&quot;severity&quot; value=&quot;error&quot;/&gt;</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>运行的时候CheckStyle出现问题就会直接失败,而原始状态的<code>warning</code>则只是警告</p>
</blockquote>
<ul>
<li>
<ul>
<li><code>&lt;property name=&quot;basicOffset&quot; value=&quot;4&quot;/&gt;</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>缩进 大多数的库缩进都是4个空格，最好checkstyle 的时候改成4</p>
</blockquote>
<ul>
<li>
<ul>
<li>import</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li><code>AvoidStarImport</code> 禁止包名以* 的形式省略</li>
<li><code>UnusedImports</code> 不能存在没有使用的Imports</li>
<li><code> &lt;module name=&quot;CustomImportOrder&quot;&gt;</code>用于管理imports顺序<br>
顺序：先Static，然后是special的</li>
</ul>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">&lt;</span>property name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;customImportOrderRules&#34;</span>
                      value<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;STATIC###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE###STANDARD_JAVA_PACKAGE&#34;</span><span style="color:#f92672">/&gt;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"> <span style="color:#f92672">&lt;</span>module name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;AvoidStarImport&#34;</span><span style="color:#f92672">/&gt;</span>
        <span style="color:#f92672">&lt;</span>module name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;RedundantImport&#34;</span><span style="color:#f92672">/&gt;</span>
        <span style="color:#f92672">&lt;</span>module name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;UnusedImports&#34;</span><span style="color:#f92672">/&gt;</span>
        <span style="color:#f92672">&lt;</span>module name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;CustomImportOrder&#34;</span><span style="color:#f92672">&gt;</span>
            <span style="color:#f92672">&lt;</span>property name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;specialImportsRegExp&#34;</span> value<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;(com.Procarihana)&#34;</span><span style="color:#f92672">/&gt;</span>
            <span style="color:#f92672">&lt;</span>property name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;standardPackageRegExp&#34;</span> value<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;^(java|javax)\.&#34;</span><span style="color:#f92672">/&gt;</span>
            <span style="color:#f92672">&lt;!--&lt;</span>property name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;thirdPartyPackageRegExp&#34;</span> value<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;^(com|org|lombok)\.&#34;</span><span style="color:#f92672">/&gt;--&gt;</span>
            <span style="color:#f92672">&lt;</span>property name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sortImportsInGroupAlphabetically&#34;</span> value<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;true&#34;</span><span style="color:#f92672">/&gt;</span>
            <span style="color:#f92672">&lt;</span>property name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;separateLineBetweenGroups&#34;</span> value<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;true&#34;</span><span style="color:#f92672">/&gt;</span>
            <span style="color:#f92672">&lt;</span>property name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;customImportOrderRules&#34;</span>
                      value<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;STATIC###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE###STANDARD_JAVA_PACKAGE&#34;</span><span style="color:#f92672">/&gt;</span>
</code></pre></div><ul>
<li>运行：mvn checkstyle:check</li>
<li>target里的result可以看到错误的记录</li>
<li>
<ul>
<li><code>CheckStyle-Idea</code> plugin安装，方便修改错误<br>
<a href="https://www.jianshu.com/p/6b51b8ceefa5">https://www.jianshu.com/p/6b51b8ceefa5</a></li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>注意checkStyle-ide 和 maven checkStyle（在version点进去后可以看到） 版本一置</li>
<li>更改code style 时要注意查看一下有没有问题</li>
</ul>
</blockquote>
<h2 id="sportbug">SportBug</h2>
<ul>
<li>pom.xml
<a href="https://www.jacoco.org/jacoco/trunk/doc/examples/build/pom.xml">https://www.jacoco.org/jacoco/trunk/doc/examples/build/pom.xml</a></li>
<li>期望代码检查的覆盖率为0.6</li>
<li>
<ul>
<li>测试后可以通过<code>target -&gt; site -&gt; jacoco -&gt; index.xml</code>里面找到覆盖情况</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">&lt;</span>limit<span style="color:#f92672">&gt;</span>
                                            <span style="color:#f92672">&lt;</span>counter<span style="color:#f92672">&gt;</span>COMPLEXITY<span style="color:#f92672">&lt;/</span>counter<span style="color:#f92672">&gt;</span>
                                            <span style="color:#f92672">&lt;</span>value<span style="color:#f92672">&gt;</span>COVEREDRATIO<span style="color:#f92672">&lt;/</span>value<span style="color:#f92672">&gt;</span>
                                            <span style="color:#f92672">&lt;</span>minimum<span style="color:#f92672">&gt;</span>0<span style="color:#f92672">.</span><span style="color:#a6e22e">60</span><span style="color:#f92672">&lt;/</span>minimum<span style="color:#f92672">&gt;</span>
                                        <span style="color:#f92672">&lt;/</span>limit<span style="color:#f92672">&gt;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">&lt;</span>plugin<span style="color:#f92672">&gt;</span>
                <span style="color:#f92672">&lt;</span>groupId<span style="color:#f92672">&gt;</span>org<span style="color:#f92672">.</span><span style="color:#a6e22e">jacoco</span><span style="color:#f92672">&lt;/</span>groupId<span style="color:#f92672">&gt;</span>
                <span style="color:#f92672">&lt;</span>artifactId<span style="color:#f92672">&gt;</span>jacoco<span style="color:#f92672">-</span>maven<span style="color:#f92672">-</span>plugin<span style="color:#f92672">&lt;/</span>artifactId<span style="color:#f92672">&gt;</span>
                <span style="color:#f92672">&lt;</span>version<span style="color:#f92672">&gt;</span>0<span style="color:#f92672">.</span><span style="color:#a6e22e">8</span><span style="color:#f92672">.</span><span style="color:#a6e22e">6</span><span style="color:#f92672">-</span>SNAPSHOT<span style="color:#f92672">&lt;/</span>version<span style="color:#f92672">&gt;</span>
                <span style="color:#f92672">&lt;</span>executions<span style="color:#f92672">&gt;</span>
                    <span style="color:#f92672">&lt;</span>execution<span style="color:#f92672">&gt;</span>
                        <span style="color:#f92672">&lt;</span>id<span style="color:#f92672">&gt;</span><span style="color:#66d9ef">default</span><span style="color:#f92672">-</span>prepare<span style="color:#f92672">-</span>agent<span style="color:#f92672">&lt;/</span>id<span style="color:#f92672">&gt;</span>
                        <span style="color:#f92672">&lt;</span>goals<span style="color:#f92672">&gt;</span>
                            <span style="color:#f92672">&lt;</span>goal<span style="color:#f92672">&gt;</span>prepare<span style="color:#f92672">-</span>agent<span style="color:#f92672">&lt;/</span>goal<span style="color:#f92672">&gt;</span>
                        <span style="color:#f92672">&lt;/</span>goals<span style="color:#f92672">&gt;</span>
                    <span style="color:#f92672">&lt;/</span>execution<span style="color:#f92672">&gt;</span>
                    <span style="color:#f92672">&lt;</span>execution<span style="color:#f92672">&gt;</span>
                        <span style="color:#f92672">&lt;</span>id<span style="color:#f92672">&gt;</span><span style="color:#66d9ef">default</span><span style="color:#f92672">-</span>report<span style="color:#f92672">&lt;/</span>id<span style="color:#f92672">&gt;</span>
                        <span style="color:#f92672">&lt;</span>goals<span style="color:#f92672">&gt;</span>
                            <span style="color:#f92672">&lt;</span>goal<span style="color:#f92672">&gt;</span>report<span style="color:#f92672">&lt;/</span>goal<span style="color:#f92672">&gt;</span>
                        <span style="color:#f92672">&lt;/</span>goals<span style="color:#f92672">&gt;</span>
                    <span style="color:#f92672">&lt;/</span>execution<span style="color:#f92672">&gt;</span>
                    <span style="color:#f92672">&lt;</span>execution<span style="color:#f92672">&gt;</span>
                        <span style="color:#f92672">&lt;</span>id<span style="color:#f92672">&gt;</span><span style="color:#66d9ef">default</span><span style="color:#f92672">-</span>check<span style="color:#f92672">&lt;/</span>id<span style="color:#f92672">&gt;</span>
                        <span style="color:#f92672">&lt;</span>goals<span style="color:#f92672">&gt;</span>
                            <span style="color:#f92672">&lt;</span>goal<span style="color:#f92672">&gt;</span>check<span style="color:#f92672">&lt;/</span>goal<span style="color:#f92672">&gt;</span>
                        <span style="color:#f92672">&lt;/</span>goals<span style="color:#f92672">&gt;</span>
                        <span style="color:#f92672">&lt;</span>configuration<span style="color:#f92672">&gt;</span>
                            <span style="color:#f92672">&lt;</span>rules<span style="color:#f92672">&gt;</span>
                                <span style="color:#f92672">&lt;</span>rule<span style="color:#f92672">&gt;</span>
                                    <span style="color:#f92672">&lt;</span>element<span style="color:#f92672">&gt;</span>BUNDLE<span style="color:#f92672">&lt;/</span>element<span style="color:#f92672">&gt;</span>
                                    <span style="color:#f92672">&lt;</span>limits<span style="color:#f92672">&gt;</span>
                                        <span style="color:#f92672">&lt;</span>limit<span style="color:#f92672">&gt;</span>
                                            <span style="color:#f92672">&lt;</span>counter<span style="color:#f92672">&gt;</span>COMPLEXITY<span style="color:#f92672">&lt;/</span>counter<span style="color:#f92672">&gt;</span>
                                            <span style="color:#f92672">&lt;</span>value<span style="color:#f92672">&gt;</span>COVEREDRATIO<span style="color:#f92672">&lt;/</span>value<span style="color:#f92672">&gt;</span>
                                            <span style="color:#f92672">&lt;</span>minimum<span style="color:#f92672">&gt;</span>0<span style="color:#f92672">.</span><span style="color:#a6e22e">60</span><span style="color:#f92672">&lt;/</span>minimum<span style="color:#f92672">&gt;</span>
                                        <span style="color:#f92672">&lt;/</span>limit<span style="color:#f92672">&gt;</span>
                                    <span style="color:#f92672">&lt;/</span>limits<span style="color:#f92672">&gt;</span>
                                <span style="color:#f92672">&lt;/</span>rule<span style="color:#f92672">&gt;</span>
                            <span style="color:#f92672">&lt;/</span>rules<span style="color:#f92672">&gt;</span>
                        <span style="color:#f92672">&lt;/</span>configuration<span style="color:#f92672">&gt;</span>
                    <span style="color:#f92672">&lt;/</span>execution<span style="color:#f92672">&gt;</span>
                <span style="color:#f92672">&lt;/</span>executions<span style="color:#f92672">&gt;</span>
            <span style="color:#f92672">&lt;/</span>plugin<span style="color:#f92672">&gt;</span>
</code></pre></div><ul>
<li>当使用lombok自动配置对象的builder的时候，jacoco是辨别不出来此为储存内容的对象，使得测试率下降。
<a href="https://medium.com/@mladen.bolic/lombok-data-improve-your-code-coverage-a74fb624a72b">https://medium.com/@mladen.bolic/lombok-data-improve-your-code-coverage-a74fb624a72b</a></li>
<li>
<ul>
<li><code>lombok.config</code>要放在根目录！（和pom.xml）一样的位置！</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#960050;background-color:#1e0010">#</span> lombok<span style="color:#f92672">.</span><span style="color:#a6e22e">config</span>
lombok<span style="color:#f92672">.</span><span style="color:#a6e22e">addLombokGeneratedAnnotation</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>
</code></pre></div><h2 id="在github-actions中创建一个持续集成ci工作流以使用maven构建和测试java项目">在GitHub Actions中创建一个持续集成（CI）工作流，以使用Maven构建和测试Java项目</h2>
<p><a href="https://docs.github.com/en/actions/language-and-framework-guides/building-and-testing-java-with-maven">https://docs.github.com/en/actions/language-and-framework-guides/building-and-testing-java-with-maven</a></p>
<ul>
<li>新建一个目录<code>.github/workflows</code></li>
<li>在里面新建一个<code>maven.xml</code>文件（文件名可以任意取，但是后缀名统一为.yml）</li>
<li>复制</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">  
<span style="color:#960050;background-color:#1e0010">#</span> This workflow will build a Java project with Maven
<span style="color:#960050;background-color:#1e0010">#</span> For more information see<span style="color:#f92672">:</span> https<span style="color:#f92672">:</span><span style="color:#75715e">//help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
</span><span style="color:#75715e"></span>
name: Java CI with Maven

on:
  push<span style="color:#f92672">:</span>
    branches<span style="color:#f92672">:</span> <span style="color:#f92672">[</span> $default<span style="color:#f92672">-</span>branch <span style="color:#f92672">]</span>
  pull_request<span style="color:#f92672">:</span>
    branches<span style="color:#f92672">:</span> <span style="color:#f92672">[</span> $default<span style="color:#f92672">-</span>branch <span style="color:#f92672">]</span>

jobs:
  build<span style="color:#f92672">:</span>

    runs<span style="color:#f92672">-</span>on<span style="color:#f92672">:</span> ubuntu<span style="color:#f92672">-</span>latest

    steps:
    <span style="color:#f92672">-</span> uses<span style="color:#f92672">:</span> actions<span style="color:#f92672">/</span>checkout<span style="color:#a6e22e">@v2</span>
    <span style="color:#f92672">-</span> name<span style="color:#f92672">:</span> Set up JDK 1<span style="color:#f92672">.</span><span style="color:#a6e22e">8</span>
      uses<span style="color:#f92672">:</span> actions<span style="color:#f92672">/</span>setup<span style="color:#f92672">-</span>java<span style="color:#a6e22e">@v1</span>
      with<span style="color:#f92672">:</span>
        java<span style="color:#f92672">-</span>version<span style="color:#f92672">:</span> 1<span style="color:#f92672">.</span><span style="color:#a6e22e">8</span>
    <span style="color:#f92672">-</span> name<span style="color:#f92672">:</span> Build with Maven
      run<span style="color:#f92672">:</span> mvn <span style="color:#f92672">-</span>B <span style="color:#f92672">package</span> <span style="color:#960050;background-color:#1e0010">--</span>file pom<span style="color:#f92672">.</span><span style="color:#a6e22e">xml</span>
</code></pre></div><ul>
<li>
<ul>
<li>此工作流程执行以下步骤：</li>
</ul>
</li>
</ul>
<ol>
<li>该checkout步骤将在运行程序上下载存储库的副本。</li>
<li>该setup-java步骤配置Java 1.8 JDK。</li>
<li>“使用Maven进行构建”步骤package以非交互方式运行Maven 目标，以确保您的代码得以构建，通过测试并可以创建包。</li>
</ol>
<ul>
<li>
<ul>
<li>branches 一般都是master 或者是自己其他的branch(branch 名字写不对是识别不了Ci的，不要问为什么知道……)</li>
</ul>
</li>
<li>
<ul>
<li>maven run 的内容根据需要 ，一般都是 <code>mvn verify</code>做最后的检查</li>
</ul>
</li>
<li>
<p>spotbug 设置</p>
</li>
<li>
<ul>
<li>maven</li>
</ul>
</li>
</ul>
<h2 id="controller">Controller</h2>
<ul>
<li>Mapping</li>
<li>
<ul>
<li>路径里面添加变量</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@RestController</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">HelloController</span> <span style="color:#f92672">{</span>

    <span style="color:#a6e22e">@GetMapping</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;greeting/{name}&#34;</span><span style="color:#f92672">)</span>
    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">sayHello</span><span style="color:#f92672">(</span><span style="color:#a6e22e">@PathVariable</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;name&#34;</span><span style="color:#f92672">)</span>String name<span style="color:#f92672">){</span>
        <span style="color:#66d9ef">return</span> String<span style="color:#f92672">.</span><span style="color:#a6e22e">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Hello,%s&#34;</span><span style="color:#f92672">,</span>name<span style="color:#f92672">);</span>

    <span style="color:#f92672">}</span>

<span style="color:#f92672">}</span>
http:<span style="color:#75715e">//127.0.0.1:8080/greeting/aa
</span><span style="color:#75715e"></span>效果:Hello<span style="color:#f92672">,</span>aa
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">    <span style="color:#a6e22e">@GetMapping</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;greeting/&#34;</span><span style="color:#f92672">)</span>
    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">sayHello</span><span style="color:#f92672">(</span><span style="color:#a6e22e">@RequestParam</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;name&#34;</span><span style="color:#f92672">)</span>String name<span style="color:#f92672">){</span>
        <span style="color:#66d9ef">return</span> String<span style="color:#f92672">.</span><span style="color:#a6e22e">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Hello,%s&#34;</span><span style="color:#f92672">,</span>name<span style="color:#f92672">);</span>

    <span style="color:#f92672">}</span>
http:<span style="color:#75715e">//127.0.0.1:8080/greeting?name=aa    
</span><span style="color:#75715e"></span>效果:Hello<span style="color:#f92672">,</span>aa
</code></pre></div><ul>
<li>通过Mapping里面表明来说明版本问题</li>
</ul>
<pre><code>@RequestMapping(&quot;v1/users&quot;)
public class UserController{

}
</code></pre><ul>
<li>Controller 使用的是Service 对象，因为是直接给前端的</li>
</ul>
<h2 id="使用swagger-创建api">使用Swagger 创建API</h2>
<ul>
<li>自动生成API文档，专门为SpringFamily</li>
<li>maven</li>
<li>
<ul>
<li><code>springfox-swagger2</code> 只是文档，没有可读性。Swagger UI:提供了一个可视化的UI页面展示描述文件。</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"> <span style="color:#f92672">&lt;!--</span>Swagger<span style="color:#f92672">-</span>UI API doc generator<span style="color:#f92672">--&gt;</span>
        <span style="color:#f92672">&lt;</span>dependency<span style="color:#f92672">&gt;</span>
            <span style="color:#f92672">&lt;</span>groupId<span style="color:#f92672">&gt;</span>io<span style="color:#f92672">.</span><span style="color:#a6e22e">springfox</span><span style="color:#f92672">&lt;/</span>groupId<span style="color:#f92672">&gt;</span>
            <span style="color:#f92672">&lt;</span>artifactId<span style="color:#f92672">&gt;</span>springfox<span style="color:#f92672">-</span>swagger2<span style="color:#f92672">&lt;/</span>artifactId<span style="color:#f92672">&gt;</span>
            <span style="color:#f92672">&lt;</span>version<span style="color:#f92672">&gt;</span>2<span style="color:#f92672">.</span><span style="color:#a6e22e">7</span><span style="color:#f92672">.</span><span style="color:#a6e22e">0</span><span style="color:#f92672">&lt;/</span>version<span style="color:#f92672">&gt;</span>
        <span style="color:#f92672">&lt;/</span>dependency<span style="color:#f92672">&gt;</span>
        <span style="color:#f92672">&lt;</span>dependency<span style="color:#f92672">&gt;</span>
            <span style="color:#f92672">&lt;</span>groupId<span style="color:#f92672">&gt;</span>io<span style="color:#f92672">.</span><span style="color:#a6e22e">springfox</span><span style="color:#f92672">&lt;/</span>groupId<span style="color:#f92672">&gt;</span>
            <span style="color:#f92672">&lt;</span>artifactId<span style="color:#f92672">&gt;</span>springfox<span style="color:#f92672">-</span>swagger<span style="color:#f92672">-</span>ui<span style="color:#f92672">&lt;/</span>artifactId<span style="color:#f92672">&gt;</span>
            <span style="color:#f92672">&lt;</span>version<span style="color:#f92672">&gt;</span>2<span style="color:#f92672">.</span><span style="color:#a6e22e">7</span><span style="color:#f92672">.</span><span style="color:#a6e22e">0</span><span style="color:#f92672">&lt;/</span>version<span style="color:#f92672">&gt;</span>
        <span style="color:#f92672">&lt;/</span>dependency<span style="color:#f92672">&gt;</span>
</code></pre></div><ul>
<li>
<ul>
<li>配置 SpringFoxConfig</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">
</code></pre></div><ul>
<li>
<ul>
<li>配置 ShiroConfig</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>swagger-ui、 swagger-ui的资源无论如何都要可以访问的</li>
<li>v2 web架构？</li>
</ul>
</blockquote>
<ul>
<li>
<ul>
<li>改善各个Controller 的注解</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li><code>@Api</code>  value:对整个Controller进行描述</li>
<li><code>@ApiOperation</code> 对Controller 下的 接口进行描述（get、post、put……）<code>value</code>:写API描述，<code>resource</code>:写返回的类型</li>
<li><code>@ApiResponses</code>允许放status、message等，表现每个status表示什么问题</li>
</ul>
</blockquote>
<h2 id="shiro">shiro</h2>
<ul>
<li>是一个强大灵活的开源安全框架，可以完全处理身份验证、授权、加密和会话管理。</li>
</ul>
<blockquote>
<p>Authentication（认证）, Authorization（授权）, Session Management（会话管理）, Cryptography（加密）被 Shiro 框架的开发团队称之为应用安全的四大基石。</p>
<ul>
<li>Authentication（认证）：用户身份识别，通常被称为用户“登录”</li>
<li>Authorization（授权）：访问控制。比如某个用户是否具有某个操作的使用权限。</li>
<li>Session Management（会话管理）：特定于用户的会话管理,甚至在非web 或 EJB 应用程序。</li>
<li>Cryptography（加密）：在对数据源使用加密算法加密的同时，保证易于使用。</li>
</ul>
</blockquote>
<ul>
<li>在概念层，Shiro 架构包含三个主要的理念：Subject,SecurityManager和 Realm。</li>
</ul>
<blockquote>
<p>-Subject：当前用户，Subject 可以是一个人，但也可以是第三方服务、守护进程帐户、时钟守护任务或者其它–当前和软件交互的任何事件。</p>
<ul>
<li>SecurityManager：管理所有Subject，SecurityManager 是 Shiro 架构的核心，配合内部安全组件共同组成安全伞。</li>
<li>Realms：用于进行权限信息的验证，我们自己实现。Realm 本质上是一个特定的安全 DAO：它封装与数据源连接的细节，得到Shiro 所需的相关的数据。在配置 Shiro 的时候，你必须指定至少一个Realm 来实现认证（authentication）和/或授权（authorization）。
<a href="https://zhuanlan.zhihu.com/p/54176956">https://zhuanlan.zhihu.com/p/54176956</a></li>
</ul>
</blockquote>
<ul>
<li>Shiro 实现基本登录</li>
<li>
<ul>
<li>maven</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">&lt;!--</span> https<span style="color:#f92672">:</span><span style="color:#75715e">//mvnrepository.com/artifact/org.apache.shiro/shiro-spring --&gt;
</span><span style="color:#75715e"></span><span style="color:#f92672">&lt;</span>dependency<span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;</span>groupId<span style="color:#f92672">&gt;</span>org<span style="color:#f92672">.</span><span style="color:#a6e22e">apache</span><span style="color:#f92672">.</span><span style="color:#a6e22e">shiro</span><span style="color:#f92672">&lt;/</span>groupId<span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;</span>artifactId<span style="color:#f92672">&gt;</span>shiro<span style="color:#f92672">-</span>spring<span style="color:#f92672">&lt;/</span>artifactId<span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;</span>version<span style="color:#f92672">&gt;</span>1<span style="color:#f92672">.</span><span style="color:#a6e22e">5</span><span style="color:#f92672">.</span><span style="color:#a6e22e">3</span><span style="color:#f92672">&lt;/</span>version<span style="color:#f92672">&gt;</span>
<span style="color:#f92672">&lt;/</span>dependency<span style="color:#f92672">&gt;</span>
</code></pre></div><ul>
<li>
<ul>
<li>ShiroConfig</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>引入的<code>SecurityManager</code>的包一定是<code>import org.apache.shiro.mgt.SecurityManager;</code></li>
<li><code>SecurityManager</code>需要一个实现Realm（范围）接口的实例作为参数来用于获得AuthenticationInfo（用户信息）</li>
<li><code>ShiroFilter</code>拦截器</li>
</ul>
<blockquote>
<p>-Filter</p>
<ul>
<li>
<ul>
<li>判断请求是否合法，根据条件完成请求的处理，所有线程都结束工作或者timeout的话就执行<code>DESTORY</code></li>
</ul>
</li>
<li>
<ul>
<li>Filter Chain Eg:<code>request -&gt; f1 -&gt; f2 -&gt; handler -&gt; f3 -&gt;response</code></li>
</ul>
</li>
<li>
<ul>
<li>defalult Filture 可以看到权限的枚举</li>
</ul>
</li>
</ul>
</blockquote>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">package</span> javax.servlet<span style="color:#f92672">;</span>    
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">default</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">init</span><span style="color:#f92672">(</span>FilterConfig filterConfig<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> ServletException <span style="color:#f92672">{}</span>
   <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">default</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">init</span><span style="color:#f92672">(</span>FilterConfig filterConfig<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> ServletException <span style="color:#f92672">{}</span>
   <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">default</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">destroy</span><span style="color:#f92672">()</span> <span style="color:#f92672">{}</span>
   <span style="color:#f92672">}</span>
<span style="color:#960050;background-color:#1e0010">```</span>java

<span style="color:#a6e22e">@Configuration</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ShiroConfig</span> <span style="color:#f92672">{</span>
   <span style="color:#a6e22e">@Bean</span>
   <span style="color:#66d9ef">public</span> SecurityManager <span style="color:#a6e22e">securityManager</span><span style="color:#f92672">(</span>Realm realm<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
       <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> DefaultWebSecurityManager<span style="color:#f92672">(</span>realm<span style="color:#f92672">);</span>
   <span style="color:#f92672">}</span>

   <span style="color:#75715e">/**
</span><span style="color:#75715e">    * Shiro Filter,实现权限相关拦截
</span><span style="color:#75715e">    * &lt;p&gt;
</span><span style="color:#75715e">    * anon: Not need login access
</span><span style="color:#75715e">    * authc: required login ,and then access
</span><span style="color:#75715e">    * user: remember me -&gt; access
</span><span style="color:#75715e">    * role: role -&gt; access
</span><span style="color:#75715e">    */</span>

   <span style="color:#a6e22e">@Bean</span>
   <span style="color:#66d9ef">public</span> ShiroFilterFactoryBean <span style="color:#a6e22e">shiroFilterFactoryBean</span><span style="color:#f92672">(</span>SecurityManager securityManager<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
       val shiroFilterFactoryBean <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ShiroFilterFactoryBean<span style="color:#f92672">();</span>
       shiroFilterFactoryBean<span style="color:#f92672">.</span><span style="color:#a6e22e">setSecurityManager</span><span style="color:#f92672">(</span>securityManager<span style="color:#f92672">);</span>

       <span style="color:#75715e">//控制url用什么权限访问，常用LinkedHashMap
</span><span style="color:#75715e"></span>       val shiroFilterDefinitionMap <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LinkedHashMap<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span> String<span style="color:#f92672">&gt;();</span>
       <span style="color:#75715e">//map需要顺序，因为有&#39;/**&#39;的设置，如果没有顺序，容易造成`/**`控制所有的页面，其他的权限控制无效的情况
</span><span style="color:#75715e"></span>
       shiroFilterDefinitionMap<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/v1.0/greeting&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;authc&#34;</span><span style="color:#f92672">);</span> <span style="color:#75715e">//需要登录才能访问
</span><span style="color:#75715e"></span>       shiroFilterDefinitionMap<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;v1.0/users/&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;anon&#34;</span><span style="color:#f92672">);</span> <span style="color:#75715e">//不需要登录就能访问
</span><span style="color:#75715e"></span>       shiroFilterDefinitionMap<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/**&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;authc&#34;</span><span style="color:#f92672">);</span><span style="color:#75715e">//其他的页面需要登录才能够访问
</span><span style="color:#75715e"></span>
       shiroFilterFactoryBean<span style="color:#f92672">.</span><span style="color:#a6e22e">setFilterChainDefinitionMap</span><span style="color:#f92672">(</span>shiroFilterDefinitionMap<span style="color:#f92672">);</span>
       <span style="color:#66d9ef">return</span> shiroFilterFactoryBean<span style="color:#f92672">;</span>
   <span style="color:#f92672">}</span>

<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>
<ul>
<li>Realm 实现 userRealm为例</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li><code>@Component</code>使得<code>SecurityManager</code>能够识别</li>
<li>password 和 username 比较好的异常</li>
</ul>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">  
            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> UnknownAccountException<span style="color:#f92672">(</span>String<span style="color:#f92672">.</span><span style="color:#a6e22e">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;The username %s was not found.&#34;</span><span style="color:#f92672">,</span>username<span style="color:#f92672">));</span>

 
            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> IncorrectCredentialsException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;The password is invalid for username %s.&#34;</span><span style="color:#f92672">)</span>
    
</code></pre></div><blockquote>
<ul>
<li>完成User 的认证</li>
</ul>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> SimpleAuthenticationInfo<span style="color:#f92672">(</span>UserInfo<span style="color:#f92672">.</span><span style="color:#a6e22e">getUsername</span><span style="color:#f92672">,</span> password<span style="color:#f92672">,</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getName</span><span style="color:#f92672">());</span> <span style="color:#75715e">//认证
</span></code></pre></div><p>···</p>
<ul>
<li>
<ul>
<li>SessionController</li>
</ul>
</li>
</ul>
<h2 id="密码加密">密码加密</h2>
<ul>
<li>密码不能明文传输，一定要加密</li>
<li>数据库要储存加密后的密码</li>
<li>
<ul>
<li>基本加密：MD5 SHA5 <code>EG：MD5(password) -&gt; newPassword -&gt; database</code></li>
</ul>
</li>
<li>
<ul>
<li>加盐加密 : <code>EG: MD5(password + salt) -&gt; newPassword -&gt; database</code></li>
</ul>
</li>
<li>
<ul>
<li>多次迭代加盐加密</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Round 1 
<span style="color:#a6e22e">MD5</span><span style="color:#f92672">(</span>password <span style="color:#f92672">+</span> salt<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span> newPassword_1 
Round 2
<span style="color:#a6e22e">MD5</span><span style="color:#f92672">(</span>newPassword_1 <span style="color:#f92672">+</span> salt<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span> newPassword_2
<span style="color:#960050;background-color:#1e0010">……</span>
MD5<span style="color:#f92672">(</span>newPassword_n<span style="color:#f92672">-</span>1 <span style="color:#f92672">+</span> salt<span style="color:#f92672">)</span> <span style="color:#f92672">-&gt;</span> newPassword_n <span style="color:#f92672">-&gt;</span> database
</code></pre></div><ul>
<li>数据库加密版数据库……</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">create</span> <span style="color:#a6e22e">table</span> <span style="color:#e6db74">`accounting_userinfo`</span>(
<span style="color:#e6db74">`id`</span> <span style="color:#a6e22e">bigint</span>(<span style="color:#ae81ff">20</span>) <span style="color:#a6e22e">unsigned</span> <span style="color:#a6e22e">NOT</span> <span style="color:#a6e22e">NULL</span> <span style="color:#a6e22e">AUTO_INCREMENT</span>,
<span style="color:#e6db74">`username`</span> <span style="color:#a6e22e">varchar</span>(<span style="color:#ae81ff">64</span>) <span style="color:#a6e22e">NOT</span> <span style="color:#a6e22e">NULL</span> <span style="color:#a6e22e">COMMENT</span> <span style="color:#e6db74">&#39;user name&#39;</span>,
<span style="color:#e6db74">`password`</span> <span style="color:#a6e22e">varchar</span>(<span style="color:#ae81ff">64</span>) <span style="color:#a6e22e">NOT</span> <span style="color:#a6e22e">NULL</span>,
<span style="color:#e6db74">`salt`</span> <span style="color:#a6e22e">varchar</span>(<span style="color:#ae81ff">50</span>) <span style="color:#a6e22e">NOT</span> <span style="color:#a6e22e">NULL</span>,
<span style="color:#e6db74">`create_time`</span> <span style="color:#a6e22e">datetime</span>,
<span style="color:#e6db74">`update_time`</span> <span style="color:#a6e22e">datetime</span> <span style="color:#a6e22e">DEFAULT</span> <span style="color:#a6e22e">NULL</span> <span style="color:#a6e22e">ON</span> <span style="color:#a6e22e">UPDATE</span> <span style="color:#a6e22e">CURRENT_TIMESTAMP</span>,
<span style="color:#a6e22e">PRIMARY</span> <span style="color:#a6e22e">KEY</span> <span style="color:#e6db74">`pk_id`</span>(<span style="color:#e6db74">`id`</span>),
<span style="color:#a6e22e">UNIQUE</span> <span style="color:#a6e22e">KEY</span> <span style="color:#e6db74">`uk_username`</span>(<span style="color:#e6db74">`username`</span>)
)
<span style="color:#a6e22e">ENGINE</span><span style="color:#f92672">=</span><span style="color:#a6e22e">InnoDB</span> <span style="color:#a6e22e">AUTO_INCREMENT</span><span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> <span style="color:#a6e22e">DEFAULT</span> <span style="color:#a6e22e">CHARSET</span><span style="color:#f92672">=</span><span style="color:#a6e22e">utf8</span>;
</code></pre></div><ul>
<li>在manager 处加盐</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"> <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> UserInfo <span style="color:#a6e22e">register</span><span style="color:#f92672">(</span>String username<span style="color:#f92672">,</span> String password<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        val userInfo  <span style="color:#f92672">=</span> userInfoDao<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserInfoByUsername</span><span style="color:#f92672">(</span>username<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>userInfo <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">){</span>
            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> InvalidParameterException<span style="color:#f92672">(</span>String<span style="color:#f92672">.</span><span style="color:#a6e22e">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;The user %s was registered.&#34;</span><span style="color:#f92672">));</span>
        <span style="color:#f92672">}</span>

        <span style="color:#75715e">// Set random salt
</span><span style="color:#75715e"></span>        String salt <span style="color:#f92672">=</span> UUID<span style="color:#f92672">.</span><span style="color:#a6e22e">randomUUID</span><span style="color:#f92672">().</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">();</span>
        String encryptedPassword <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Sha256Hash<span style="color:#f92672">(</span>password<span style="color:#f92672">,</span>salt<span style="color:#f92672">,</span> HASH_ITERATIONS<span style="color:#f92672">).</span><span style="color:#a6e22e">toBase64</span><span style="color:#f92672">();</span>
        val newUserInfo <span style="color:#f92672">=</span> com<span style="color:#f92672">.</span><span style="color:#a6e22e">procarihana</span><span style="color:#f92672">.</span><span style="color:#a6e22e">accounting</span><span style="color:#f92672">.</span><span style="color:#a6e22e">moudle</span><span style="color:#f92672">.</span><span style="color:#a6e22e">presistence</span><span style="color:#f92672">.</span><span style="color:#a6e22e">UserInfo</span><span style="color:#f92672">.</span><span style="color:#a6e22e">builder</span><span style="color:#f92672">()</span>
            <span style="color:#f92672">.</span><span style="color:#a6e22e">username</span><span style="color:#f92672">(</span>username<span style="color:#f92672">)</span>
            <span style="color:#f92672">.</span><span style="color:#a6e22e">password</span><span style="color:#f92672">(</span>encryptedPassword<span style="color:#f92672">)</span>
            <span style="color:#f92672">.</span><span style="color:#a6e22e">salt</span><span style="color:#f92672">(</span>salt<span style="color:#f92672">)</span>
            <span style="color:#f92672">.</span><span style="color:#a6e22e">createTime</span><span style="color:#f92672">(</span>LocalDateTime<span style="color:#f92672">.</span><span style="color:#a6e22e">now</span><span style="color:#f92672">())</span>
            <span style="color:#f92672">.</span><span style="color:#a6e22e">updateTime</span><span style="color:#f92672">(</span>LocalDateTime<span style="color:#f92672">.</span><span style="color:#a6e22e">now</span><span style="color:#f92672">())</span>
            <span style="color:#f92672">.</span><span style="color:#a6e22e">build</span><span style="color:#f92672">();</span>
        userInfoDao<span style="color:#f92672">.</span><span style="color:#a6e22e">createNewUser</span><span style="color:#f92672">(</span>newUserInfo<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">return</span> userInfoPresToComConverter<span style="color:#f92672">.</span><span style="color:#a6e22e">convert</span><span style="color:#f92672">(</span>newUserInfo<span style="color:#f92672">);</span>

    <span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>用户认证的时候需要带上<code>salt</code>来进行密码的认证，所以要在<code>UserReaml</code>处认证的时候后也要带上<code>salt</code></li>
<li>
<ul>
<li>在<code>AuthenticationInfo</code>进行认证的时候后，需要<code>salt</code>的参数为BySource 。String -&gt; ByteSouce ==&gt; ByteSource.Uyil.bytes(stirng)完成,要注意引用的类。</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">import</span> org.apache.shiro.util.ByteSource<span style="color:#f92672">;</span>

 <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">protected</span> AuthenticationInfo <span style="color:#a6e22e">doGetAuthenticationInfo</span><span style="color:#f92672">(</span>AuthenticationToken token<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> AuthenticationException <span style="color:#f92672">{</span>
        String username <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>String<span style="color:#f92672">)</span> token<span style="color:#f92672">.</span><span style="color:#a6e22e">getPrincipal</span><span style="color:#f92672">();</span> <span style="color:#75715e">//主项
</span><span style="color:#75715e"></span>        String password <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> String<span style="color:#f92672">((</span><span style="color:#66d9ef">char</span><span style="color:#f92672">[])</span> token<span style="color:#f92672">.</span><span style="color:#a6e22e">getCredentials</span><span style="color:#f92672">());</span> <span style="color:#75715e">//凭证
</span><span style="color:#75715e"></span>        val userInfo <span style="color:#f92672">=</span> userInfoManager<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserInfoByUsername</span><span style="color:#f92672">(</span>username<span style="color:#f92672">);</span>
        val salt <span style="color:#f92672">=</span> ByteSource<span style="color:#f92672">.</span><span style="color:#a6e22e">Util</span><span style="color:#f92672">.</span><span style="color:#a6e22e">bytes</span><span style="color:#f92672">(</span>userInfo<span style="color:#f92672">.</span><span style="color:#a6e22e">getSalt</span><span style="color:#f92672">());</span>
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> SimpleAuthenticationInfo<span style="color:#f92672">(</span>userInfo<span style="color:#f92672">.</span><span style="color:#a6e22e">getUsername</span><span style="color:#f92672">(),</span> userInfo<span style="color:#f92672">.</span><span style="color:#a6e22e">getPassword</span><span style="color:#f92672">(),</span> salt<span style="color:#f92672">,</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getName</span><span style="color:#f92672">());</span> <span style="color:#75715e">//认证
</span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
</code></pre></div><h2 id="tag">Tag</h2>
<ul>
<li>table</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">create table <span style="color:#960050;background-color:#1e0010">`</span>accounting_tag<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#f92672">(</span>
   <span style="color:#960050;background-color:#1e0010">`</span>id<span style="color:#960050;background-color:#1e0010">`</span>          bigint<span style="color:#f92672">(</span>20<span style="color:#f92672">)</span> unsigned NOT NULL AUTO_INCREMENT<span style="color:#f92672">,</span>
    <span style="color:#960050;background-color:#1e0010">`</span>description<span style="color:#960050;background-color:#1e0010">`</span> varchar<span style="color:#f92672">(</span>50<span style="color:#f92672">)</span>         NOT NULL<span style="color:#f92672">,</span>
    <span style="color:#960050;background-color:#1e0010">`</span>user_id<span style="color:#960050;background-color:#1e0010">`</span>     bigint<span style="color:#f92672">(</span>20<span style="color:#f92672">)</span> unsigned NOT NULL<span style="color:#f92672">,</span>
    <span style="color:#960050;background-color:#1e0010">`</span>status<span style="color:#960050;background-color:#1e0010">`</span>      tinyint<span style="color:#f92672">(</span>1<span style="color:#f92672">)</span> unsigned NOT NULL COMMENT <span style="color:#960050;background-color:#1e0010">&#39;</span>0<span style="color:#f92672">-&gt;</span> disabled<span style="color:#f92672">,</span> 1<span style="color:#f92672">-&gt;</span> enabled<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">,</span>
    <span style="color:#960050;background-color:#1e0010">`</span>create_time<span style="color:#960050;background-color:#1e0010">`</span> datetime NOT NULL DEFAULT CURRENT_TIMESTAMP<span style="color:#f92672">,</span>
    <span style="color:#960050;background-color:#1e0010">`</span>update_time<span style="color:#960050;background-color:#1e0010">`</span> datetime DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP<span style="color:#f92672">,</span>
    PRIMARY KEY <span style="color:#960050;background-color:#1e0010">`</span>pk_id<span style="color:#960050;background-color:#1e0010">`</span> <span style="color:#f92672">(</span><span style="color:#960050;background-color:#1e0010">`</span>id<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#f92672">),</span>
    KEY <span style="color:#960050;background-color:#1e0010">`</span>idx_uid<span style="color:#960050;background-color:#1e0010">`</span> <span style="color:#f92672">(</span><span style="color:#960050;background-color:#1e0010">`</span>user_id<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#f92672">),</span>
    FOREIGN <span style="color:#a6e22e">KEY</span> <span style="color:#f92672">(</span><span style="color:#960050;background-color:#1e0010">`</span>user_id<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#f92672">)</span> REFERENCES <span style="color:#a6e22e">hcas_userinfo</span> <span style="color:#f92672">(</span><span style="color:#960050;background-color:#1e0010">`</span>id<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#f92672">)</span>
<span style="color:#f92672">)</span>
ENGINE<span style="color:#f92672">=</span>InnoDB AUTO_INCREMENT<span style="color:#f92672">=</span>1 DEFAULT CHARSET<span style="color:#f92672">=</span>utf8<span style="color:#f92672">;</span>
</code></pre></div><ul>
<li>
<ul>
<li>foreigen key 是其他表属性的映射</li>
</ul>
</li>
<li>
<ul>
<li>status用0和1表示的话用<code>tinyint（1)</code></li>
</ul>
</li>
</ul>
<h2 id="record">Record</h2>
<ul>
<li>table</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">create table <span style="color:#960050;background-color:#1e0010">`</span>accounting_record<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#f92672">(</span>
<span style="color:#960050;background-color:#1e0010">`</span>id<span style="color:#960050;background-color:#1e0010">`</span> bigint<span style="color:#f92672">(</span>20<span style="color:#f92672">)</span> unsigned NOT NULL AUTO_INCREMENT<span style="color:#f92672">,</span> 
<span style="color:#960050;background-color:#1e0010">`</span>amount<span style="color:#960050;background-color:#1e0010">`</span> decimal<span style="color:#f92672">(</span>18<span style="color:#f92672">,</span>2<span style="color:#f92672">)</span> NOT NULL DEFAULT<span style="color:#960050;background-color:#1e0010">&#39;</span>0<span style="color:#f92672">.</span><span style="color:#a6e22e">00</span><span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">,</span> 
<span style="color:#960050;background-color:#1e0010">`</span>note<span style="color:#960050;background-color:#1e0010">`</span> varchar<span style="color:#f92672">(</span>200<span style="color:#f92672">)</span> DEFAULT NULL<span style="color:#f92672">,</span> 
<span style="color:#960050;background-color:#1e0010">`</span>category<span style="color:#960050;background-color:#1e0010">`</span> tinyint<span style="color:#f92672">(</span>1<span style="color:#f92672">)</span> unsigned NOT NULL COMMENT<span style="color:#960050;background-color:#1e0010">&#39;</span>0<span style="color:#f92672">-&gt;</span> outcome<span style="color:#f92672">,</span> 1<span style="color:#f92672">-&gt;</span> income<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">,</span> 
<span style="color:#960050;background-color:#1e0010">`</span>status<span style="color:#960050;background-color:#1e0010">`</span> tinyint<span style="color:#f92672">(</span>1<span style="color:#f92672">)</span> unsigned NOT NULL COMMENT<span style="color:#960050;background-color:#1e0010">&#39;</span>0<span style="color:#f92672">-&gt;</span> disable<span style="color:#f92672">,</span> 1<span style="color:#f92672">-&gt;</span> enable<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">,</span> 
<span style="color:#960050;background-color:#1e0010">`</span>create_time<span style="color:#960050;background-color:#1e0010">`</span> datetime NOT NULL DEFAULT CURRENT_TIMESTAMP<span style="color:#f92672">,</span> 
<span style="color:#960050;background-color:#1e0010">`</span>update_time<span style="color:#960050;background-color:#1e0010">`</span> datetime DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP<span style="color:#f92672">,</span> 
<span style="color:#960050;background-color:#1e0010">`</span>user_id<span style="color:#960050;background-color:#1e0010">`</span> bigint<span style="color:#f92672">(</span>20<span style="color:#f92672">)</span> unsigned NOT NULL<span style="color:#f92672">,</span>
PRIMARY KEY <span style="color:#960050;background-color:#1e0010">`</span>pk_id<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#f92672">(</span><span style="color:#960050;background-color:#1e0010">`</span>id<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#f92672">),</span> 
KEY <span style="color:#960050;background-color:#1e0010">`</span>user_key<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#f92672">(</span><span style="color:#960050;background-color:#1e0010">`</span>user_id<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#f92672">),</span> 
FOREIGN <span style="color:#a6e22e">KEY</span> <span style="color:#f92672">(</span><span style="color:#960050;background-color:#1e0010">`</span>user_id<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#f92672">)</span> REFERENCES <span style="color:#a6e22e">accounting_userinfo</span><span style="color:#f92672">(</span><span style="color:#960050;background-color:#1e0010">`</span>id<span style="color:#960050;background-color:#1e0010">`</span><span style="color:#f92672">)</span>
<span style="color:#f92672">)</span> ENGINE<span style="color:#f92672">=</span>InnoDB AUTO_INCREMENT<span style="color:#f92672">=</span>1 DEFAULT CHARSET<span style="color:#f92672">=</span>utf8<span style="color:#f92672">;</span> 
</code></pre></div><h2 id="dao">DAO</h2>
<ul>
<li><code>@Repository</code>来表示数据库，用于封装存储的</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">import</span> org.springframework.stereotype.Repository<span style="color:#f92672">;</span>

<span style="color:#a6e22e">@Repository</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserInfoDaoImpl</span> <span style="color:#66d9ef">implements</span> UserInfoDao<span style="color:#f92672">{</span>
    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> UserInfo <span style="color:#a6e22e">getUserInfoById</span><span style="color:#f92672">(</span>Long id<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>

</code></pre></div><ul>
<li>Dao 使用的是prisistence对象</li>
</ul>
<h2 id="manager">Manager</h2>
<ul>
<li>manager部分使用的是common的对象</li>
<li>manager 需要向数据库转换，也需要向Controller转换，可以直接通过converter完成</li>
</ul>
<h2 id="converter">Converter</h2>
<ul>
<li>通过继承<code>Converter</code>方法来完成类型的转换
Eg</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">package</span> com.Procarihana.AccountingService.converter.presisitenceToCommon<span style="color:#f92672">;</span>

<span style="color:#f92672">import</span> com.Procarihana.AccountingService.Moudle.presistence.UserInfo<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> com.google.common.base.Converter<span style="color:#f92672">;</span>

<span style="color:#f92672">import</span> java.time.LocalDate<span style="color:#f92672">;</span>

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserInfoConverter</span> <span style="color:#66d9ef">extends</span> Converter<span style="color:#f92672">&lt;</span>UserInfo<span style="color:#f92672">,</span> com<span style="color:#f92672">.</span><span style="color:#a6e22e">Procarihana</span><span style="color:#f92672">.</span><span style="color:#a6e22e">AccountingService</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Moudle</span><span style="color:#f92672">.</span><span style="color:#a6e22e">common</span><span style="color:#f92672">.</span><span style="color:#a6e22e">UserInfo</span><span style="color:#f92672">&gt;</span> <span style="color:#f92672">{</span>
    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">protected</span> com<span style="color:#f92672">.</span><span style="color:#a6e22e">Procarihana</span><span style="color:#f92672">.</span><span style="color:#a6e22e">AccountingService</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Moudle</span><span style="color:#f92672">.</span><span style="color:#a6e22e">common</span><span style="color:#f92672">.</span><span style="color:#a6e22e">UserInfo</span> <span style="color:#a6e22e">doForward</span><span style="color:#f92672">(</span>UserInfo userInfo<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> com<span style="color:#f92672">.</span><span style="color:#a6e22e">Procarihana</span><span style="color:#f92672">.</span><span style="color:#a6e22e">AccountingService</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Moudle</span><span style="color:#f92672">.</span><span style="color:#a6e22e">common</span><span style="color:#f92672">.</span><span style="color:#a6e22e">UserInfo</span><span style="color:#f92672">.</span><span style="color:#a6e22e">builder</span><span style="color:#f92672">()</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">username</span><span style="color:#f92672">(</span>userInfo<span style="color:#f92672">.</span><span style="color:#a6e22e">getUsername</span><span style="color:#f92672">())</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">password</span><span style="color:#f92672">(</span>userInfo<span style="color:#f92672">.</span><span style="color:#a6e22e">getPassword</span><span style="color:#f92672">())</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">(</span>userInfo<span style="color:#f92672">.</span><span style="color:#a6e22e">getId</span><span style="color:#f92672">())</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">build</span><span style="color:#f92672">();</span>
    <span style="color:#f92672">}</span>

    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">protected</span> UserInfo <span style="color:#a6e22e">doBackward</span><span style="color:#f92672">(</span>com<span style="color:#f92672">.</span><span style="color:#a6e22e">Procarihana</span><span style="color:#f92672">.</span><span style="color:#a6e22e">AccountingService</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Moudle</span><span style="color:#f92672">.</span><span style="color:#a6e22e">common</span><span style="color:#f92672">.</span><span style="color:#a6e22e">UserInfo</span> userInfo<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> UserInfo<span style="color:#f92672">.</span><span style="color:#a6e22e">builder</span><span style="color:#f92672">()</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">createTime</span><span style="color:#f92672">(</span>LocalDate<span style="color:#f92672">.</span><span style="color:#a6e22e">now</span><span style="color:#f92672">())</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">updateTime</span><span style="color:#f92672">(</span>LocalDate<span style="color:#f92672">.</span><span style="color:#a6e22e">now</span><span style="color:#f92672">())</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">(</span>userInfo<span style="color:#f92672">.</span><span style="color:#a6e22e">getId</span><span style="color:#f92672">())</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">password</span><span style="color:#f92672">(</span>userInfo<span style="color:#f92672">.</span><span style="color:#a6e22e">getPassword</span><span style="color:#f92672">())</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">username</span><span style="color:#f92672">(</span>userInfo<span style="color:#f92672">.</span><span style="color:#a6e22e">getUsername</span><span style="color:#f92672">())</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">build</span><span style="color:#f92672">();</span>
    <span style="color:#f92672">}</span>

<span style="color:#f92672">}</span>

</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">package</span> com.Procarihana.AccountingService.Manager<span style="color:#f92672">;</span>

<span style="color:#f92672">import</span> com.Procarihana.AccountingService.Dao.UserInfoDao<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> com.Procarihana.AccountingService.Moudle.common.UserInfo<span style="color:#f92672">;</span>

<span style="color:#f92672">import</span> com.Procarihana.AccountingService.converter.presisitenceToCommon.UserInfoConverter<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> org.springframework.stereotype.Component<span style="color:#f92672">;</span>

<span style="color:#a6e22e">@Component</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserInfoManagerImpl</span> <span style="color:#66d9ef">implements</span> UserInfoManager <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> UserInfoDao userInfoDao<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> UserInfoConverter userInfoConverter<span style="color:#f92672">;</span>
    <span style="color:#a6e22e">@Autowired</span>
    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">UserInfoManagerImpl</span><span style="color:#f92672">(</span><span style="color:#66d9ef">final</span> UserInfoDao userInfoDao<span style="color:#f92672">,</span>
                               <span style="color:#66d9ef">final</span> UserInfoConverter userInfoConverter<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">userInfoDao</span> <span style="color:#f92672">=</span> userInfoDao<span style="color:#f92672">;</span>
        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">userInfoConverter</span> <span style="color:#f92672">=</span> userInfoConverter<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> UserInfo <span style="color:#a6e22e">getUserInfoByUserID</span><span style="color:#f92672">(</span>Long userId<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        com<span style="color:#f92672">.</span><span style="color:#a6e22e">Procarihana</span><span style="color:#f92672">.</span><span style="color:#a6e22e">AccountingService</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Moudle</span><span style="color:#f92672">.</span><span style="color:#a6e22e">presistence</span><span style="color:#f92672">.</span><span style="color:#a6e22e">UserInfo</span> userInfo <span style="color:#f92672">=</span> userInfoDao<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserInfoById</span><span style="color:#f92672">(</span>userId<span style="color:#f92672">);</span>
        UserInfo commonUserInfo <span style="color:#f92672">=</span> userInfoConverter<span style="color:#f92672">.</span><span style="color:#a6e22e">convert</span><span style="color:#f92672">(</span>userInfo<span style="color:#f92672">);</span>  
        <span style="color:#66d9ef">return</span> userInfoConverter<span style="color:#f92672">.</span><span style="color:#a6e22e">convert</span><span style="color:#f92672">(</span>userInfo<span style="color:#f92672">);</span>


    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#75715e">//翻转
</span><span style="color:#75715e"></span>    com<span style="color:#f92672">.</span><span style="color:#a6e22e">Procarihana</span><span style="color:#f92672">.</span><span style="color:#a6e22e">AccountingService</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Moudle</span><span style="color:#f92672">.</span><span style="color:#a6e22e">presistence</span><span style="color:#f92672">.</span><span style="color:#a6e22e">UserInfo</span> userInfo1 <span style="color:#f92672">=</span> userInfoConverter<span style="color:#f92672">.</span><span style="color:#a6e22e">reverse</span><span style="color:#f92672">().</span><span style="color:#a6e22e">convert</span><span style="color:#f92672">(</span>commonUserInfo<span style="color:#f92672">);</span> 
</code></pre></div><ul>
<li>
<ul>
<li>doBaceWard 的时候，需要根据实际情况选择是否能够转换，转换的内容为空的时候应该如何处理等</li>
</ul>
</li>
<li>转换不能调用Service、io等操作</li>
</ul>
<h2 id="mark-little-point">Mark Little Point</h2>
<ol>
<li><code>%s</code>&ndash;&gt; 字符串类型</li>
<li>LocalDatetime vs Instant</li>
</ol>
<ul>
<li>LocalDateTime对于用户来说，可能就只是一个简单的日期和时间的概念，考虑如下的例子：两个人都在2013年7月2日11点出生，第一个人是在英国出生，而第二个是在加尼福利亚，如果我们问他们是在什么时候出生的话，则他们看上去都是 在同样的时间出生（就是LocalDateTime所表达的），
但如果我们根据时间线（如格林威治时间线）去仔细考察，则会发现在出生的人会比在英国出生的人稍微晚几个小时（这就是Instant所表达的概念，并且要将其转换为UTC格式的时间）。</li>
</ul>
<ol start="3">
<li>添加<code>projectlombok maven</code>加上注解能够自动进行对象的getter和setter,builder模式等等</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">        <span style="color:#f92672">&lt;</span>dependency<span style="color:#f92672">&gt;</span>
            <span style="color:#f92672">&lt;</span>groupId<span style="color:#f92672">&gt;</span>org<span style="color:#f92672">.</span><span style="color:#a6e22e">projectlombok</span><span style="color:#f92672">&lt;/</span>groupId<span style="color:#f92672">&gt;</span>
            <span style="color:#f92672">&lt;</span>artifactId<span style="color:#f92672">&gt;</span>lombok<span style="color:#f92672">&lt;/</span>artifactId<span style="color:#f92672">&gt;</span>
            <span style="color:#f92672">&lt;</span>version<span style="color:#f92672">&gt;</span>1<span style="color:#f92672">.</span><span style="color:#a6e22e">18</span><span style="color:#f92672">.</span><span style="color:#a6e22e">12</span><span style="color:#f92672">&lt;/</span>version<span style="color:#f92672">&gt;</span>
            <span style="color:#f92672">&lt;</span>scope<span style="color:#f92672">&gt;</span>provided<span style="color:#f92672">&lt;/</span>scope<span style="color:#f92672">&gt;</span>
        <span style="color:#f92672">&lt;/</span>dependency<span style="color:#f92672">&gt;</span>

</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">package</span> com.Procarihana.AccountingService.Moudle.presistence<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> lombok.Builder<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> lombok.Data<span style="color:#f92672">;</span>

<span style="color:#a6e22e">@Data</span>
<span style="color:#a6e22e">@Builder</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserInformation</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">private</span> Long id<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> String username<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> String password<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> LocalDate createTime<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> LocalDate  updateTime<span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li><code>val</code> 能够自动识别对象的类型 (需要在IDE下载Lombok的plugin，并且把设置都选上才能正常使用)</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">        com<span style="color:#f92672">.</span><span style="color:#a6e22e">Procarihana</span><span style="color:#f92672">.</span><span style="color:#a6e22e">AccountingService</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Moudle</span><span style="color:#f92672">.</span><span style="color:#a6e22e">common</span><span style="color:#f92672">.</span><span style="color:#a6e22e">UserInfo</span> userInfo <span style="color:#f92672">=</span> userInfoManager<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserInfoByUserID</span><span style="color:#f92672">(</span>userId<span style="color:#f92672">);</span>
        <span style="color:#f92672">==&gt;</span>
        val userInfo <span style="color:#f92672">=</span> userInfoManager<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserInfoByUserID</span><span style="color:#f92672">(</span>userId<span style="color:#f92672">);</span>

val userInfo <span style="color:#f92672">==&gt;</span>  com<span style="color:#f92672">.</span><span style="color:#a6e22e">Procarihana</span><span style="color:#f92672">.</span><span style="color:#a6e22e">AccountingService</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Moudle</span><span style="color:#f92672">.</span><span style="color:#a6e22e">common</span><span style="color:#f92672">.</span><span style="color:#a6e22e">UserInfo</span> userInfo <span style="color:#f92672">=</span> userInfoManager<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserInfoByUserID</span><span style="color:#f92672">(</span>userId<span style="color:#f92672">);</span>
 userInfo
</code></pre></div><ul>
<li><code>@Slf4j</code></li>
</ul>
<pre><code>import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
public class UserController {
log.info(&quot;Get user info by user id {}&quot;,userId);
}
</code></pre><ul>
<li><code>@NoArgsConstructor``@AllArgsConstructor</code>设置构造器无参数或者全参数，</li>
</ul>
<ol start="4">
<li><code>@RestController</code>  Vs <code>@Controller</code></li>
</ol>
<ul>
<li>@RestController注解相当于@ResponseBody ＋ @Controller合在一起的作用。
RestController使用的效果是将方法返回的对象直接在浏览器上展示成json格式，而如果单单使用@Controller会报错，需要ResponseBody配合使用。</li>
<li>如果只是使用@RestController注解Controller类，则方法无法返回jsp页面，配置的视图解析器InternalResourceViewResolver不起作用，返回的内容就是Return 里的内容。
例如：本来应该到success.jsp页面的，则其显示success.</li>
<li>如果需要返回到指定页面，则需要用 @Controller配合视图解析器InternalResourceViewResolver才行。</li>
<li>如果需要返回JSON，XML或自定义mediaType内容到页面，则需要在对应的方法上加上@ResponseBody注解。</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Controller</span>  
<span style="color:#a6e22e">@ResponseBody</span>  
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyController</span> <span style="color:#f92672">{</span>

 <span style="color:#f92672">}</span>  

或者在方法上加<span style="color:#a6e22e">@ResponseBody</span>  
<span style="color:#a6e22e">@Controller</span>  
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyController</span> <span style="color:#f92672">{</span>

    <span style="color:#a6e22e">@ResponseBody</span>
    <span style="color:#a6e22e">@RequestMapping</span><span style="color:#f92672">(</span>value <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/sutdent&#34;</span><span style="color:#f92672">,</span> method <span style="color:#f92672">=</span> RequestMethod<span style="color:#f92672">.</span><span style="color:#a6e22e">GET</span><span style="color:#f92672">)</span>
    <span style="color:#66d9ef">public</span> Student <span style="color:#a6e22e">uploadFile</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    
    <span style="color:#f92672">}</span>
 <span style="color:#f92672">}</span>  
  
<span style="color:#a6e22e">@RestController</span>  
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyRestController</span> <span style="color:#f92672">{</span> <span style="color:#f92672">}</span>  
</code></pre></div><p>链接：https://www.jianshu.com/p/</p>
<ol start="5">
<li>Guava</li>
</ol>
<ul>
<li>Converter</li>
</ul>
<ol start="6">
<li>解决同名不同包的区分
通过<code>@Qualifier</code>注解来提醒？？？？？？？？？？？？？</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">import</span> org.springframework.beans.factory.annotation.Qualifier<span style="color:#f92672">;</span>

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserInfoManagerImpl</span> <span style="color:#66d9ef">implements</span> UserInfoManager <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> UserInfoDao userInfoDao<span style="color:#f92672">;</span>

    <span style="color:#a6e22e">@Autowired</span>
    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">UserInfoManagerImpl</span><span style="color:#f92672">(</span><span style="color:#a6e22e">@Qualifier</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;UserInfoMysqlDao&#34;</span><span style="color:#f92672">)</span> UserInfoDao userInfoDao<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">userInfoDao</span> <span style="color:#f92672">=</span> userInfoDao<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

</code></pre></div><ol start="6">
<li>整个项目的框架是SpringBoot框架搭建的，而Mapper这个类是用Mybatis-SpringBoot-start构建起来的，所以<code>@Autowired</code>不一定能够识别出来，mapper实例可能会出现没有Bean的情况，虽然这种情况下可以编译动过，运行也没有问题，但是还是会报错。</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Repository</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserInfoDaoImpl</span> <span style="color:#66d9ef">implements</span> UserInfoDao<span style="color:#f92672">{</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> UserInfoMapper userInfoMapper<span style="color:#f92672">;</span>

    <span style="color:#a6e22e">@Autowired</span>
    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">UserInfoDaoImpl</span><span style="color:#f92672">(</span>UserInfoMapper userInfoMapper<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">userInfoMapper</span> <span style="color:#f92672">=</span> userInfoMapper<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>==&gt;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">import</span> lombok.RequiredArgsConstructor<span style="color:#f92672">;</span>

<span style="color:#a6e22e">@Repository</span>
<span style="color:#a6e22e">@RequiredArgsConstructor</span><span style="color:#f92672">(</span>onConstructor <span style="color:#f92672">=</span> <span style="color:#a6e22e">@__</span><span style="color:#f92672">(</span><span style="color:#a6e22e">@Autowired</span><span style="color:#f92672">))</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserInfoDaoImpl</span> <span style="color:#66d9ef">implements</span> UserInfoDao<span style="color:#f92672">{</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> UserInfoMapper userInfoMapper<span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
</code></pre></div><ol start="7">
<li><code>Optional</code></li>
<li><code>enum</code></li>
<li><code>@ExtendWith </code>is a repeatable annotation that is used to register extensions for the annotated test class or test method.</li>
</ol>
<ul>
<li>是一个可重复的注释，用于为已注释的测试类或测试方法注册扩展。</li>
<li>
<ul>
<li>在Mockito 添加后就可以不用添加<code>MockitoAnnotionals </code>, 可以自动生成一个测试对象，不需要额外new出来</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserInfoDaoTest</span> <span style="color:#f92672">{</span>
    <span style="color:#a6e22e">@Mock</span>
    <span style="color:#66d9ef">private</span> UserInfoMapper userInfoMapper<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> UserInfoDao userInfoDao<span style="color:#f92672">;</span>

   <span style="color:#a6e22e">@BeforeEach</span>
   <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setup</span><span style="color:#f92672">(){</span>
       MockitoAnnotations<span style="color:#f92672">.</span><span style="color:#a6e22e">initMocks</span><span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">);</span>
       userInfoDao <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> UserInfoDaoImpl<span style="color:#f92672">(</span>userInfoMapper<span style="color:#f92672">);</span>
   <span style="color:#f92672">}</span>
</code></pre></div><p>==&gt;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@ExtendWith</span><span style="color:#f92672">(</span>MockitoExtension<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">)</span>
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserInfoDaoTest</span> <span style="color:#f92672">{</span>
    <span style="color:#a6e22e">@Mock</span>
    <span style="color:#66d9ef">private</span> UserInfoMapper userInfoMapper<span style="color:#f92672">;</span>
    <span style="color:#a6e22e">@InjectMocks</span>
    <span style="color:#66d9ef">private</span> UserInfoDaoImpl userInfoDao<span style="color:#f92672">;</span>
</code></pre></div><ol start="10">
<li>@标签应有非空说明。&ndash;&gt; <code>&lt;b&gt;must not&lt;/b&gt; be null</code></li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"> <span style="color:#f92672">*</span> <span style="color:#a6e22e">@param</span> userInfoCToSeConverter <span style="color:#f92672">;</span> <span style="color:#f92672">&lt;</span>b<span style="color:#f92672">&gt;</span>must not<span style="color:#f92672">&lt;/</span>b<span style="color:#f92672">&gt;</span> be <span style="color:#66d9ef">null</span>
</code></pre></div><ol start="11">
<li>SpringIoc（控制翻转）和DI（依赖注入）</li>
</ol>
<ul>
<li><a href="https://www.cnblogs.com/xdp-gacl/p/4249939.html">https://www.cnblogs.com/xdp-gacl/p/4249939.html</a></li>
</ul>
<ol start="12">
<li>SQL 和 NoSQL</li>
</ol>
<ul>
<li>是否需要支持Transaction：NOSQL Transaction支持有限，实现麻烦</li>
<li>是否会有丰富的QueryBuilder</li>
<li>对TPS 要求是否高？是否需要很好的可拓展性</li>
<li>花式查询（Query Builder）：根据多种条件进行同时的查询，SQL就能够很好地支持（Eg：根据多个tag查询数据）</li>
<li>TBS:可拓展性 Nosql比Mysql要强</li>
<li>
<ul>
<li>Mysql ：通过读和写请求分开处理的负载分库分库分表查询的时候后就难以查询通过负载均衡的请求，使得TBS比较低</li>
</ul>
</li>
<li>
<ul>
<li>Nosql 对强一致性不友好，update后不一定能马上改，而修改的时间也不可预测</li>
</ul>
</li>
</ul>
<h2 id="业务框架">业务框架</h2>
<ul>
<li>服务的边界，核心。罗列出所有的功能，然后选出核心功能MVP。</li>
<li>
<ul>
<li>UserManager、RecordManager、TagManager</li>
</ul>
</li>
<li>
<ul>
<li>微服务架构会通过Service来构建逻辑，而组建则会通过Manager完成</li>
</ul>
</li>
<li>完成记账业务</li>
</ul>
<ol>
<li>只用一个record表完成记账。用户删除数据的时候会改变数据的status，并不会真正地删除，会出现用户检索到已经删除的数据但是不能查看的情况。每一次更新都需要把tags全部更新，检索顺序可能会出现问题。</li>
<li>用record 和tags 完成记录。</li>
</ol>
<ul>
<li>
<ul>
<li>record 包含 recordid、userid、支出收入（amount）、备注等</li>
</ul>
</li>
<li>
<ul>
<li>tags 包含tagid、userid、recordid、tag描述</li>
</ul>
</li>
<li>
<ul>
<li>record 会对应多个tag，就会出现一个record被多个tag多次储存的情况，导致数据冗余</li>
</ul>
</li>
</ul>
<ol start="3">
<li>使用三个表完成（通过中间表完成）。record、record-tag-mapping、tags</li>
</ol>
<ul>
<li>
<ul>
<li>record 和tags 分别储存各自的信息，在map里面储存record对应的各个tag。</li>
</ul>
</li>
<li>测试</li>
<li>
<ul>
<li>单元测试</li>
</ul>
</li>
<li>
<ul>
<li>集成测试</li>
</ul>
</li>
<li>
<ul>
<li>性能测试</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>在controller 里 把传入的数据都要过滤，减少非法数据进入数据库查询</li>
</ul>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"> <span style="color:#a6e22e">@PutMapping</span><span style="color:#f92672">(</span>path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/{id}&#34;</span><span style="color:#f92672">,</span> consumes <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;application/json&#34;</span><span style="color:#f92672">,</span> produces <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;application/json&#34;</span><span style="color:#f92672">)</span>
    <span style="color:#66d9ef">public</span> Tag <span style="color:#a6e22e">updateTag</span><span style="color:#f92672">(</span><span style="color:#a6e22e">@PathVariable</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;id&#34;</span><span style="color:#f92672">)</span> Long tagId<span style="color:#f92672">,</span> <span style="color:#a6e22e">@RequestBody</span> Tag tag<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        String status <span style="color:#f92672">=</span> tag<span style="color:#f92672">.</span><span style="color:#a6e22e">getStatus</span><span style="color:#f92672">();</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>status <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#e6db74">&#34;ENABLE&#34;</span><span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span>status<span style="color:#f92672">)</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#e6db74">&#34;DISABLE&#34;</span><span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span>status<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> InvalidParameterException<span style="color:#f92672">(</span>String<span style="color:#f92672">.</span><span style="color:#a6e22e">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;The status [%s] to update is invalid status&#34;</span><span style="color:#f92672">,</span> status<span style="color:#f92672">));</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>tag<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserId</span><span style="color:#f92672">()</span> <span style="color:#f92672">==</span><span style="color:#66d9ef">null</span> <span style="color:#f92672">||</span> tag<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserId</span><span style="color:#f92672">()</span> <span style="color:#f92672">&lt;=</span> 0L<span style="color:#f92672">){</span>
            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> InvalidParameterException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;The user id is empty or invalid&#34;</span><span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>tagId <span style="color:#f92672">==</span><span style="color:#66d9ef">null</span> <span style="color:#f92672">||</span> tagId <span style="color:#f92672">&lt;=</span> 0L<span style="color:#f92672">){</span>
            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> InvalidParameterException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;The tag id is empty or invalid&#34;</span><span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span>
        userInfoManager<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserInfoByUserID</span><span style="color:#f92672">(</span>tag<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserId</span><span style="color:#f92672">());</span>
        tag<span style="color:#f92672">.</span><span style="color:#a6e22e">setId</span><span style="color:#f92672">(</span>tagId<span style="color:#f92672">);</span>

        val tagInC <span style="color:#f92672">=</span> tagC2SConverter<span style="color:#f92672">.</span><span style="color:#a6e22e">reverse</span><span style="color:#f92672">().</span><span style="color:#a6e22e">convert</span><span style="color:#f92672">(</span>tag<span style="color:#f92672">);</span>
        val newTag <span style="color:#f92672">=</span> tagManager<span style="color:#f92672">.</span><span style="color:#a6e22e">updateTag</span><span style="color:#f92672">(</span>tagInC<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">return</span> tagC2SConverter<span style="color:#f92672">.</span><span style="color:#a6e22e">convert</span><span style="color:#f92672">(</span>newTag<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>
<ul>
<li>BUD测试</li>
</ul>
</li>
<li>检测报警</li>
<li>
<ul>
<li>系统性能监控</li>
</ul>
</li>
<li>
<ul>
<li>error、latency</li>
</ul>
</li>
<li>
<ul>
<li>业务层面监控</li>
</ul>
</li>
<li>部署与发布</li>
<li>
<ul>
<li>金丝雀发布。逐个服务进行发布，一步步测试是能够成功</li>
</ul>
</li>
</ul>
<h4 id="记账服务模块">记账服务模块</h4>
<ul>
<li>
<p>Record</p>
</li>
<li>
<ul>
<li>记录一笔账单交易 creatNewRecordByRecordId</li>
</ul>
</li>
<li>
<ul>
<li>编辑单条账单记录 updateRecordByRecordId</li>
</ul>
</li>
<li>
<ul>
<li>删除单挑账单记录 deleteRecordByRecordId</li>
</ul>
</li>
<li>
<ul>
<li>查询单挑账单记录 getRecordByRecordlId</li>
</ul>
</li>
<li>
<ul>
<li>按条件查询账单记录（会不会涉及到分页）</li>
</ul>
</li>
<li>
<p>Tag</p>
</li>
<li>
<ul>
<li>列出用户所有标签 listAllTagsByUserId</li>
</ul>
</li>
<li>
<ul>
<li>新增标签 createNewTagForUserId</li>
</ul>
</li>
<li>
<ul>
<li>编辑已有标签 updateTagBytagId</li>
</ul>
</li>
<li>
<ul>
<li>删除已有标签 deleteTagByTagId</li>
</ul>
</li>
<li>
<p>用户用例图 -&gt;UML</p>
</li>
<li>
<ul>
<li>用例：用户能够使用的服务，扩展用例则是实现这些服务的手段，或者是相关的子服务，主要看是什么关系（include、extend）</li>
</ul>
</li>
<li>
<p>分页和流水分页</p>
</li>
<li>
<ul>
<li>pageSize</li>
</ul>
</li>
<li>
<ul>
<li>pageNumber</li>
</ul>
</li>
<li>
<ul>
<li>cursor -&gt; 游标：从第几页开始查看</li>
</ul>
</li>
<li>
<p>贫血模型和充血模型</p>
</li>
<li>
<ul>
<li>充血模型会把相应的接口方法直接放在moudel里，但是一般都会用贫血模型，相应的业务会分开处理和存放</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#75715e">//贫血模型
</span><span style="color:#75715e"></span><span style="color:#66d9ef">public</span> calss <span style="color:#a6e22e">UserInfo</span><span style="color:#f92672">(){</span>
    <span style="color:#66d9ef">private</span> Long userId<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> String username<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> String password<span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">public</span> calss <span style="color:#a6e22e">UserInfo</span><span style="color:#f92672">(){</span>
    <span style="color:#66d9ef">private</span> Long userId<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> String username<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> String password<span style="color:#f92672">;</span>
    
    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">updateUserInfoByUserId</span><span style="color:#f92672">()</span><span style="color:#960050;background-color:#1e0010">；</span>

    UserInfo <span style="color:#a6e22e">getuserInfoByUserId</span><span style="color:#f92672">();</span> 
<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li><code>@Request</code>改善数据库和实例moudle的变量名不同一或者嵌套等情况造成的映射失败、不完全映射的情况</li>
<li>
<ul>
<li><code>@One``@Many</code>一对以一或者一对多。Eg：一个文章里面有多个Tag,就需要<code>@Many</code></li>
</ul>
</li>
<li>converter 转换的时候，status要注意，不能够直接转换，如果status是空的话，就会全都是0，就会全都变成disable</li>
<li><code>@Provider</code> -&gt; 能够提供SQL语句的注解，有<code>@UpdataProvider</code>和<code>@SelectProvider</code>、<code>@InsertProvider</code>,不需要直接写出SQL语句。把SQL语句写到class Provider里面，通过<code>type = provider.class</code>来引用，通过<code>methor=“”</code>来调用class provider 里面的方法</li>
<li>用于动态SQL</li>
<li>
<ul>
<li><code>@Option</code> 里面的resultset为返回字段的属性（一定是SQL返回的字段属性 ）</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Mapper:
<span style="color:#a6e22e">@Options</span><span style="color:#f92672">(</span>resultSets <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;id, description, user_id, status ,create_time, update_time&#34;</span><span style="color:#f92672">)</span>
    <span style="color:#a6e22e">@UpdateProvider</span><span style="color:#f92672">(</span>type <span style="color:#f92672">=</span> TagSqlProvider<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span> method <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;updateTag&#34;</span><span style="color:#f92672">)</span>
    <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">updateTag</span><span style="color:#f92672">(</span>Tag tag<span style="color:#f92672">);</span>

Provider<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">:</span>

<span style="color:#75715e">/**
</span><span style="color:#75715e"> * Update tag item via specific tag.
</span><span style="color:#75715e"> *
</span><span style="color:#75715e"> * @param tag the tag item need to update.
</span><span style="color:#75715e"> * @Return the sql to execute.
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TagSqlProvider</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">updateTag</span><span style="color:#f92672">(</span><span style="color:#66d9ef">final</span> Tag tag<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> SQL<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
            <span style="color:#f92672">{</span>
                UPDATE<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;accounting_tag&#34;</span><span style="color:#f92672">);</span>
                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>tag<span style="color:#f92672">.</span><span style="color:#a6e22e">getDescription</span><span style="color:#f92672">()</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                    SET<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;description = #{description}&#34;</span><span style="color:#f92672">);</span>
                <span style="color:#f92672">}</span>
                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>tag<span style="color:#f92672">.</span><span style="color:#a6e22e">getStatus</span><span style="color:#f92672">()</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                    SET<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;status = #{status}&#34;</span><span style="color:#f92672">);</span>
                <span style="color:#f92672">}</span>
                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>tag<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserId</span><span style="color:#f92672">()</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                    SET<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;user_id = #{userId}&#34;</span><span style="color:#f92672">);</span>
                <span style="color:#f92672">}</span>
                WHERE<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;id = #{id}&#34;</span><span style="color:#f92672">);</span>
            <span style="color:#f92672">}</span>

        <span style="color:#f92672">}.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">();</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>

</code></pre></div><ul>
<li>update</li>
<li>
<ul>
<li>部分更新：从数据库拿出来的数据和更新的数据进行对比，如果更新数据中一些属性为空的话，就要判断属性是否为空，是否和数据库里面对应的属性相等。如果相等则不更新，如果不相等，就把新的数据放入database里面，注意为更新数据里为null的属性不能放入，否则就会出错。</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>对比就的和更新的数据，如果相同就不更新。</li>
</ul>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">RecordSqlProvider</span> <span style="color:#f92672">{</span>
    <span style="color:#75715e">/**
</span><span style="color:#75715e">     * Update record item val specific record.
</span><span style="color:#75715e">     *
</span><span style="color:#75715e">     * @param record the record need to update
</span><span style="color:#75715e">     * @return the sql to execute
</span><span style="color:#75715e">     */</span>
    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">updateRecord</span><span style="color:#f92672">(</span><span style="color:#66d9ef">final</span> Record record<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> SQL<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
            <span style="color:#f92672">{</span>
                UPDATE<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;accounting_record&#34;</span><span style="color:#f92672">);</span>
                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>record<span style="color:#f92672">.</span><span style="color:#a6e22e">getAmount</span><span style="color:#f92672">()</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                    SET<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;amount = #{amount}&#34;</span><span style="color:#f92672">);</span>
                <span style="color:#f92672">}</span>
                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>record<span style="color:#f92672">.</span><span style="color:#a6e22e">getCategory</span><span style="color:#f92672">()</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                    SET<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;category = #{category}&#34;</span><span style="color:#f92672">);</span>
                <span style="color:#f92672">}</span>
                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>record<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserId</span><span style="color:#f92672">()</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                    SET<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;user_id= #{userID}&#34;</span><span style="color:#f92672">);</span>
                <span style="color:#f92672">}</span>
                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>record<span style="color:#f92672">.</span><span style="color:#a6e22e">getNote</span><span style="color:#f92672">()</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                    SET<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;note = #{note}&#34;</span><span style="color:#f92672">);</span>
                <span style="color:#f92672">}</span>
                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>record<span style="color:#f92672">.</span><span style="color:#a6e22e">getStatus</span><span style="color:#f92672">()</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                    SET<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;status = #{status}&#34;</span><span style="color:#f92672">);</span>
                <span style="color:#f92672">}</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">();</span>
    <span style="color:#f92672">}</span>

<span style="color:#f92672">}</span>

</code></pre></div><ul>
<li>
<ul>
<li>全量更新：如果属性少的话可以进行全量更新,只要不是null的都更新。但是全量更新量大，不需要更新的情况下也全部更新，数据库压力就会增大。</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TagSqlProvider</span> <span style="color:#f92672">{</span>
    <span style="color:#75715e">/**
</span><span style="color:#75715e">     * Update tag item via specific tag.
</span><span style="color:#75715e">     *
</span><span style="color:#75715e">     * @param tag the tat item need to update
</span><span style="color:#75715e">     * @return the sql to execute
</span><span style="color:#75715e">     */</span>
    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">updateTag</span><span style="color:#f92672">(</span><span style="color:#66d9ef">final</span> Tag tag<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> SQL<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
            <span style="color:#f92672">{</span>
                UPDATE<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;accounting_tag&#34;</span><span style="color:#f92672">);</span>
                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>tag<span style="color:#f92672">.</span><span style="color:#a6e22e">getDescription</span><span style="color:#f92672">()</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                    SET<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;description = #{description}&#34;</span><span style="color:#f92672">);</span>
                <span style="color:#f92672">}</span>
                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>tag<span style="color:#f92672">.</span><span style="color:#a6e22e">getStatus</span><span style="color:#f92672">()</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                    SET<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;status = #{status}&#34;</span><span style="color:#f92672">);</span>
                <span style="color:#f92672">}</span>
                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>tag<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserId</span><span style="color:#f92672">()</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                    SET<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;user_id = #{userId}&#34;</span><span style="color:#f92672">);</span>
                <span style="color:#f92672">}</span>
                WHERE<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;id = #{id}&#34;</span><span style="color:#f92672">);</span>
            <span style="color:#f92672">}</span>

        <span style="color:#f92672">}.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">();</span>
    <span style="color:#f92672">}</span>
</code></pre></div><h2 id="分页">分页</h2>
<ul>
<li>传统分页：一个页面展现的内容有限制，在底下或者顶部有页码选择其他的页面继续展示内容</li>
<li>Token分页、流水分页、游标分页：不断地可以往下拉。</li>
<li>完成分页就要先解决排序问题。通过<code>ORDER BY</code>进行排序</li>
<li>
<ul>
<li><code>ASC</code>正序<code>SELECT * FROM accounting_tag where user_id = 1 ORDER BY create_time </code></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">id</th>
<th align="center">description</th>
<th align="center">user_id</th>
<th align="center">status</th>
<th align="center">create_time</th>
<th align="center">update_time</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">1</td>
<td align="center">play boy</td>
<td align="center">1</td>
<td align="center">true</td>
<td align="center">2020-08-26 23:02:27.0</td>
<td align="center">2020-08-27 10:37:53.0</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">play with friend</td>
<td align="center">1</td>
<td align="center">true</td>
<td align="center">2020-08-26 23:02:56.0</td>
<td align="center"><!-- raw HTML omitted --></td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">play game</td>
<td align="center">1</td>
<td align="center">true</td>
<td align="center">2020-08-26 23:13:45.0</td>
<td align="center"><!-- raw HTML omitted --></td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">eat</td>
<td align="center">1</td>
<td align="center">true</td>
<td align="center">2020-08-29 00:27:45.0</td>
<td align="center"><!-- raw HTML omitted --></td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">work</td>
<td align="center">1</td>
<td align="center">true</td>
<td align="center">2020-08-29 00:28:03.0</td>
<td align="center"><!-- raw HTML omitted --></td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">study</td>
<td align="center">1</td>
<td align="center">true</td>
<td align="center">2020-08-29 00:28:11.0</td>
<td align="center"><!-- raw HTML omitted --></td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">smoke</td>
<td align="center">1</td>
<td align="center">true</td>
<td align="center">2020-08-29 00:29:05.0</td>
<td align="center"><!-- raw HTML omitted --></td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">cat</td>
<td align="center">1</td>
<td align="center">true</td>
<td align="center">2020-08-29 00:29:22.0</td>
<td align="center"><!-- raw HTML omitted --></td>
</tr>
</tbody>
</table>
<ul>
<li>
<ul>
<li><code>DESC</code>倒序<br>
<code>SELECT * FROM accounting_tag where user_id = 1 ORDER BY create_time DESC</code></li>
</ul>
</li>
<li>
<ul>
<li>排序可以多个条件按先后优先次序进行
<code>SELECT * FROM accounting_record ORDER BY amount DESC , id desc</code></li>
</ul>
</li>
<li>
<p><code>LIMIT</code>进行分页</p>
</li>
<li>
<ul>
<li><code>select id ,description, user_id ,status, create_time, update_time FROM accounting_tag LIMIT 2,3</code> -&gt; 3、4、5</li>
</ul>
</li>
<li>
<ul>
<li><code>LIMIT 5</code> -&gt; 1、2、3、4、5</li>
</ul>
</li>
<li>
<p>分页插件 pagehelper-spring-boot</p>
</li>
<li>
<p>Mybatis pageInfo</p>
</li>
<li>
<ul>
<li>在使用PageInfo的时候 <code>pageNum</code>、<code>pageSize</code>等需要用到的变量一定要和文档里面的名字相同，否则就不会执行分页等方法！！！</li>
</ul>
</li>
</ul>
<h2 id="事物">事物</h2>
<ul>
<li>原子性：事物内的业务全部完成才算成功，有一步失败都会回滚到最初。</li>
<li>一致性：满足数据库完整性的约束，就是建表的时候数据的类型约束、数据范围等，都会满足。</li>
<li>隔离性：写的内容没有提交前，其他读的对象是只能够执行没有改变前的数据内容，只有写的内容提交后才能够读到变更后的内容。</li>
<li>持久性：事物一旦提交，就会永久保存到数据库里面，即使系统发生故障，数据库也能够将数据恢复。</li>
<li>read-commited 云服务器一般都会用这个，因为隔离级别比较高</li>
<li>Console <code>begin</code>并不是开始，只有执行语句才是真正的开始</li>
<li>脏读： 没有commit 的数据被 另一个console 读取到了</li>
<li>读提交（READ COMMITTED）只能看到提交的事物，但是不可重复度，因为执行多次的查询可能会得到不同的结果（因为多次查询中间如果其他事务进行了commit，查询的结果就会出现不同）</li>
<li>可重复读：在同一个事务中，多次进行查询的到的结果也是一样的，即使在多次读取的中间有其他事务进行了commit，读取的结果也不会因为其他的commit而改变。</li>
</ul>
<blockquote>
<ul>
<li>但是可能会出现幻读：在其他事务已经插入了某个ID的数据且commit，在可重复读的事务里不能够查询到这个数据，还能够用同样的ID进行数据的插入和查询，没有出现主键冲突的现象，commit后查询能够看到同一个ID插入了两条不一样的数据</li>
<li>
<ul>
<li>但是在musql 8 后就禁用了，一般都不会出现</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li>可串行化（SERIAIZABLE）：事务查询数据时，如果其他事务在进行数据的变更时候没有commit，就必须等待直到其他事务commit后才能够查询出数据结果，否则会一直等待到超时</li>
</ul>
<h2 id="问题">问题</h2>
<p>1.关于<code>Converter</code></p>
<ul>
<li>Error:Consider defining a bean of type &lsquo;com.Procarihana.AccountingService.converter.commonToService.UserInfoCToSeConverter&rsquo; in your configuration.
解决：</li>
<li>在<code>config</code>里面给转换器配置成bean</li>
<li>@ConfigurationPropertiesBinding 注解是让 Spring Boot 知道使用该转换器做数据绑定。Mysql：<code>read log</code> 来保证事务的持久</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">import</span> com.Procarihana.AccountingService.converter.presisitenceToCommon.UserInfoPresToComConverter<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> org.springframework.boot.context.properties.ConfigurationPropertiesBinding<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> org.springframework.context.annotation.Bean<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> org.springframework.context.annotation.Configuration<span style="color:#f92672">;</span>


<span style="color:#a6e22e">@Configuration</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ConverterConfig</span> <span style="color:#f92672">{</span>
    <span style="color:#a6e22e">@Bean</span>
    <span style="color:#a6e22e">@ConfigurationPropertiesBinding</span>
    <span style="color:#66d9ef">public</span> UserInfoPresToComConverter <span style="color:#a6e22e">userInfoPresToComConverter</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> UserInfoPresToComConverter<span style="color:#f92672">();</span>
    <span style="color:#f92672">}</span>

    <span style="color:#a6e22e">@Bean</span>
    <span style="color:#a6e22e">@ConfigurationPropertiesBinding</span>
    <span style="color:#66d9ef">public</span> UserInfoCToSeConverter <span style="color:#a6e22e">userInfoCToSeConverter</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> UserInfoCToSeConverter<span style="color:#f92672">();</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><ol start="2">
<li>SpringBoot运行却得到404</li>
</ol>
<ul>
<li>Error：This application has no explicit mapping for /error, so you are seeing this as a fallback.  Tue Aug 11 18:46:56 CST 2020 There was an unexpected error (type=Not Found, status=404). No message available
解决：运行业务逻辑前线运行HelloController看看有没有问题，如果没有就很大可能是Controller部分写错，例如GetMapping、参数的部分等等
注意↓等等的方式</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">    <span style="color:#a6e22e">@GetMapping</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/{id}&#34;</span><span style="color:#f92672">)</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"> <span style="color:#66d9ef">public</span> UserInfo <span style="color:#a6e22e">getUserInfoByUserId</span><span style="color:#f92672">(</span><span style="color:#a6e22e">@PathVariable</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;id&#34;</span><span style="color:#f92672">)</span> Long userId<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
 <span style="color:#f92672">}</span>
</code></pre></div><ol start="3">
<li>Test 获得NullPointException</li>
</ol>
<blockquote>
<p>解决：可以尝试通过Debug看运行用的是那个Junit，如果是Junit 4<code>@Test</code>引入的包出现错误</p>
</blockquote>
<ul>
<li>Junit 5:import org.junit.jupiter.api.Test;</li>
<li>Junit 4:org.junit.Test</li>
</ul>
<ol start="4">
<li>Test 的时候java.lang.Exception: No runnable methods</li>
</ol>
<ul>
<li>解决：可能是因为小天才类名和要测试的类名写一样了没有加Test。不然就是<code>@test</code>没有写或者包引错了。</li>
</ul>
<ol start="5">
<li><code>mockMvc.perform(get(&quot;&quot;))</code>得到404</li>
</ol>
<ul>
<li>解决：看看url是否一致，参数有没有错，还要看url格式是否正确</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">mockMvc<span style="color:#f92672">.</span><span style="color:#a6e22e">perform</span><span style="color:#f92672">(</span>get<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/v1.0/greeting/?name=1&#34;</span><span style="color:#f92672">))</span><span style="color:#75715e">//一定是&#34;/&#34;开头！！！！！！
</span></code></pre></div><ol start="6">
<li>spotbugs:Class inherits equals() and uses Object.hashCode()</li>
</ol>
<ul>
<li>大概率是插件不被识别</li>
<li>解决：在类前加<code>@EqualsAndHashCode(callSuper = true)</code>，搭配<code>@Component</code>和构造器一起使用效果更佳</li>
<li>使用<code>@Data</code>的时候，相当于<code>@Getter @Setter @RequiredArgsConstructor @ToString @EqualsAndHashCode</code>这5个注解的合集。</li>
</ul>
<ol start="7">
<li>Bean named &lsquo;&amp;shiroFilterFactoryBean&rsquo; is expected to be of type &lsquo;org.springframework.beans.factory.config.BeanPostProcessor&rsquo; but was actually of type &lsquo;org.springframework.beans.factory.support.NullBean&rsquo;</li>
</ol>
<ul>
<li>在写的过程中可能为了方便先把<code>@Bean</code> return null，但是这种情况下系统会判定这个null 是没有意义的，就会报错。</li>
</ul>
<ol start="8">
<li>No converter found capable of converting from type [java.lang.String] to type [java.util.Map&lt;java.lang.String, org.springframework.boot.logging.LogLevel&gt;]</li>
</ol>
<ul>
<li>在application.yml里编写获得日志的过程中格式不正确,要确保空格加上呀！
<code> com.procarihana.accounting:DEBUG</code> -&gt; <code> com.procarihana.accounting: DEBUG</code></li>
</ul>
<ol start="9">
<li>There is no config
ured chain under the name/key [/v1.0/session]</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
    <span style="color:#f92672">&#34;timestamp&#34;</span>: <span style="color:#e6db74">&#34;2020-08-17T09:05:23.743+0000&#34;</span>,
    <span style="color:#f92672">&#34;status&#34;</span>: <span style="color:#ae81ff">500</span>,
    <span style="color:#f92672">&#34;error&#34;</span>: <span style="color:#e6db74">&#34;Internal Server Error&#34;</span>,
    <span style="color:#f92672">&#34;message&#34;</span>: <span style="color:#e6db74">&#34;There is no configured chain under the name/key [/v1.0/session].&#34;</span>,
    <span style="color:#f92672">&#34;path&#34;</span>: <span style="color:#e6db74">&#34;/v1.0/session&#34;</span>
}
</code></pre></div><ul>
<li>原因：  <code>shiroFilterDefinitionMap.put(&quot;/v1.0/session/&quot;,&quot;anon&quot;);</code></li>
<li>url后面不要随便加<code>/</code>不然就会误判而访问被拒绝</li>
<li>改为<code>shiroFilterDefinitionMap.put(&quot;/v1.0/session&quot;,&quot;anon&quot;);</code>就好了</li>
</ul>
<ol start="10">
<li>Mybatis: org.apache.ibatis.reflection.reflectionexception: there is no getter for property named xxx in xx.class</li>
</ol>
<ul>
<li>原因：mapper 驼峰命名的变量名填写错误。VALUE <code>#{}</code>的内容是 在编译时变量的名字，而非对应的table的名字</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Insert</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;INSERT into accounting_userinfo(username, password, salt, create_time, update_time) VALUES (#{username}, #{password}, #{salt}, #{create_time}, #{update_time})&#34;</span><span style="color:#f92672">)</span>
<span style="color:#f92672">-&gt;</span>
<span style="color:#a6e22e">@Insert</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;INSERT into accounting_userinfo(username, password, salt, create_time, update_time) VALUES (#{username}, #{password}, #{salt}, #{createTime}, #{updateTime})&#34;</span><span style="color:#f92672">)</span>

</code></pre></div><ol start="11">
<li>request method &lsquo;get&rsquo; not supported</li>
</ol>
<ul>
<li>添加shiro用于访问权限，同一url的post可以运行，但是get方法不能够运行(注：gei需要在path处输入param进行访问)</li>
<li>原因：shiro权限设置的url出问题</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">        shiroFilterDefinitionMap<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/v1.0/users&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;anon&#34;</span><span style="color:#f92672">);</span> <span style="color:#75715e">//不需要登录就能访问
</span><span style="color:#75715e"></span>
<span style="color:#f92672">--&gt;</span>
        shiroFilterDefinitionMap<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/v1.0/users/**&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;anon&#34;</span><span style="color:#f92672">);</span> <span style="color:#75715e">//不需要登录就能访问
</span><span style="color:#75715e"></span>
</code></pre></div><ol start="12">
<li>github ci 检测:OuterTypeFilename</li>
</ol>
<ul>
<li>可能是因为github上文件的名字和里面calss name 不相同造成的，所以即使是本地checkStyle 成功，但是ci 还是失败。要在github上面更改文件名字才成功。</li>
<li>Travis ci 不香吗？</li>
</ul>
<ol start="13">
<li>调用<code>get</code>的时候出现</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#e6db74">&#34;status&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#ae81ff">415</span><span style="color:#960050;background-color:#1e0010">,</span>
    <span style="color:#e6db74">&#34;error&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#e6db74">&#34;Unsupported Media Type&#34;</span><span style="color:#960050;background-color:#1e0010">,</span>
    <span style="color:#e6db74">&#34;message&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#e6db74">&#34;Content type &#39;&#39; not supported&#34;</span>
</code></pre></div><ul>
<li>有可能是因为包含了consumes<code> @GetMapping(path = &quot;/{id}&quot;, produces = &quot;application/json&quot;, consumes = &quot;application/json&quot;)</code></li>
</ul>
<blockquote>
<ul>
<li>删除后就能够执行<code> @GetMapping(path = &quot;/{id}&quot;, produces = &quot;application/json;charset=utf-8&quot;)</code></li>
</ul>
</blockquote>
<ol start="14">
<li>Error: nested exception is org.springframework.<code>beans.factory.NoSuchBeanDefinitionException</code>: No qualifying bean of type &lsquo;com.procarihana.accounting.Dao.Mapper.RecordMapper&rsquo;</li>
</ol>
<ul>
<li>可能是因为Mapper的interface 没有加上<code>@Mappere</code></li>
</ul>
<ol start="15">
<li>Error:元素类型 &ldquo;foreach&rdquo; 必须后跟属性规范 &ldquo;&gt;&rdquo; 或 &ldquo;/&gt;&rdquo;</li>
</ol>
<ul>
<li>Mybatis mapper 的脚本里面<!-- raw HTML omitted -->出现问题，有可能是因为每个属性之间没有空格！！！</li>
<li>属性： <a href="https://blog.csdn.net/isea533/article/details/21237175">https://blog.csdn.net/isea533/article/details/21237175</a></li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Insert</span><span style="color:#f92672">({</span><span style="color:#e6db74">&#34;&lt;script&gt;&#34;</span><span style="color:#f92672">,</span>
        <span style="color:#e6db74">&#34;INSERT INTO accounting_record_tag_mapping(record_id, tag_id, status) VALUES&#34;</span><span style="color:#f92672">,</span>
        <span style="color:#e6db74">&#34;&lt;foreach item=&#39;item&#39; index=&#39;index&#39; collection=&#39;recordTagMappings&#39;&#34;</span><span style="color:#f92672">,</span>
        <span style="color:#e6db74">&#34;open=&#39;(&#39;separator=&#39;),(&#39;close=&#39;)&#39;&gt;&#34;</span><span style="color:#f92672">,</span>
        <span style="color:#e6db74">&#34;#{item.recordId},#{item.tagId},#{item.status}&#34;</span><span style="color:#f92672">,</span>
        <span style="color:#e6db74">&#34;&lt;/foreach&gt;&#34;</span><span style="color:#f92672">,</span>
        <span style="color:#e6db74">&#34;&lt;/script&gt;&#34;</span><span style="color:#f92672">})</span>

        <span style="color:#f92672">--&gt;</span>

        <span style="color:#e6db74">&#34;&lt;foreach item=&#39;item&#39; index=&#39;index&#39; collection=&#39;recordTagMappings&#39;&#34;</span><span style="color:#f92672">,</span>
        <span style="color:#e6db74">&#34;open=&#39;(&#39; separator=&#39;),(&#39; close=&#39;)&#39;&gt;&#34;</span><span style="color:#f92672">,</span>
        <span style="color:#e6db74">&#34;#{item.recordId},#{item.tagId},#{item.status}&#34;</span><span style="color:#f92672">,</span>
        <span style="color:#e6db74">&#34;&lt;/foreach&gt;&#34;</span><span style="color:#f92672">,</span>
        
</code></pre></div><ol start="16">
<li>mybatis mapper 要是sql台场需要分开的话，需要特别注意空格，最好在每个分开的结尾添加空格！！！！！</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Select</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;SELECT tag.id, tag.description, tag.status, tag.user_id, artm.record_id &#34;</span>
        <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;FROM accounting_tag tag &#34;</span>
        <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;LEFT JOIN accounting_record_tag_mapping artm &#34;</span>
        <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;ON artm.tag_id = tag.id &#34;</span>
        <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;WHERE artm.record_id = #{recordId}&#34;</span><span style="color:#f92672">)</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Spring Web</title>
            <link>https://procarihana.github.io/public/posts/spring-web/</link>
            <pubDate>Mon, 06 Jul 2020 15:29:45 +0800</pubDate>
            
            <guid>https://procarihana.github.io/public/posts/spring-web/</guid>
            <description>Spring Web 和 HTTP进行沟通
从零开始⼀个Spring应⽤ • pom.xml • src/main/java/hello/Application.java • src/main/java/hello/HelloController.java
Query String 最简单的HTTP请求（查询字符串），就是</description>
            <content type="html"><![CDATA[<p>Spring Web 和 HTTP进行沟通</p>
<p>从零开始⼀个Spring应⽤
• pom.xml
• src/main/java/hello/Application.java
• src/main/java/hello/HelloController.java</p>
<p>Query String 最简单的HTTP请求（查询字符串），就是</p>
]]></content>
        </item>
        
        <item>
            <title>HTML 标签</title>
            <link>https://procarihana.github.io/public/posts/html-%E6%A0%87%E7%AD%BE/</link>
            <pubDate>Sat, 04 Jul 2020 17:11:23 +0800</pubDate>
            
            <guid>https://procarihana.github.io/public/posts/html-%E6%A0%87%E7%AD%BE/</guid>
            <description>A标签  作用   跳转外部页面     跳转内部锚点     跳转到邮箱或电话等    href  超级链接  &amp;lt;body&amp;gt; &amp;lt;a herf = &amp;#34;https://google.com&amp;#34; target=&amp;#34;_blank&amp;#34; download&amp;gt;超链&amp;lt;/a&amp;gt; &amp;lt;/body&amp;gt; target  在哪个窗口打开超级链接   在空白页打开超级链接     在    download rel=noopener target  在哪个窗口打开超级链接   在空白页打开    &amp;lt;a href=&amp;#34;//goole.com&amp;#34; target=_blank&amp;gt;top&amp;lt;/a&amp;gt;    在顶层打开链接（正常打开链接）&amp;ndash; top     在本层打开（Google 不允许用iframe指向，所以打不开，如果可以打开，则可以再其他页面直接打开）    如何在编辑过程中正确打开html  http-server   安装    $ yarn global add http-server   启动并点击任一网址，要编写路径</description>
            <content type="html"><![CDATA[<h2 id="a标签">A标签</h2>
<ul>
<li>作用</li>
<li>
<ul>
<li>跳转外部页面</li>
</ul>
</li>
<li>
<ul>
<li>跳转内部锚点</li>
</ul>
</li>
<li>
<ul>
<li>跳转到邮箱或电话等</li>
</ul>
</li>
</ul>
<h5 id="href">href</h5>
<ul>
<li>超级链接</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">   &lt;<span style="color:#f92672">body</span>&gt;
   &lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">herf </span><span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://google.com&#34;</span> <span style="color:#a6e22e">target</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;_blank&#34;</span> <span style="color:#a6e22e">download</span>&gt;超链&lt;/<span style="color:#f92672">a</span>&gt;
   &lt;/<span style="color:#f92672">body</span>&gt;
</code></pre></div><p><img src="/href.jpg" alt=""></p>
<h5 id="target">target</h5>
<ul>
<li>在哪个窗口打开超级链接</li>
<li>
<ul>
<li>在空白页打开超级链接</li>
</ul>
</li>
<li>
<ul>
<li>在</li>
</ul>
</li>
</ul>
<h5 id="download">download</h5>
<h5 id="relnoopener">rel=noopener</h5>
<h2 id="target-1">target</h2>
<ul>
<li>在哪个窗口打开超级链接</li>
<li>
<ul>
<li>在空白页打开</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;//goole.com&#34;</span> <span style="color:#a6e22e">target</span><span style="color:#f92672">=</span><span style="color:#e6db74">_blank</span>&gt;top&lt;/<span style="color:#f92672">a</span>&gt;
</code></pre></div><ul>
<li>
<ul>
<li>在顶层打开链接（正常打开链接）&ndash;
<!-- raw HTML omitted -->top<!-- raw HTML omitted --></li>
</ul>
</li>
<li>
<ul>
<li>在本层打开（Google 不允许用iframe指向，所以打不开，如果可以打开，则可以再其他页面直接打开）</li>
</ul>
</li>
</ul>
<h2 id="如何在编辑过程中正确打开html">如何在编辑过程中正确打开html</h2>
<ul>
<li>http-server</li>
<li>
<ul>
<li>安装</li>
</ul>
</li>
</ul>
<pre><code>$ yarn global add http-server  
</code></pre><ul>
<li>
<p>启动并点击任一网址，要编写路径</p>
</li>
<li>
<ul>
<li>
<p>. (空格点空格【可省略】)-c（缓存 ）-1</p>
<p><img src="/http-server.png" alt=""></p>
</li>
</ul>
</li>
<li>
<ul>
<li>点击其中一个网址</li>
</ul>
</li>
<li>
<ul>
<li>
<p>打开并添加路径（所在文件名）</p>
<p><img src="/http-server2.png" alt=""></p>
</li>
</ul>
</li>
<li>
<p>parcel</p>
</li>
<li>
<ul>
<li>安装</li>
</ul>
</li>
</ul>
<pre><code>$ yarn global add parcel
</code></pre><ul>
<li>
<ul>
<li>启动
<img src="/parcel2.png" alt=""></li>
</ul>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Java面向对象————多态</title>
            <link>https://procarihana.github.io/public/posts/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%A4%9A%E6%80%81/</link>
            <pubDate>Mon, 11 May 2020 17:20:16 +0800</pubDate>
            
            <guid>https://procarihana.github.io/public/posts/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%A4%9A%E6%80%81/</guid>
            <description>面向对象的三大特征 封装 继承 多态 多态：不同类的不同的实现方法
 方法名字变量都一样，但是子类继承后的实现不一样  重载：两个类同一个方法的不同实现,根据最接近的类型进行匹配
 方法名相同，参数表不一样  多态 实例方法本身是多态的 实例：一个方法不是静态的就是实例方法
通过区分有无Statci
 在运行时根据this（当前对象的实际类型）来决定调用哪个方法 []方法接收者  obj.method(1)
消息接受者.消息（参数）//接受者会根据消息的不同自行决定如何响应消息
 静态方法没有多态 参数静态绑定，接受者动态绑定 覆盖：重写父类中的方法，方法名、参数不能改变，但是返回值可以改变   多态只对方法的接受者生效     多态只选择接受者的类型，不选择参数的类型    public class Base { public void print(ParamBase param) { System.out.println(&amp;#34;I am Base,the param is ParamBase&amp;#34;); } public void print(ParamSub param){ System.out.println(&amp;#34;I am Base,the param is ParamSub&amp;#34;); } } public class Sub extends Base { @Override public void print(ParamBase param){ System.</description>
            <content type="html"><![CDATA[<h2 id="面向对象的三大特征">面向对象的三大特征</h2>
<h5 id="封装">封装</h5>
<h5 id="继承">继承</h5>
<h5 id="多态">多态</h5>
<p>多态：不同类的不同的实现方法</p>
<pre><code>  方法名字变量都一样，但是子类继承后的实现不一样
</code></pre>
<p>重载：两个类同一个方法的不同实现,根据最接近的类型进行匹配</p>
<pre><code>  方法名相同，参数表不一样
</code></pre>
<h2 id="多态-1">多态</h2>
<h5 id="实例方法本身是多态的">实例方法本身是多态的</h5>
<p>实例：一个方法不是静态的就是实例方法<br>
通过区分有无Statci</p>
<ul>
<li>在运行时根据this（当前对象的实际类型）来决定调用哪个方法
[]方法接收者</li>
</ul>
<p>obj.method(1)</p>
<p>消息接受者.消息（参数）//接受者会根据消息的不同自行决定如何响应消息</p>
<ul>
<li>静态方法没有多态</li>
<li>参数静态绑定，接受者动态绑定
覆盖：重写父类中的方法，方法名、参数不能改变，但是返回值可以改变</li>
<li>
<ul>
<li>多态只对方法的接受者生效</li>
</ul>
</li>
<li>
<ul>
<li>多态只选择接受者的类型，不选择参数的类型</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Base</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">print</span><span style="color:#f92672">(</span>ParamBase param<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;I am Base,the param is ParamBase&#34;</span><span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span>  <span style="color:#a6e22e">print</span><span style="color:#f92672">(</span>ParamSub param<span style="color:#f92672">){</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;I am Base,the param is ParamSub&#34;</span><span style="color:#f92672">);</span>
         <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>


    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Sub</span> <span style="color:#66d9ef">extends</span> Base <span style="color:#f92672">{</span>
    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">print</span><span style="color:#f92672">(</span>ParamBase param<span style="color:#f92672">){</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;I am Sub,the param is ParamBase&#34;</span><span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">print</span><span style="color:#f92672">(</span>ParamSub param<span style="color:#f92672">){</span>
    <span style="color:#75715e">//方法名一样，参数不一样（重载），但是两个又互为父子类，有继承关系
</span><span style="color:#75715e"></span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;I am Sub,the param is ParamSub&#34;</span><span style="color:#f92672">);</span>
       <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
   
<span style="color:#960050;background-color:#1e0010">```</span>java 
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
       <span style="color:#75715e">//声明一个父类的对象，但是建立一个子类的对像，因为任何的子类都是父类的成员
</span><span style="color:#75715e"></span>        Base object <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Sub<span style="color:#f92672">();</span>
        
        <span style="color:#75715e">//声明一个父类的参数，但是创建一个子类的产数给他
</span><span style="color:#75715e"></span>        ParamBase param <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ParamSub<span style="color:#f92672">();</span>
      
        object<span style="color:#f92672">.</span><span style="color:#a6e22e">print</span><span style="color:#f92672">(</span>param<span style="color:#f92672">);</span>
        <span style="color:#75715e">/*消息的接受者是多态类型的，有继承类，参数也同样有父子关系
</span><span style="color:#75715e">        消息的接受者通过动态绑定为子类object，
</span><span style="color:#75715e">        所以调用的是子类的方法。
</span><span style="color:#75715e">        而子类的方法是多态，又因为方法是在编译时期由参数的类型静态绑定的
</span><span style="color:#75715e">        在ParamBase param = new ParamSub();虽然用的是子类的变量，但是设定的是父类的变量类型，所以父类的最接近的类，根据重载选择最适合的原则选择执行父类，
</span><span style="color:#75715e">        所以调用的是子类中的public void print(ParamSub param)
</span><span style="color:#75715e">        */</span>
    <span style="color:#f92672">}</span>

<span style="color:#f92672">-</span> 例子
<span style="color:#f92672">-</span> <span style="color:#f92672">-</span> Shape的多态
<span style="color:#f92672">-</span> <span style="color:#f92672">-</span> HashSet<span style="color:#f92672">.</span><span style="color:#a6e22e">addAll</span><span style="color:#f92672">()</span>  


<span style="color:#960050;background-color:#1e0010">##</span> 设计模式实战<span style="color:#960050;background-color:#1e0010">：</span>策略模式
让代码更加简洁


    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PriceCalculator</span> <span style="color:#f92672">{</span>
    <span style="color:#75715e">// 使用策略模式重构这个方法，实现三个策略：
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// NoDiscountStrategy 不打折
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// Discount95Strategy 全场95折
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// OnlyVipDiscountStrategy 只有VIP打95折，其他人保持原价
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// 重构后的方法签名：
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">calculatePrice</span><span style="color:#f92672">(</span>DiscountStrategy strategy<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> price<span style="color:#f92672">,</span> User user<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> strategy<span style="color:#f92672">.</span><span style="color:#a6e22e">discount</span><span style="color:#f92672">(</span>price<span style="color:#f92672">,</span>user<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">---</span> 
         <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">calculatePrice</span><span style="color:#f92672">(</span>String discountStrategy<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> price<span style="color:#f92672">,</span> User user<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">switch</span> <span style="color:#f92672">(</span>discountStrategy<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;NoDiscount&#34;</span><span style="color:#f92672">:</span>
                    <span style="color:#66d9ef">return</span> price<span style="color:#f92672">;</span>
                <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;Discount95&#34;</span><span style="color:#f92672">:</span>
                    <span style="color:#66d9ef">return</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span><span style="color:#f92672">)</span> <span style="color:#f92672">(</span>price <span style="color:#f92672">*</span> 0<span style="color:#f92672">.</span><span style="color:#a6e22e">95</span><span style="color:#f92672">);</span>
                <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;OnlyVip&#34;</span><span style="color:#f92672">:</span>
                    <span style="color:#f92672">{</span>
                        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>user<span style="color:#f92672">.</span><span style="color:#a6e22e">isVip</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
                            <span style="color:#66d9ef">return</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span><span style="color:#f92672">)</span> <span style="color:#f92672">(</span>price <span style="color:#f92672">*</span> 0<span style="color:#f92672">.</span><span style="color:#a6e22e">95</span><span style="color:#f92672">);</span>
                        <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
                            <span style="color:#66d9ef">return</span> price<span style="color:#f92672">;</span>
                        <span style="color:#f92672">}</span>
                   <span style="color:#f92672">}</span>
               <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
                   <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> IllegalStateException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Should not be here!&#34;</span><span style="color:#f92672">);</span>
                   

<span style="color:#f92672">-</span> 策略和业务分离



    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">User</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">private</span> String name<span style="color:#f92672">;</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">boolean</span> vip<span style="color:#f92672">;</span>

    <span style="color:#66d9ef">private</span> <span style="color:#a6e22e">User</span><span style="color:#f92672">(</span>String name<span style="color:#f92672">,</span> <span style="color:#66d9ef">boolean</span> vip<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> name<span style="color:#f92672">;</span>
        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">vip</span> <span style="color:#f92672">=</span> vip<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> User <span style="color:#a6e22e">vip</span><span style="color:#f92672">(</span>String name<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> User<span style="color:#f92672">(</span>name<span style="color:#f92672">,</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> User <span style="color:#a6e22e">dios</span><span style="color:#f92672">(</span>String name<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> User<span style="color:#f92672">(</span>name<span style="color:#f92672">,</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">getName</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> name<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">isVip</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> vip<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>线程池策略：（解耦合）</li>
</ul>
<ol>
<li>放弃</li>
<li>让线程者执行</li>
<li>把最久的策略丢弃</li>
<li>把新的策略丢弃</li>
</ol>
<h5 id="策略模式例子打折策略">策略模式例子：打折策略</h5>
<ul>
<li>涉及金钱的时候不能够用Double；</li>
<li>Price * 100 当成分，用int处理</li>
<li>BigDecim 大的十进制（十进制精确的表述，小数的计算）</li>
</ul>
<h5 id="jdk线程池中的策略threadpoolexecutor">JDK线程池中的策略THreadPoolExecutor</h5>
<h2 id="多态实战">多态实战</h2>
<ul>
<li>Files.walkFileTree</li>
</ul>
<p>不想把接口的所有方法都实现，都要查找他的默认实现</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FileFilter</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IOException <span style="color:#f92672">{</span>
        Path projectDir <span style="color:#f92672">=</span> Paths<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">getProperty</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;user.dir&#34;</span><span style="color:#f92672">));</span>
        Path testRootDir <span style="color:#f92672">=</span> projectDir<span style="color:#f92672">.</span><span style="color:#a6e22e">resolve</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;test-root&#34;</span><span style="color:#f92672">);</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>testRootDir<span style="color:#f92672">.</span><span style="color:#a6e22e">toFile</span><span style="color:#f92672">().</span><span style="color:#a6e22e">isDirectory</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> IllegalStateException<span style="color:#f92672">(</span>testRootDir<span style="color:#f92672">.</span><span style="color:#a6e22e">toAbsolutePath</span><span style="color:#f92672">().</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;不存在！&#34;</span><span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span>

        List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> filteredFileNames <span style="color:#f92672">=</span> filter<span style="color:#f92672">(</span>testRootDir<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;.csv&#34;</span><span style="color:#f92672">);</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>filteredFileNames<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>

    <span style="color:#75715e">/**
</span><span style="color:#75715e">     * 实现一个按照扩展名过滤文件的功能
</span><span style="color:#75715e">     *
</span><span style="color:#75715e">     * @param rootDirectory 要过滤的文件夹
</span><span style="color:#75715e">     * @param extension     要过滤的文件扩展名，例如 .txt
</span><span style="color:#75715e">     * @return 所有该文件夹（及其后代子文件夹中）匹配指定扩展名的文件的名字
</span><span style="color:#75715e">     */</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">filter</span><span style="color:#f92672">(</span>Path rootDirectory<span style="color:#f92672">,</span> String extension<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IOException <span style="color:#f92672">{</span>
        List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> names <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
        Files<span style="color:#f92672">.</span><span style="color:#a6e22e">walkFileTree</span><span style="color:#f92672">(</span>rootDirectory<span style="color:#f92672">,</span> <span style="color:#66d9ef">new</span> SimpleFileVisitor<span style="color:#f92672">&lt;</span>Path<span style="color:#f92672">&gt;()</span> <span style="color:#f92672">{</span>
            <span style="color:#a6e22e">@Override</span>
            <span style="color:#66d9ef">public</span> FileVisitResult <span style="color:#a6e22e">visitFile</span><span style="color:#f92672">(</span>Path file<span style="color:#f92672">,</span> BasicFileAttributes attrs<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IOException <span style="color:#f92672">{</span>
                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>file<span style="color:#f92672">.</span><span style="color:#a6e22e">getFileName</span><span style="color:#f92672">().</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">().</span><span style="color:#a6e22e">endsWith</span><span style="color:#f92672">(</span>extension<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
                    names<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>file<span style="color:#f92672">.</span><span style="color:#a6e22e">getFileName</span><span style="color:#f92672">().</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">());</span>
                <span style="color:#f92672">}</span>
                <span style="color:#66d9ef">return</span> FileVisitResult<span style="color:#f92672">.</span><span style="color:#a6e22e">CONTINUE</span><span style="color:#f92672">;</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">});</span>
        <span style="color:#66d9ef">return</span> names<span style="color:#f92672">;</span>
               <span style="color:#f92672">}</span>
            <span style="color:#f92672">}</span>
    <span style="color:#75715e">//匿名内部类，把相近的两块逻辑组合到一起，直接把访问方法，使用结果。
</span><span style="color:#75715e"></span>   
            <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FileFilterVisitor</span> <span style="color:#66d9ef">extends</span> SimpleFileVisitor<span style="color:#f92672">&lt;</span>Path<span style="color:#f92672">&gt;</span> <span style="color:#f92672">{</span>
                <span style="color:#66d9ef">private</span> String extension<span style="color:#f92672">;</span>
                <span style="color:#66d9ef">private</span> List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> filteredNames <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
    
                <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">FileFilterVisitor</span><span style="color:#f92672">(</span>String extension<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">extension</span> <span style="color:#f92672">=</span> extension<span style="color:#f92672">;</span>
                <span style="color:#f92672">}</span>
    
                <span style="color:#66d9ef">public</span> List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">getFilteredNames</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
                <span style="color:#66d9ef">return</span> filteredNames<span style="color:#f92672">;</span>
             <span style="color:#f92672">}</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Java面向对象——组合与继承</title>
            <link>https://procarihana.github.io/public/posts/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%84%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF/</link>
            <pubDate>Mon, 11 May 2020 17:19:33 +0800</pubDate>
            
            <guid>https://procarihana.github.io/public/posts/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%84%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF/</guid>
            <description>三大特征 封装 继承 public class Animal { protected String name;
public Animal(String name) { this.name = name; } public void sayMyName() { System.out.println(&amp;quot;我的名字是&amp;quot; + name); } public class Cat extends Animal{ public Cat(String name) { super(name); } public void meow() { System.out.println(&amp;quot;喵&amp;quot; + name); } } public class Main { public static void main(String[] args) { Cat cat = new Cat(&amp;quot;ABC&amp;quot;); cat.meow(); cat.sayMyName(); }  多态 继承 DRY（Donot Repeat Yourself）  事不过三，三则重构  继承的本质是提炼出公用代码，避免重复 继承一个类就会自动继承类的行为</description>
            <content type="html"><![CDATA[<h2 id="三大特征">三大特征</h2>
<h5 id="封装">封装</h5>
<h5 id="继承">继承</h5>
<p>public class Animal {
protected String name;</p>
<pre><code>public Animal(String name) {
    this.name = name;
}

public void sayMyName() {
    System.out.println(&quot;我的名字是&quot; + name);
}
public class Cat extends Animal{

public Cat(String name) {
    super(name);
}

public void meow() {
    System.out.println(&quot;喵&quot; + name);
}
}
public class Main {
public static void main(String[] args) {
    Cat cat = new Cat(&quot;ABC&quot;);
    cat.meow();
    cat.sayMyName();
    }
</code></pre>
<h5 id="多态">多态</h5>
<h2 id="继承-1">继承</h2>
<h3 id="drydonot-repeat-yourself">DRY（Donot Repeat Yourself）</h3>
<ul>
<li>事不过三，三则重构</li>
</ul>
<h3 id="继承的本质是提炼出公用代码避免重复">继承的本质是提炼出公用代码，避免重复</h3>
<p>继承一个类就会自动继承类的行为</p>
<h2 id="java的继承体系">Java的继承体系</h2>
<h3 id="单根继承单一继承声明一个class的时候不声明任何东西都会继承object">单根继承（单一继承）：声明一个Class的时候，不声明任何东西都会继承Object</h3>
<h4 id="优点">优点</h4>
<ul>
<li>
<p>保证所有对象都拥有同一种行为，方便处理</p>
</li>
<li>
<p>对比C++的多重继承</p>
</li>
</ul>
<h3 id="object类有那些需要了解的方法">Object类有那些需要了解的方法？</h3>
<ul>
<li>equals（）</li>
</ul>
<p>判断两个对象是不是同一个对象（地址、内存）</p>
<pre><code>Object a = new Object();
Object b = new Object();
a.equals(b);
//虽然不是两个相同的对象，但是包含的内容相同，所以认为是相等的
</code></pre>
<p>==equals()andhashcoad()==</p>
<pre><code>public class Order {
Integer id;
String name;
//id一样，即使地址不一样，就认为是同一个订单

@Override
public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    Order order = (Order) o;
    return id.equals(order.id);
}

@Override
public int hashCode() {
    return Objects.hash(id);
}
</code></pre>
<p>当你覆盖Equals方法的时候，要同时覆盖Hashcode
“==”判断地址是否相同；/原生数据类型则是比较的是值否向同</p>
<ul>
<li>
<p>toString（）</p>
</li>
<li>
<p>对一个对象提供字符串表示</p>
</li>
<li>
<p>所有的对象都有toString方法（所有对象都继承Object类）</p>
<p>public static void main(String[] args) {
Cat a = new Cat();
System.out.println(a);
public class Cat {
String name = &ldquo;hey&rdquo;;</p>
<p>@Override
public String toString() {
return &ldquo;Cat{&rdquo; +
&ldquo;name=&rsquo;&rdquo; + name + &lsquo;'&rsquo; +
&lsquo;}';
}</p>
</li>
</ul>
<h2 id="类的结构与初始化顺序">类的结构与初始化顺序</h2>
<ul>
<li>子类拥有父类的一切数据和行为<br>
（即使继承的子类一行代码也没有，也可以调用父类的方法）</li>
<li>子类可以继承父类的父类</li>
<li>父类先于子类生成构造器，因为只有调用父类的方法后才能够完成子类的构造器的</li>
<li>必须拥有匹配的构造器</li>
<li>
<ul>
<li>super关键字</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li>需要自行生成一个子类的构造器的时候，就必须要声明一个和父类构造器参数相同的构造器。构造器第一句一定是超类构造器super（父类参数）</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>初始化顺序
构造器（不声明任何构造器的化，编译器会自动生成）
不在父类声明构造器时，父类和子类会有自动构造器生成
如果在父类声明构造器，则需要在子类声明super构造器</p>
<ol>
<li>父类初始化语句</li>
<li>父类初始化块</li>
<li>父类的constructor</li>
<li>子类的……
A继承B继承C<br>
C先被创造出来，接着到B，最后到A</li>
</ol>
<h2 id="实例方法的override">实例方法的Override</h2>
<ul>
<li>
<p>又称为覆盖/重写</p>
</li>
<li>
<p>永远使用@Override注解来防手残</p>
<pre><code>      public static main(String[]args){
          String 1 = &quot;ABC&quot;;
          String 2 = &quot;ABC&quot;;
          1.equals(2);
      }
      在执行的过程中可以看到判断相等的时候会看到当前的Integer.equals方法会覆盖object.equal方法(判断value是否相同)
</code></pre>
</li>
</ul>
<h2 id="模版方法">模版方法</h2>
<ul>
<li>提供一个“模版”，实现可以覆盖模版的全部或者部分
子类可以调用父类的方法，在调用的过程中通过覆盖达到完成需求的目的，其他不改动的沿用父类的模版执行
！！！ 图*2</li>
<li>通过@Override可以模板中的一个流程，实现自定义的功能</li>
<li>在Override里面通过super.父类的方法，从而实现先执行父类的模板再实现自定义</li>
</ul>
<h2 id="向上向下转型">向上/向下转型</h2>
<h4 id="一个子类类型的对象永远是一个父类类型的对象">一个子类类型的对象永远是一个父类类型的对象</h4>
<ul>
<li>正如一只猫同时也是一只动物，同时也是一个对象</li>
<li>instanceof 判断类型</li>
<li>null instanceof？ == false</li>
</ul>
<p>Eg：
object &lt;&ndash; Number &lt;&ndash; Integer</p>
<p>a instanceod Integer/Number/Object (a是不是Integer/Number/Object的一个实例)</p>
<h3 id="null不是任何东西的对象"><strong>Null不是任何东西的对象</strong></h3>
<p>null instanceof a(必须是一个类，所以不能是null) ==&gt;false</p>
<h5 id="因此需要一个父类型时总可以传递一个子类型">因此，需要一个父类型时，总可以传递一个子类型</h5>
<p>因为所有的子类都是父类的实例
null可以被赋值给任何引用类型的对象，因此null也可以传递给父类<br>
AnimalName（new Cat（name:&ldquo;喵&rdquo;））</p>
<h5 id="转型">转型</h5>
<p>子类转换为父类是安全的，但是父类转为子类是危险的（小的放进大的里面是安全的，大放小则有可能溢出）</p>
<pre><code> Animal a = new Animal();
 //类似于int a = 1；
 //long i = a；
 //int b = （int）i；
 sayAnimalName((Dog)a);//通过强制传换 
 
 public static void sayAnimalName(Dog animal){

 }




    public class Classifier {
    public static void main(String[] args) {
    List&lt;Object&gt; list = Arrays.asList(&quot;0&quot;, 1, 2L, &quot;3&quot;, new Object());
    List&lt;Number&gt; numbers = new ArrayList&lt;&gt;();
    List&lt;String&gt; strings = new ArrayList&lt;&gt;();
    List&lt;Object&gt; others = new ArrayList&lt;&gt;();

    classify(list, numbers, strings, others);

    System.out.println(&quot;numbers = &quot; + numbers);
    System.out.println(&quot;strings = &quot; + strings);
    System.out.println(&quot;others = &quot; + others);
}

/**
 * 给定一个包含任意对象的列表，将其按照以下方式分类： 如果对象是Number类型，将其放入numberList； 如果对象是String类型，将其放入stringList；
 * 否则，将其放入otherList。
 *
 * @param list 给定的包含任意对象的列表
 * @param numberList 用于接收所有Number对象的列表
 * @param stringList 用于接收所有String对象的列表
 * @param otherList 用于接收其余所有类型对象的列表
 */
public static void classify(
        List&lt;Object&gt; list,
        List&lt;Number&gt; numberList,
        List&lt;String&gt; stringList,
        List&lt;Object&gt; otherList) {
    for (Object element : list ){//先游历数据一遍
        if (element instanceof Number){
            numberList.add((Number) element);
        }else if (element instanceof String){
            stringList.add((String)element);
            }else otherList.add(element);
        }
    }

    }
</code></pre>
<h2 id="super关键字">Super关键字</h2>
<p>调用父类的方法（包括构造函数）</p>
<h2 id="final关键字">final关键字</h2>
<h5 id="final声明变量变量成为不可变的必须初始化保证线程安全">final声明变量，变量成为不可变的（必须初始化），保证线程安全</h5>
<ul>
<li>
<p><input disabled="" type="checkbox"> final int i;</p>
</li>
<li>
<p><input checked="" disabled="" type="checkbox"> -</p>
<pre><code>public Main(int i){
this.i = 1;
//this.i = 2;不行，因为final之后只能够赋值一次，之后就不能够被改写了
}
</code></pre>
<p>final int i;</p>
</li>
<li>
<p>局部变量/方法参数</p>
</li>
<li>
<p>成员变量</p>
</li>
</ul>
<h5 id="final-声明对象">final 声明对象</h5>
<pre><code>Date date = new Date();
f(date)

 private void f(final Date date){
     //对象只是一个地址，final对象指向的地址改变不可以
     //但是指向的内容可以改变
     date = new Date();//不行
     date.setTime();//数据可变
 }
</code></pre>
<ul>
<li>
<p>常量与单例<br>
通过final 声明常量，使用对象的时候不需要在此new一个新的对象，可以直接使用这个常量。引用常量的时候可以通过名字引用，能够快速知道常量的意义。</p>
<pre><code>      public static final int MAX_VALUE = 100;
      public void maxValue(){
      for(int i = 0 ; i &lt; MAX_VALUE ; i++){
    
      }  
</code></pre>
</li>
</ul>
<h6 id="单例">单例</h6>
<ul>
<li>不能被继承，因为是final</li>
<li>
<ul>
<li>方法命名：驼峰形式 maxValue</li>
</ul>
</li>
<li>
<ul>
<li>
<p>常量命名：全部大写 MAX_VALUE</p>
<pre><code>private static final World SINGLEON_INSTANCE = new World();//改变成public就可以被大家所引用
private World(){//构造器私有化，保证没有人能够通过public的方法调用
    
}
/*但是还是能调用创建新的对象
1. 通过反射调用private的构造器
2. 使用序列化和反序列化
*/
</code></pre>
</li>
</ul>
</li>
</ul>
<p>Boolean Integer ……</p>
<pre><code>    private static final World SINGLEON_INSTANCE = new World();
    public static void World getInstance(){
    return SINGLETON_INSTANCE;//通过工厂方法动态决定是否调用单例，也可作为与外界接触的接口
}
</code></pre>
<p>final优点：</p>
<ol>
<li>保证变量被使用的时候是最开始的值</li>
<li>线程是安全的，不用担心多线程带来的问题</li>
<li>类不会被继承，覆盖，重写，不会被改变，保证约定不会被打破，不用担心多态</li>
</ol>
<h5 id="final在方法上的声明禁止继承覆盖重写此方法">final在方法上的声明：禁止继承/覆盖/重写此方法</h5>
<h5 id="final在类声明上的使用禁止继承此类">final在类声明上的使用：禁止继承此类</h5>
<ul>
<li>继承提供了灵活性，也埋下了隐患</li>
<li>为什么String/Integer等类是final的？<br>
避免一些特殊的常量被恶意继承，例如Integer 的MAX_VALUE、MIX_VALUE 破坏约定</li>
</ul>
<h2 id="组合">组合</h2>
<h5 id="继承is---a">继承：is - a</h5>
<ul>
<li>使用继承是为了复用方法</li>
</ul>
<h5 id="组合has---a">组合：has - a</h5>
<ul>
<li>
<p>可以复用多份代码</p>
<pre><code>  class Cat {
      Bell bell;
  }
  private class Bell{
        
  }
  class Home{
      Cat cat;
  }
</code></pre>
</li>
<li>
<p>但是实际中，二者的界限有时候很难区分</p>
</li>
<li>
<p>CountingSet</p>
</li>
<li>
<p>完全不实用继承
git clone <a href="https://github.com/victoriadrake/hugo-theme-sam.git">https://github.com/victoriadrake/hugo-theme-sam.git</a> themes/sam</p>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Java 面向对象初步——封装与隐藏</title>
            <link>https://procarihana.github.io/public/posts/java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%88%9D%E6%AD%A5%E5%B0%81%E8%A3%85%E4%B8%8E%E9%9A%90%E8%97%8F/</link>
            <pubDate>Mon, 11 May 2020 17:18:58 +0800</pubDate>
            
            <guid>https://procarihana.github.io/public/posts/java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%88%9D%E6%AD%A5%E5%B0%81%E8%A3%85%E4%B8%8E%E9%9A%90%E8%97%8F/</guid>
            <description>面向对象的三大特征 封装 优点：实现细节可以发生变化，只要接口不变，就不会对使用产生影响 理念：对外暴露尽可能少的细节
继承 多态 封装 封装隐藏了内部实现细节，只暴露出接口 电灯对象 高、低耦合
  你只访问他的“开关”接口，不关心内部的“电路”细节
 public static void main(String[] args) { Light light = new Light(); light.turnOn();//低耦合 Light light2 = new Light(); light2.打开电路1(); light2.打开电路2(); light2.打开电路3(); //高耦合,比低耦合更难扩展 //Home类和Light类之间建立联系——&amp;gt;耦合（让改变变得困难） //一方进行改变时，另一方也需要进行改变 public class Light {  public void turnOn(){//接口 打开电路1(); 打开电路2(); 打开电路3();//细节
} public void 打开电路1(){
} public void 打开电路2(){
} public void 打开电路3(){
}
  废弃后使用自动停止，不影响其他代码的运行
public class Light { @Deprecated public void turnOn(){//接口 打开电路1(); 打开电路2(); 打开电路3();//细节 } public static void main(String[] args) { Light light = new Light();  light.</description>
            <content type="html"><![CDATA[<h2 id="面向对象的三大特征">面向对象的三大特征</h2>
<h3 id="封装">封装</h3>
<p>优点：实现细节可以发生变化，只要接口不变，就不会对使用产生影响
理念：对外暴露尽可能少的细节</p>
<h3 id="继承">继承</h3>
<h3 id="多态">多态</h3>
<h2 id="封装-1">封装</h2>
<h3 id="封装隐藏了内部实现细节只暴露出接口">封装隐藏了内部实现细节，只暴露出接口</h3>
<h4 id="电灯对象">电灯对象</h4>
<p>高、低耦合</p>
<ul>
<li>
<p>你只访问他的“开关”接口，不关心内部的“电路”细节</p>
<pre><code> public static void main(String[] args) {
  Light light = new Light();
  light.turnOn();//低耦合

  Light light2 = new Light();
  light2.打开电路1();
  light2.打开电路2();
  light2.打开电路3();
  //高耦合,比低耦合更难扩展

  //Home类和Light类之间建立联系——&gt;耦合（让改变变得困难）
  //一方进行改变时，另一方也需要进行改变
    
  public class Light {
</code></pre>
<p>public void turnOn(){//接口
打开电路1();
打开电路2();
打开电路3();//细节</p>
<p>}
public void 打开电路1(){</p>
<p>}
public void 打开电路2(){</p>
<p>}
public void 打开电路3(){</p>
<p>}</p>
</li>
</ul>
<p>废弃后使用自动停止，不影响其他代码的运行</p>
<pre><code>public class Light {
@Deprecated
public void turnOn(){//接口
    打开电路1();
    打开电路2();
    打开电路3();//细节
    
}
public static void main(String[] args) {
    Light light = new Light();
</code></pre>
<p>light.<del>turnOn()</del>;//低耦合</p>
<h4 id="汽车">汽车</h4>
<ul>
<li>你只访问他的“方向盘”接口，不关心内部的细节</li>
<li>可以通过@Deprecated告知方法废弃，但不会有任何错误</li>
</ul>
<hr>
<pre><code>return gender.equals(&quot;M&quot;);
return Object.equals.(gender,&quot;M&quot;);
return &quot;M&quot;.equals(grnder);//保证gender是空指针，也不会抛出空指针异常，因为M永远不会是空指针
</code></pre>
<h3 id="不封装">不封装</h3>
<ul>
<li>暴露细节的结果就是无法变化</li>
<li>软件的演进例子：为原先的属性增加限制</li>
<li>软件的演进例子： 修改某些属性</li>
</ul>
<h2 id="封装的实现">封装的实现</h2>
<ul>
<li>外界只通过一个接口和里面进行交互，里面的实现细节用private 进行 构造器用private，保证外界不能够用new 直接进行对象的创建</li>
</ul>
<h3 id="访问控制符">访问控制符</h3>
<h6 id="包如同一个文件夹每个类在包里面只能在包中被看到包外是无法被看到的有一个接口和外界交互外界不能访问包里面的内容">包：如同一个文件夹，每个类在包里面，只能在包中被看到，包外是无法被看到的。有一个接口和外界交互，外界不能访问包里面的内容</h6>
<p><strong>包是没有嵌套包含关系的</strong></p>
<ul>
<li>public 任何人都能访问</li>
<li>protected 只有子类和同一个包的类可以访问（子类访问通过extend继承）<br>
同一个包的类可以访问是因为封装的边界是把包内和接口外相分离</li>
<li>package private <em>包级私有</em> 只有同一个包的类可以访问</li>
<li>private 只有自己可以访问</li>
<li>包级私有<br>
不加任何的访问限定符</li>
</ul>
<p><strong>只有在同一个包中的类才能看到，包外的类看不到里面</strong></p>
<h3 id="javabean约定">JavaBean约定</h3>
<ul>
<li>
<p>getter</p>
</li>
<li>
<p>setter</p>
</li>
<li>
<p>首字母大写</p>
<p>//非boolean属性 firstName
public String getFristName
public void setFristName</p>
<p>//boolean属性male
public boolean isMale()
pubilc void setMale(boolean male)</p>
</li>
</ul>
<h4 id="json">JSON</h4>
<ul>
<li>
<p>互联网前后段交换的一种格式，是序列化和反序列化的实现</p>
</li>
<li>
<p>将对象用字符串表示出来的一种方法</p>
</li>
<li>
<p>序列化serialization<br>
把一个对象变成一段字符串、一个字节流（序列化的对象）
【序列化Picture】</p>
</li>
<li>
<p>反序列化deserialize<br>
把字符串或字节流转换成一个的对象</p>
</li>
<li>
<p>FastJson API</p>
<p>public static void main(String[] args) {
Cat cat = new Cat(&ldquo;miao&rdquo;,true);
System.out.println(JSON.toJSONString(cat));//序列化
String s = &ldquo;{&quot;cute&quot;:true,&quot;name&quot;:&quot;miao&quot;}&quot;;
cat = JSON.parseObject(s,Cat.class);//反序列化
}</p>
</li>
<li>
<p>Json的读写关键在javaBean的getter和setter、is，并非是内部的属性（成员变量）</p>
</li>
<li>
<p>如果属性是null的话，就会自动忽略掉</p>
</li>
</ul>
<h2 id="设计模式实战工厂方法">设计模式实战：工厂方法</h2>
<p>注释有可能过时，通过方法名、变量名等方式让编译器能够读懂，使得代码更容易被阅读。</p>
<p>静态工厂：statci 返回要生产的对象 方法名<br>
<strong>（可以任意取，通过阅读可以得知信息）</strong></p>
<ul>
<li>使用静态工厂方法代替构造器</li>
<li>将构造器私有化</li>
<li>实际上就是封装</li>
</ul>
<h5 id="优点">优点：</h5>
<ol>
<li>
<p>方法有名字，可以让人从中得知方法的信息，且可以被编译器处理。注释是不会被编译器编译的，还存在过时的情况</p>
</li>
<li>
<p>不同于构造器，静态工厂方法不一定要创造一个新的对象，可以返回null或者之前创造的对象，使得</p>
<pre><code> Cat cat = new Cat();//构造器，创造实例对象。


 public static Cat newCuteCat(String name) {
 if (name == null){
     return new Cat（name,cute:true）;
 }//不需要创造一个对象，可以返回之前创造的构造器
</code></pre>
</li>
<li>
<p>可以返回返回类型的子类型，提高静态方法的因果性；而构造器并不可以</p>
<p>public class WhileCat extends Cat {</p>
<p>public WhileCat(String name, boolean cute) {
super(name, cute);
}
}
public static Cat newCuteCat(String name) {
if (name.contains(&ldquo;while&rdquo;)) {
return new WhileCat(name, true);
}</p>
</li>
<li>
<p>返回的对象可以变化，根据输入的参数动态决定选择返回的预先定义好的对象，节省时间且避免每次都要重新创建新的对象的内存占用。</p>
</li>
</ol>
<ul>
<li>
<p>可以返回一些动态的类，通过动态加载一些未来的类</p>
</li>
<li>
<p>并没有用new创造任何对象，而是返回true和flase这两个预先定义好的对象。不需要每次都创造对象</p>
<p>public class Cat {
private static final Cat INVALID_CAT = new Cat(&ldquo;Invalid cat&rdquo;,false);
//对象创建用来应对非法对象
}
public static Cat newCuteCat(String name) {</p>
<pre><code>  if (name == null || name.isEmpty()){
  //传进的参数不合法的时候，就能够返回预先定义好的对象，避免重新创建新的对象应对
      return INVALID_CAT;
  }
  return new Class.forName(&quot;FutureCat&quot;).newInstance();
</code></pre>
<p>}</p>
</li>
<li>
<p>静态工厂方法EG：<br>
Boolean.valueof
Integer.parseInt</p>
</li>
</ul>
<ol start="5">
<li>
<p>静态工厂返回的对象可以不存在（Java动态加载）</p>
<p>return new Class.forName(&ldquo;futureCat&rdquo;).newInstance();</p>
</li>
</ol>
<h5 id="缺点">缺点：</h5>
<ol>
<li>没有办法被子类化，不能被覆盖**（非构造器）**；但是构造器可以被子类调用</li>
<li>很难让开发者找到（名字）</li>
</ol>
<ul>
<li>使用静态工厂方法代替构造器</li>
</ul>
<p>表现出对外接口的状态</p>
<ul>
<li>将构造器私有化</li>
</ul>
<h2 id="类的访问限定符">类的访问限定符</h2>
<ul>
<li>public 所有人都可以访问</li>
<li>不加public，什么都不添加的话，就是包级私有（包提供的封装边界）</li>
<li>package private 同一个包的类可以访问</li>
<li>
<ul>
<li><strong>包之间是没有父子关系的</strong>（包之间没有任何关系）</li>
</ul>
</li>
<li>private static class InnerClass只能在同一个类中访问（也是封装的一种形式）</li>
<li>包级私有限定的是通过包名判断的，但是JVM有包名设置的限定，对于自定义的包含java在运行时是不被允许的</li>
<li>了解Java Platform Module System
模块化接口，使得包可以私有化，让内部包</li>
</ul>
<h5 id="包级私有破坏">包级私有破坏</h5>
<p><strong>创建一个名字一样的包在包里面创造一个类作为桥梁，然后return new出要访问的私有包的类。最后在Main调用就可以了</strong></p>
<pre><code>   Eg：https://github.com/hcsp/bypass-package-private/pull/29
</code></pre>
<h5 id="用中间类绕过包级私有的限制">用中间类绕过包级私有的限制</h5>
<h2 id="java模块系统简介">Java模块系统简介</h2>
<ul>
<li>JDK9的新功能，把包对外封装成模块module，提供更大范围的封装，包级私有的包就不会被破坏</li>
</ul>
<h2 id="封装的必要性">封装的必要性</h2>
<ul>
<li>软件的演进 —— 向外界暴露内部实现类的风险</li>
</ul>
<h2 id="扩展阅读">扩展阅读</h2>
<ul>
<li>
<p>JSON序列化/反序列化与JavaBean约定</p>
</li>
<li>
<p>setter的链式调用</p>
</li>
<li>
<p>builder 模式 Vs构造器</p>
</li>
<li>
<p>解决变量（参数）太多的问题</p>
</li>
<li>
<ul>
<li>构造器 :
Person person = new Person(firstName:&quot;&quot;,lastname:&quot;&quot;,address:&quot;&quot;,phone:123)</li>
</ul>
</li>
<li>
<ul>
<li>
<p>Builder：<br>
person = PersonBulider.aPerson()<br>
.withFirstName(&quot;&quot;)<br>
.withLastName(&quot;&quot;)<br>
.withAddress(&quot;&quot;);</p>
<p>public class UserBuilder {
// 请在这里使用builder模式建造User对象
// 所需的接口请参阅UserBuilderTest测试类
private String firstName;
private String lastName;
private String phoneNumber;
private String address;</p>
<p>//    private UserBuilder() {
//
//    }
//把private 改成public 以及 直接删除掉，都可以让UserBuilderTest实现，那么是否这个方法不需要存在？</p>
<p>public static UserBuilder anUser() {
return new UserBuilder();//提供静态空转的方法
}</p>
<p>public UserBuilder firstName(String firstName) {
this.firstName = firstName;
return this;
}</p>
<p>public UserBuilder lastName(String lastName) {
this.lastName = lastName;
return this;
}</p>
<p>public UserBuilder phoneNumber(String phoneNumber) {
this.phoneNumber = phoneNumber;
return this;
}</p>
<p>public UserBuilder address(String address) {
this.address = address;
return this;
}</p>
<pre><code>public User build() {
    return new User(firstName, lastName, phoneNumber, address);
    }
}
</code></pre>
</li>
</ul>
</li>
<li>
<p>builder 同样也可以设置默认值</p>
</li>
</ul>
<h2 id="书">书</h2>
<p>Effictive Java</p>
]]></content>
        </item>
        
        <item>
            <title>Java 面向对象初步</title>
            <link>https://procarihana.github.io/public/posts/java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%88%9D%E6%AD%A5/</link>
            <pubDate>Mon, 11 May 2020 17:18:01 +0800</pubDate>
            
            <guid>https://procarihana.github.io/public/posts/java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%88%9D%E6%AD%A5/</guid>
            <description>面向对象的三大特征 封装 优点：实现细节可以发生变化，只要接口不变，就不会对使用产生影响
继承 多态 封装 封装隐藏了内部实现细节，只暴露出接口 电灯对象   你只访问他的“开关”接口，不关心内部的“电路”细节
 public static void main(String[] args) { Light light = new Light(); light.turnOn();//低耦合 Light light2 = new Light(); light2.打开电路1(); light2.打开电路2(); light2.打开电路3(); //高耦合,比低耦合更难扩展 //Home类和Light类之间建立联系——&amp;gt;耦合（让改变变得困难） //一方进行改变时，另一方也需要进行改变 public class Light {  public void turnOn(){//接口 打开电路1(); 打开电路2(); 打开电路3();//细节
} public void 打开电路1(){
} public void 打开电路2(){
} public void 打开电路3(){
}
  废弃后使用自动停止，不影响其他代码的运行
public class Light { @Deprecated public void turnOn(){//接口 打开电路1(); 打开电路2(); 打开电路3();//细节 } public static void main(String[] args) { Light light = new Light();  light.</description>
            <content type="html"><![CDATA[<h2 id="面向对象的三大特征">面向对象的三大特征</h2>
<h3 id="封装">封装</h3>
<p>优点：实现细节可以发生变化，只要接口不变，就不会对使用产生影响</p>
<h3 id="继承">继承</h3>
<h3 id="多态">多态</h3>
<h2 id="封装-1">封装</h2>
<h3 id="封装隐藏了内部实现细节只暴露出接口">封装隐藏了内部实现细节，只暴露出接口</h3>
<h4 id="电灯对象">电灯对象</h4>
<ul>
<li>
<p>你只访问他的“开关”接口，不关心内部的“电路”细节</p>
<pre><code> public static void main(String[] args) {
  Light light = new Light();
  light.turnOn();//低耦合

  Light light2 = new Light();
  light2.打开电路1();
  light2.打开电路2();
  light2.打开电路3();
  //高耦合,比低耦合更难扩展

  //Home类和Light类之间建立联系——&gt;耦合（让改变变得困难）
  //一方进行改变时，另一方也需要进行改变
    
  public class Light {
</code></pre>
<p>public void turnOn(){//接口
打开电路1();
打开电路2();
打开电路3();//细节</p>
<p>}
public void 打开电路1(){</p>
<p>}
public void 打开电路2(){</p>
<p>}
public void 打开电路3(){</p>
<p>}</p>
</li>
</ul>
<p>废弃后使用自动停止，不影响其他代码的运行</p>
<pre><code>public class Light {
@Deprecated
public void turnOn(){//接口
    打开电路1();
    打开电路2();
    打开电路3();//细节
    
}
public static void main(String[] args) {
    Light light = new Light();
</code></pre>
<p>light.<del>turnOn()</del>;//低耦合</p>
<h4 id="汽车">汽车</h4>
<ul>
<li>
<p>你只访问他的“方向盘”接口，不关心内部的细节</p>
<p>return gender.equals(&ldquo;M&rdquo;);
return Object.equals.(gender,&ldquo;M&rdquo;);//保证gender是空指针，也不会抛出空指针异常
return &ldquo;M&rdquo;.equals(grnder);</p>
</li>
</ul>
<h3 id="不封装">不封装</h3>
<ul>
<li>暴露细节的结果就是无法变化</li>
<li>软件的演进例子：为原先的属性增加限制</li>
<li>软件的演进例子： 修改某些属性</li>
</ul>
<h2 id="封装的实现">封装的实现</h2>
<h3 id="访问控制符">访问控制符</h3>
<h6 id="包如同一个文件夹每个类在包里面只能在包中被看到包外是无法被看到的有一个接口和外界交互外界不能访问包里面的内容">包：如同一个文件夹，每个类在包里面，只能在包中被看到，包外是无法被看到的。有一个接口和外界交互，外界不能访问包里面的内容</h6>
<ul>
<li>public 任何人都能访问</li>
<li>protected 只有子类可以访问和同一个包的可以访问（子类访问通过extend）</li>
<li>package private 只有同一个包的类可以访问</li>
<li>private 只有自己可以访问</li>
</ul>
<h3 id="javabean约定">JavaBean约定</h3>
<ul>
<li>getter</li>
<li>setter</li>
</ul>
<h2 id="设计模式实战工厂方法">设计模式实战：工厂方法</h2>
<ul>
<li>使用静态工厂方法代替构造器</li>
<li>将构造器私有化</li>
</ul>
<h2 id="类的访问限定符">类的访问限定符</h2>
<ul>
<li>public 任何访问</li>
<li>package private 同一个包的类可以访问</li>
<li>
<ul>
<li>包之间是没有父子关系的</li>
</ul>
</li>
<li>（包之间没有任何关系）</li>
<li>private inner class 只能在同一个类中访问</li>
<li>了解Java Platform Module System</li>
</ul>
<h3 id="用中间类绕过包级私有的限制">用中间类绕过包级私有的限制</h3>
<h2 id="封装的必要性">封装的必要性</h2>
<ul>
<li>软件的演进 —— 向外界暴露内部实现类的风险</li>
</ul>
<h2 id="扩展阅读">扩展阅读</h2>
<ul>
<li>JSON序列化/反序列化与JavaBean约定</li>
<li>setter的链式调用</li>
<li>builder 模式</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Java面向对象系统基础</title>
            <link>https://procarihana.github.io/public/posts/java%E5%AF%B9%E8%B1%A1%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/</link>
            <pubDate>Thu, 07 May 2020 16:40:59 +0800</pubDate>
            
            <guid>https://procarihana.github.io/public/posts/java%E5%AF%B9%E8%B1%A1%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/</guid>
            <description>对象（引用类型）  对象是数据和行为的集合（主观能动性） 一切使用new运算符创建出来的都是对象   new Object（）     特例： Integer i=2/String s= &amp;ldquo;2&amp;rdquo; 自动装拆箱的时候后会自动new 出一个新的对象     特例：new Object[]    对象组成？  所有的对象都在堆上分配 每个对象都包含⾃⼰的数据（成员变量）   初始化
声明int age = 0; 和int age;是相同的，因为默认初始化的值为0 【整数类型】
String 等引用类型的为null   原⽣类型的成员 引⽤类型的成员  栈、堆 栈：方法栈，main执行后需要用到的方法都会放到方法栈里面执行 堆：存放对象
对象的构造函数  新建对象的唯⼀途径 在堆上分配空间 执⾏必要的初始化⼯作 执⾏构造器函数 如果没有任何构造器，编译器会偷偷摸摸帮你⽣成⼀个  对象的方法  数据：有什么 方法：做什么  方法的重载(overload)  重载（overload）与重写/覆盖（override）    重载</description>
            <content type="html"><![CDATA[<h4 id="对象引用类型">对象（引用类型）</h4>
<ul>
<li>对象是数据和行为的集合（主观能动性）</li>
<li>一切使用new运算符创建出来的都是对象</li>
<li>
<ul>
<li>new Object（）</li>
</ul>
</li>
<li>
<ul>
<li>特例： Integer  i=2/String s= &ldquo;2&rdquo; 自动装拆箱的时候后会自动new 出一个新的对象</li>
</ul>
</li>
<li>
<ul>
<li>特例：new Object[]</li>
</ul>
</li>
</ul>
<h4 id="对象组成">对象组成？</h4>
<ul>
<li>所有的对象都在堆上分配</li>
<li>每个对象都包含⾃⼰的数据（成员变量）</li>
</ul>
<ol>
<li>初始化<br>
声明int age = 0; 和int age;是相同的，因为默认初始化的值为0 <em>【整数类型】</em><br>
String 等引用类型的为null</li>
</ol>
<ul>
<li>原⽣类型的成员</li>
<li>引⽤类型的成员</li>
</ul>
<h5 id="栈堆">栈、堆</h5>
<p>栈：方法栈，main执行后需要用到的方法都会放到方法栈里面执行
堆：存放对象</p>
<h4 id="对象的构造函数">对象的构造函数</h4>
<ul>
<li>新建对象的唯⼀途径</li>
<li>在堆上分配空间</li>
<li>执⾏必要的初始化⼯作</li>
<li>执⾏构造器函数</li>
<li>如果没有任何构造器，编译器会偷偷摸摸帮你⽣成⼀个</li>
</ul>
<h4 id="对象的方法">对象的方法</h4>
<ul>
<li>数据：有什么</li>
<li>方法：做什么</li>
</ul>
<h4 id="方法的重载overload">方法的重载(overload)</h4>
<ul>
<li>重载（overload）与重写/覆盖（override）</li>
</ul>
<ol>
<li>
<p>重载<br>
方法名字相同但是参数不相同</p>
<pre><code> public class Cat{
  void printName(S){
          
   }
       
    void printName(tring s){
    }
}
</code></pre>
</li>
</ol>
<ul>
<li>
<p>如何区分同名的不同重载⽅法？</p>
</li>
<li>
<p>根据类型<br>
调用时通过不同的参数区分</p>
<pre><code>  cat.printName();
  cat.printName(&quot;null&quot;);
</code></pre>
</li>
<li>
<p>隐式转换
自动匹配最合适的，按照转换的优先顺序</p>
<pre><code>  public static void main(String agrs[]){
   Cat cat = new Cat();
      cat.s(1);
  }
  void s(int i){
       
  }//最优先
  void s(Integer i){
    
  }//其次
  void s(Number i){
    
  }
  void s(Object i){
    
  }
</code></pre>
</li>
<li>
<p>类型最优先匹配（如果匹配多个，如null 的话，可以为null进行强制类型转换，选择最优先的）</p>
</li>
<li>
<p>不能仅仅重载返回值<br>
因为方法的区别是通过方法名和变量区分的，且方法调用的时候是忽略返回值的，所以即使两个方法的名字和变量相同但返回值不一样，调用的时候会产生冲突，在编译的时候无法通过。但是运行字节码的时候是允许的。</p>
</li>
<li>
<p>不能为⽅法提供默认值<br>
但是可以通过重载的方法实现</p>
<pre><code>      public static void main(String[] agrs){
      Cat cat = new Cat();
      cat.meow();
      cat.meow(&quot;mimi&quot;);
      }

      public void meow(){
      meow(&quot;喵&quot;)；
  }
  public void meow(String value){
      System.out.print(value);
  }
</code></pre>
</li>
</ul>
<h4 id="构造器的重载">构造器的重载</h4>
<ul>
<li>
<p>this()<br>
没有参数构造器可以通过重载，从而能够获得默认值</p>
</li>
<li>
<p>实例：HashMap的构造器重载</p>
<pre><code>//创建一只默认的猫，1岁，名叫张三
  Cat(){
      this(&quot;张三&quot;)；
  }
  //创建一支默认的猫，1岁，名叫name指定的名字
  Cat(String name){
   this(1,name);
  }
  //创建age和name指定的猫
  Cat (int age,String name){
      this.age = age;
      this.name = name;
  }
  public static void main(String[] agrs){
      new Cat();
  }
</code></pre>
</li>
</ul>
<h4 id="对象的初始化">对象的初始化</h4>
<ul>
<li>必要的初始化⼯作</li>
<li>静态成员的初始化</li>
<li>静态初始化块</li>
<li>成员的初始化</li>
<li>初始化块 {}</li>
<li>继续断点调试⼤法检查初始化顺序</li>
</ul>
<h4 id="对象的命周期">对象的⽣命周期</h4>
<ul>
<li>如果⼀直新建对象，内存会不会爆？<br>
可能不会</li>
<li>那对象的内存什么时候被回收？<br>
谁也不知道</li>
<li>对象的内存如何被回收？<br>
不⽤管，GC垃圾回收器帮你⼲</li>
<li>JVM怎么知道哪个对象没有被⽤到？</li>
<li>通过引⽤链（GC Roots）
沿着GC Roots 可达的数据都是活对象，除此以外的都是垃圾
但是没有被引用得不一定会被回收，取决于当前空间</li>
</ul>
<h4 id="数组特殊的对象">数组——特殊的对象</h4>
<ul>
<li>数组类是什么？为什么我从来没有⻅过？</li>
<li>JVM为数组提供了特殊的处理⽅法</li>
<li>数组只有两个操作：[]与length的⻓度不可变</li>
</ul>
<h4 id="tip">Tip</h4>
<ol>
<li>如果在实行初始化的过程中调用方法的话，方法就会先于构造器执行，一个残缺的对象执行方法是一个不安全的行为</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Java的控制流</title>
            <link>https://procarihana.github.io/public/posts/java%E7%9A%84%E6%8E%A7%E5%88%B6%E6%B5%81/</link>
            <pubDate>Wed, 06 May 2020 21:05:25 +0800</pubDate>
            
            <guid>https://procarihana.github.io/public/posts/java%E7%9A%84%E6%8E%A7%E5%88%B6%E6%B5%81/</guid>
            <description>控制流 控制流：方法调用 方法调用就是一个方法栈，每当开始一个新的方法调用的时候就会开启一个方法栈的栈针，方法调用之后方法针会被销毁。当有新的方法调用的时候就会开始新一轮的方法栈，循环往复。
while与 do while 循环   while（返回boolean语句)
{
……
}
  do {无论真假就先执行一遍}
while{(返回 boolean语句）;}
  控制流：for 循环   fori
 for（int i = 0;//任何语句，包括空语句 1️⃣ i &amp;lt; 100;//返回boolean的语句，包括空语句 2️⃣ i++){//任何语句，包括空语句） 4️⃣ System.out.println(i); //3️⃣ }    for each
for（String s :Iterable）{ …… }
  对象能够实现Iterabie接口（可迭代）
List&amp;lt;String&amp;gt; list = Arrays.asList(&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;); //遍历列表，把元素拿出来 for (int i = ;i&amp;lt;list.size(); i++){ System.out.println(list.get(i)); } == for(String element : list){ System.</description>
            <content type="html"><![CDATA[<h2 id="控制流">控制流</h2>
<h2 id="控制流方法调用">控制流：方法调用</h2>
<p>方法调用就是一个方法栈，每当开始一个新的方法调用的时候就会开启一个方法栈的栈针，方法调用之后方法针会被销毁。当有新的方法调用的时候就会开始新一轮的方法栈，循环往复。</p>
<h2 id="while与-do-while-循环">while与 do while 循环</h2>
<ul>
<li>
<p>while（返回boolean语句)<br>
{</p>
<p>……</p>
<p>}</p>
</li>
<li>
<p>do {<strong>无论真假就先执行一遍</strong>}<br>
while{(返回 boolean语句）;}</p>
</li>
</ul>
<h2 id="控制流for-循环">控制流：for 循环</h2>
<ul>
<li>
<p>fori</p>
<pre><code>  for（int i = 0;//任何语句，包括空语句 1️⃣
       i &lt; 100;//返回boolean的语句，包括空语句  2️⃣
       i++){//任何语句，包括空语句） 4️⃣
         System.out.println(i);  //3️⃣
       }
</code></pre>
</li>
<li>
<p>for each</p>
<p>for（String s :Iterable<!-- raw HTML omitted -->）{
……
}</p>
</li>
</ul>
<p>对象能够实现Iterabie接口（可迭代）</p>
<pre><code>List&lt;String&gt; list = Arrays.asList(&quot;1&quot;,&quot;2&quot;);
//遍历列表，把元素拿出来
     for (int i = ;i&lt;list.size(); i++){
         System.out.println(list.get(i));
    }
    
    ==
    
     for(String element : list){
    System.out.println(element);
    } 

 
 for ( int i = 0 ; i&lt; list.size; i++){
     System.out.println(element);
 }
</code></pre>
<p>统计一个给定的字符串中，大写英文字母（A,B,C,&hellip;,Z）出现的次数。</p>
<pre><code>    public static int  countUpperCaseLetters(String str) {
    int a = 0;
    for(char ch : str.toCharArray()){
        if(ch &gt;='A' &amp;&amp; ch&lt;='Z'){
            ++a;
        }
    }
    return a;
}
public static void main(String[] args) {
    countUpperCaseLetters(&quot;AaBbCc1234ABC&quot;);
}
</code></pre>
<p>}</p>
<h2 id="改变循环的流程breakcontinue">改变循环的流程：break/continue</h2>
<ul>
<li>
<p>braek;立即结束包裹当前braek的第一层循环</p>
</li>
<li>
<p>找到结果后，打破当前循环，结束循环。</p>
<pre><code>  public static boolean find(List&lt;Integer&gt; list,int value){
  boolean exist = false;
  for (Integer element :list){
      if(element == value){
          exist = true;
          break;     //break 包裹这 for 的循环 --&gt; 结束的是for循环
      }
  }
  return exist;
  }
    
  public static void main(String[] args) throws IOException {
  List&lt;Integer&gt; list1 = Arrays.asList(1,2,3);
  find(list1,2);
  find(list1,2);

 }
</code></pre>
</li>
<li>
<p>continue;跳过包裹当前continue的第一层循环中的其余语句，继续下一次循环</p>
</li>
<li>
<p>如果if里面的语句满足，则跳过for剩下的未执行的语句，直接调回for的循环条件执行循环</p>
<pre><code>//只打印list重的奇数元素
public static void printOdd(List&lt;Integer&gt; list){
  for (int i= 0; i&lt; list.size();i++){
       if (list.get(i) % 2 ==0 ){
           continue;//continue包裹的第一层循环是for --&gt; 执行完第一次循环之后，就进入if
       } System.out.println(list.get(i));
  }
   }
  public static void main(String[] args) throws IOException {
  printOdd(Arrays.asList(1,4,2,56,-1,3,12));
    
    
   public static void printOddNumbersBetween(int start, int end) {


    for (int i = start; i &lt;= end; i++) {
      if (i % 2 != 0) {
          System.out.print(i + &quot;,&quot;);
     }
 
  List&lt;Integer&gt; list = new  ArrayList&lt;&gt;();
  List&lt;Integer&gt; list1 = new  ArrayList&lt;&gt;();
  for (int i = start; i &lt;= end; i++) {
      list.add(i);
  }
  for (int i = 0; i &lt;list.size();i++) {
      if (list.get(i) % 2 != 0) {
          list1.add(list.get(i));
          continue;
      }

  }System.out.println(list1);
}
  public static void main(String[] args) {
  printOddNumbersBetween(1, 5);
  printOddNumbersBetween(-2, 2);
  }
 }
</code></pre>
</li>
<li>
<p>break label</p>
</li>
</ul>
<p>label：标签，在程序的某得地方设置标签，然后跳转到标签处，实现程序控制流程转移</p>
<ul>
<li>
<p>lable 要和任意语句进行搭配</p>
<pre><code>   //不报错：任意字符（&quot;http&quot;） + &quot;：&quot; ———&gt;lable ； &quot;//&quot;表示开始注释
  http://google.com
    
   public static void main(String[] args)  {
      int i = 100;
      while (i --&gt; 0){//(i--)&gt;0
          System.out.println(i);
  }
    
    
  public static void main(String[] args)throws IOException{
  最外层的循环:
     for (int i=0;i &lt;2;i++){
         for (int j = 0; j&lt; 1;j++){
             break 最外层的循环;//通过label，break多层循环
         }

     }
     for (int i=0;i &lt;2;i++){
         for (int j = 0; j&lt; 1;j++){
             break;//--&gt;只能够解决当前的for，不能够解决所有的for
         }
      }
</code></pre>
</li>
</ul>
<h2 id="控制流switch">控制流：switch</h2>
<h3 id="可以switch的东西">可以switch的东西</h3>
<ul>
<li>
<p>int / long / char / byte / short(所有的<strong>整形</strong>数，而不是<em>整数</em>，不是<em>浮点数</em>)</p>
</li>
<li>
<p>enum 枚举
只能选取固定的值，例如:Weekday、colour</p>
<p>private enum WeekDay{
MONDAY,TUESDAY,//……，SUNDAY
}</p>
<pre><code>  enum Signal{    
  GREEN, YELLOW, RED  
  }  
   public class TrafficLight {         
   Signal color = Signal.RED;
   public void change() {  
   switch (color) {  
   color = Signal.GREEN;  
   break;  
   color = Signal.RED;  
  case GREEN:
  color = Signal.YELLOW;  
  break;  
      
      }  
  }  
}
</code></pre>
</li>
<li>
<p>String （JDK7+）</p>
<pre><code>int i = new Random().nextInt(5);
   switch (i){
       case 0:
           System.out.println(i);break;
       case 1:
           System.out.println(i);break;
       case 2:
           System.out.println(i);break;
       case 3:
           System.out.println(i);break;
       case 4:
           System.out.println(i);break;
           default:
               System.out.println(i);break;
               //没有添加break的情况下执行完一个语句之后，会紧接着执行下一个case（穿透）
</code></pre>
</li>
<li>
<p>声明的作用域在一个{}，不同的{}可以声明相同的变量而互不相冲</p>
<pre><code>//如果i是A/B/C, 打印ABC
     //否则打印DE
     int i = (char)('A' + new Random().nextInt(5));
     switch (i){
         case 'A':
         case 'B':
         case 'C':{
             String s = &quot;ABC&quot;;
             System.out.println(s);}
             break;
             default:
                 String s = &quot;DE&quot; ;
                 System.out.println(s);
                 break;
</code></pre>
</li>
</ul>
<h2 id="控制流嵌套">控制流：嵌套</h2>
<ul>
<li>
<p>所有调用都可以嵌套，但是方法声明不能够嵌套</p>
<pre><code>                 while (true){
                     for (int j = 0; j &lt; 100 ; j++) {
                         List&lt;String&gt; l = null;
                         for (String e : l){
                             switch (i){

                             }

                         }

                     }
</code></pre>
</li>
</ul>
<p>穿透</p>
<pre><code>   public static boolean isLeapYear(int year) {
     if (year % 100 == 0) {
         if (year % 400 == 0) {
             return true;
         } else {
             return false;
         }
     } else if (year % 4 == 0) {
             return true;
     } else {
         return false;
     }
     
    // or
     return year % 100 == 0 ? ( year % 400 == 0 ? true : false ) : (year % 4 == 0 ? true :false );
</code></pre>
<p>计算质数</p>
<pre><code>     public static int howManyPrimeNumbers(int n) {
    int num = 0;
    for (int n1 = 2; n1 &lt; n; n1 ++){
            if (isPrimeNumber(n1)){
                num++;
        }
    }
    return num;
    }
public static boolean isPrimeNumber(int n1) {
    for (int i = 2; i &lt;= Math.sqrt(n1) + 1; i++) {
        if (n1 % i == 0 &amp;&amp; n1 !=i ) {
           return false;
        }
    }
  return true;
}
</code></pre>
<p>给定一个二维数组，返回其主对角线（从左上到右下）元素之和。</p>
<p><a href="https://blog.csdn.net/hester_hester/article/details/77925927">https://blog.csdn.net/hester_hester/article/details/77925927</a></p>
<pre><code>public static int diagonalSum(int[][] matrix) {
    int N = matrix.length;
    int result = 0;
    for (int i = 0;i &lt; N;i++){
        result += matrix[i][i];
    }return result;

}</code></pre>
]]></content>
        </item>
        
        <item>
            <title>爬虫项目</title>
            <link>https://procarihana.github.io/public/posts/%E7%88%AC%E8%99%AB%E9%A1%B9%E7%9B%AE/</link>
            <pubDate>Wed, 06 May 2020 17:07:22 +0800</pubDate>
            
            <guid>https://procarihana.github.io/public/posts/%E7%88%AC%E8%99%AB%E9%A1%B9%E7%9B%AE/</guid>
            <description>原则  使用GitHub+主干/分支模型进行开发 禁止直接push master 所有的变更通过PR进行 自动化代码质量检查+测试 Checkstyle/SpotBugs 最基本的自动化测试覆盖 一切工作自动化 规范化提交流程   创建仓库流程   Github -new
  建立新项目 newBranch 的时候选Apache License 2.0
   Mvn archetype     IDEA - new     copy （cp -r ～/* .）    .gitigonre
  git commit &amp;ndash;amend 就可以把这一次的commit和上一次的合并起来
   记得要把.iml 放进（vi .gitignore）： *.iml和target/(放在最后一行就好) 更改pom 里面的groundId，artifactId cp -r ～/.circleci . (因为之前cp ～* 的时候并不会cp到.</description>
            <content type="html"><![CDATA[<h4 id="原则">原则</h4>
<ul>
<li>使用GitHub+主干/分支模型进行开发</li>
<li>禁止直接push master</li>
<li>所有的变更通过PR进行</li>
<li>自动化代码质量检查+测试</li>
<li>Checkstyle/SpotBugs</li>
<li>最基本的自动化测试覆盖</li>
<li>一切工作自动化</li>
<li>规范化提交流程</li>
</ul>
<hr>
<h4 id="创建仓库流程">创建仓库流程</h4>
<ul>
<li>
<p>Github -new</p>
</li>
<li>
<p>建立新项目
newBranch 的时候选Apache License 2.0</p>
</li>
<li>
<ul>
<li>Mvn archetype</li>
</ul>
</li>
<li>
<ul>
<li>IDEA - new</li>
</ul>
</li>
<li>
<ul>
<li>copy （cp -r ～/* .）</li>
</ul>
</li>
<li>
<p>.gitigonre</p>
</li>
<li>
<p>git commit &ndash;amend 就可以把这一次的commit和上一次的合并起来</p>
</li>
</ul>
<ol>
<li><strong>记得要把<code>.iml</code> 放进（vi .gitignore）： <code>*.iml</code>和<code>target/</code>(放在最后一行就好)</strong></li>
<li>更改pom 里面的groundId，artifactId</li>
<li>cp -r ～/.circleci . (因为之前cp ～* 的时候并不会cp到<code>.~</code>的文件)，保留checkstyle.xml以及congif.yml[自动化测试]</li>
<li><code>.idea/</code> 不能够提交（在最后完成项目提交时）</li>
</ol>
<ul>
<li>README</li>
</ul>
<hr>
<h4 id="项目的设计流程-自顶向下">项目的设计流程-自顶向下</h4>
<ul>
<li>多人协作<br>
使用分支可以同时进行不同的功能，且互不影响</li>
<li>模块化</li>
<li>
<ul>
<li>各模块间职责明确，界限清晰</li>
</ul>
</li>
<li>
<ul>
<li>基本的文档</li>
</ul>
</li>
<li>
<ul>
<li>基本的接口</li>
</ul>
</li>
<li>小步提交</li>
<li>
<ul>
<li>大的变更更难以review</li>
</ul>
</li>
<li>
<ul>
<li>大的变更冲突更加棘手</li>
</ul>
</li>
</ul>
<hr>
<h4 id="项目的演进可扩展行">项目的演进：可扩展行</h4>
<ul>
<li>单线程-&gt;多线程</li>
<li>console -&gt; H2 database</li>
<li>H2 database -&gt;Elasticsearch</li>
</ul>
<h4 id="爬虫">爬虫</h4>
<ul>
<li>新闻网站反爬比较少</li>
<li>手机网页更容易爬</li>
</ul>
<h4 id="git-push-错误的文件">git push 错误的文件</h4>
<ul>
<li>在分支上操作</li>
</ul>
<ol>
<li>git reset HEAD~1  把提交回滚到前1/2……各</li>
<li>把不想提交的放进 vi .gitignore 里（.idea/）</li>
<li>git add .</li>
<li>git commit 后就会出现分支</li>
</ol>
<ul>
<li>以master的身份提交</li>
</ul>
<ol>
<li>通过git log 查看刚才提交的提交的ID</li>
<li>git revert 撤销刚才的提交（但是刚才的提交就会消除）</li>
</ol>
<ul>
<li>在主干上直接把多余的文件删掉</li>
<li>只要没有push，所有行为都只有自己能够看到</li>
</ul>
<h4 id="commit-massage">commit massage</h4>
<ul>
<li>先写一行简短的总结</li>
<li>详细总结每行不要超过72word</li>
</ul>
<hr>
<h3 id="项目">项目</h3>
<ul>
<li>爬去新浪新闻页，做一个真正的爬虫</li>
<li>使用数据库储存进行数据分析</li>
<li>随着数据量的增长，前一到ES</li>
<li>做一个简单的“新闻搜索引擎”</li>
</ul>
<h5 id="算法">算法</h5>
<ul>
<li>从一个节点遍历所有节点</li>
<li>广度优先 BFS 从上到下，从左到右，1层-&gt;2层-&gt;3……<br>
队列数据结构、JDK的队列实现</li>
<li>深度优先 1-&gt;2-&gt;4…… 从左到右</li>
</ul>
<h4 id="流程">流程</h4>
<ol>
<li>从链接池里拿一个链接</li>
<li>判断链接是否处理</li>
<li>判断链接是否需要</li>
<li>处理</li>
</ol>
<ul>
<li>通过Jsoup获得HTML里面的内容</li>
<li>从池子里删除处理过的链接</li>
</ul>
<ol start="5">
<li>把新得到的链接放入链接池</li>
<li>如果是新闻页面的话储存</li>
<li>进入下一个循环</li>
<li>建立H2数据库</li>
</ol>
<ul>
<li>
<p>LINKS_TO_BE_PROCESSED</p>
</li>
<li>
<p>LINKS_ALREADY_PROCESSED</p>
</li>
<li>
<p>NEWS</p>
</li>
<li>
<p>ID</p>
</li>
<li>
<p>TITLE</p>
</li>
<li>
<p>CONTENT</p>
</li>
<li>
<p>URL</p>
</li>
<li>
<p>CREATED_AT</p>
</li>
<li>
<p>MODIFIED_AT</p>
</li>
</ul>
<h4 id="建立h2数据库">建立H2数据库</h4>
<ol>
<li>添加H2依赖</li>
<li>URL “”+/文件路径/数据库的文件名</li>
<li>creat table LINKS_TO_BE_PROCESSED{link varchar (100);}</li>
<li>creat table nws(id bigint primary_key auto_increment,title text,content text,url varchar(100),creat_at timestamp,modified_at timestamp)</li>
<li>insert into links_to_be_processed(link)values(&lsquo;LINK&rsquo;) //设置起始的Link</li>
</ol>
<h4 id="sql数据类型">sql数据类型</h4>
<ul>
<li>varchar（n）可变长度字符串，最多为8,000字符</li>
<li>varchar（max）可变长度字符串，最多为1,073,741,824</li>
<li>text 可变长度的字符串，最多2GB文本数据(适合储存新闻)</li>
<li>nchar 固定长度的Unicode字符串。最多4，000个字符</li>
</ul>
<h4 id="flyaway">flyaway</h4>
<ul>
<li>数据库在使用的时候会不断变更，有不同的版本，flyaway可以储存数据库不同的版本，从而可以变更不同版本的<strong>结构</strong></li>
<li>flyaway需要在插件的地方修改URL，添加Username和password</li>
<li>即使数据库删掉也可以快速回复结构</li>
</ul>
<h4 id="orm-object-relation-mapping-对象关系数据库">ORM Object Relation Mapping 对象关系数据库</h4>
<ul>
<li>通过select 语句把表格里面的项目变成对象，</li>
<li></li>
</ul>
<h4 id="tips">Tips</h4>
<ol>
<li>Arraylist 从尾部删除更有效率（sive-1）。因为删除第一个元素之后，后面所有的元素都要向前移动一位。</li>
<li>linkPool.remove 删除指定位置的链接后返回被删除的链接</li>
<li>线程卡住的时候可以通过<code>jps</code>查看当前正在运行的线程</li>
<li>链接显示为&rdquo;//……&rdquo; 的话，为当前的链接，需要手动添加&quot;https&quot;+link 进行识别</li>
<li>数据库的用户名和密码最好是使用final常量去声明</li>
<li>想要关闭代码检查findbugs的错误可以通过引入包解决。在相应的地方通过注释SuppressFBWarnings（&ldquo;DMI_CONSTANT_DB_PASSWORD&rdquo;）</li>
<li>如果存在无法关闭的情况，可以通过final强行关闭</li>
<li>try with resoure会自动设置关闭。try（需要声明能close的变量）</li>
<li>HTML是没有换行符的，所以爬虫的时候是爬每一各P元素，加一个换行来分隔</li>
<li>static 方法是不能够访问非static 成员的，static main 才可以运行， 非static 的main 只是一个普通的方法，不能够被运行</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>IDEAMaven调试器的基本使用</title>
            <link>https://procarihana.github.io/public/posts/ideamaven%E8%B0%83%E8%AF%95%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
            <pubDate>Wed, 06 May 2020 17:06:17 +0800</pubDate>
            
            <guid>https://procarihana.github.io/public/posts/ideamaven%E8%B0%83%E8%AF%95%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
            <description>SpotBugs  Maven 生命周期
设置生命周期后的Maven会在相应的阶段执行 Picture 设置 生命周期对应执行的工作需要绑定插件进行设置   complie —— goal ——&amp;gt; maven-compilen-plugin test —— goal ——&amp;gt; surefire 测试插件 verlfy —— goal ——&amp;gt; checkstyle（非核心插件可以绑定到任何阶段  </description>
            <content type="html"><![CDATA[<h4 id="spotbugs">SpotBugs</h4>
<ul>
<li>Maven 生命周期<br>
设置生命周期后的Maven会在相应的阶段执行
Picture 设置</li>
<li>生命周期对应执行的工作需要绑定插件进行设置</li>
</ul>
<ol>
<li>complie —— goal ——&gt; maven-compilen-plugin</li>
<li>test —— goal ——&gt; surefire 测试插件</li>
<li>verlfy —— goal ——&gt; checkstyle（非核心插件可以绑定到任何阶段</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Java的运算系统</title>
            <link>https://procarihana.github.io/public/posts/java%E7%9A%84%E8%BF%90%E7%AE%97%E7%B3%BB%E7%BB%9F/</link>
            <pubDate>Fri, 01 May 2020 16:42:24 +0800</pubDate>
            
            <guid>https://procarihana.github.io/public/posts/java%E7%9A%84%E8%BF%90%E7%AE%97%E7%B3%BB%E7%BB%9F/</guid>
            <description>基本运算   /
int b = 5/2; &amp;ndash;&amp;gt;结果为 &amp;lsquo;2&amp;rsquo;（地板除）
  取余运算
5/2=2……1
System.out.println(9 % 5);——&amp;gt;2 System.out.println(-9 % 5);——&amp;gt;-2(余数)      判断奇偶
通过取余是否为零完成
//判断一个整数是不是奇数 public static boolean isOdd(int number){ return number % 2 != 0; }    运算符
    += ，-= ，*=，/=
Eg：a+=2 | a = a+2
  += a +=3 ==&amp;gt; a = a + 3
  -= a -=3 ==&amp;gt;a - e</description>
            <content type="html"><![CDATA[<h4 id="基本运算">基本运算</h4>
<ul>
<li>
<p>/</p>
<p>int b = 5/2;
&ndash;&gt;结果为 &lsquo;2&rsquo;（地板除）</p>
</li>
<li>
<p>取余运算</p>
<p>5/2=2……1</p>
<pre><code>System.out.println(9 % 5);——&gt;2
System.out.println(-9 % 5);——&gt;-2(余数)
</code></pre>
</li>
</ul>
<ol>
<li>
<p>判断奇偶<br>
通过取余是否为零完成</p>
<pre><code>//判断一个整数是不是奇数
  public static boolean isOdd(int number){
      return number % 2 != 0;
}
</code></pre>
</li>
<li>
<p>运算符</p>
</li>
</ol>
<ul>
<li>
<p>+= ，-= ，*=，/=<br>
<strong>Eg：a+=2 | a = a+2</strong></p>
</li>
<li>
<p>+= <br>
a +=3  ==&gt; a = a + 3</p>
</li>
<li>
<p>-= <br>
a -=3  ==&gt;a - e</p>
</li>
<li>
<p>%=    a
a %=3  ==&gt;a % 3</p>
</li>
<li>
<p>二元一次开根Eg</p>
<pre><code>   public static double[] calculate(int a, int b, int c) {
     double d = b * b - 4 * a * c;
     if (d &gt; 0){
         double root1 = ((-b + Math.sqrt(d)) / 2 * a);
         double root2 = ((-b - Math.sqrt(d)) / 2 * a);
         return new double[]{root1,root2};
        }else if(d == 0) {
        double root = ((-b + Math.sqrt(d)) / 2 * a);
          return new double[]{root};
   }else if (d &lt; 0){
       return new double[]{};
   }
  return null;
</code></pre>
</li>
</ul>
<ol start="3">
<li>自增自减 i++，i&ndash;,++i,&ndash;i</li>
</ol>
<ul>
<li>
<p>i++ | i=i+1 | i+= 1</p>
<pre><code>    i++;  ==&gt; i=i+1/ i+=1
          1、i作为表达式的值 ==&gt;System.out.println(i++);==&gt;0
          
          2、i = i + 1（a+=）
            i = 1
</code></pre>
<p>++i; ==&gt; 1、b = b + 1</p>
<pre><code>        2、把结果作为表达式的值 ==&gt;System.out.println(i++);==&gt;1
</code></pre>
</li>
</ul>
<hr>
<ul>
<li>
<p>i++ vs ++i</p>
<pre><code>public static void printNumberTo10(int number) {
   while (true) {
       System.out.println(number++);
       if (number &gt; 10) {
              return;
       }
   }
 } // ——&gt; 包括number本身             
</code></pre>
</li>
</ul>
<hr>
<pre><code>    i = 0；
    x = 0;
    System.out.print(i++);
    System.out.print(++x);
        result: i++ = 0,i = 1;
                ++x = 1,x = 1;
</code></pre>
<ol start="4">
<li>比较运算符</li>
</ol>
<ul>
<li>
<p>结果是一个布尔值</p>
<pre><code>   Eg：
   System.out.println(2 == 1);  ==&gt; true
   System.out.println(2 &gt; 1);  ==&gt; false
</code></pre>
</li>
</ul>
<ol start="5">
<li>逻辑运算</li>
</ol>
<ul>
<li>&amp;&amp; <strong>与：只要有一个是假的就都是假的</strong></li>
<li>|| <strong>或：只要有一个是真的就都是真的</strong></li>
<li>！非（相反）</li>
<li>短路</li>
</ul>
<p>或：左侧结果是真的，后面的结果就会自动忽略掉（不会影响结果）
与：左侧结果是假的……</p>
<pre><code>  Boolean config = getconfig()
    if (config != null &amp;&amp; config) {
        /*config 的三种可能
          1: true -&gt; true
          2: false -&gt; false
        */3: null -&gt; false
    }
   public static Boolean getconfig(){
    //可能返回ture/false/null
    }
</code></pre>
<p><strong>Eg：装拆箱的时候，对象为null的时候拆箱就会出现空指针异常，可以通过先判断是否为null来避免，用&amp;&amp;进行逻辑运算，当为null的时候直接结束运算。</strong></p>
<ol start="6">
<li>三元运算符 ?:</li>
</ol>
<ul>
<li>
<p>一元：int a = 1;  a++</p>
</li>
<li>
<p>二元：a = a + 1; 9 % 5</p>
</li>
<li>
<p>三元运算嵌套</p>
<pre><code>   //当 a &gt; 0时，得到&quot;&gt;&quot;，否则，得到&quot;&lt;=&quot;
  String sign;

  if (a &gt; 0){
      sign = &quot;&gt;&quot;;
  }else {
      sign = &quot;&lt;=&quot;;
  }

  //三元运算符重写这个过程：

  sign = a &gt; 0 ? &quot;&gt;&quot; : &quot;&lt;=&quot;;

  //若 a &gt; b 返回 1
  //若 a &lt; b 返回 -1
  //若 a = b 返回 0
   int result = a &gt; b ? 1 : (a &lt; b ? -1 :0);
     
   return 100 &gt;= score &amp;&amp; score &gt;= 90 ? &quot;学生&quot;+student+&quot;的分数是&quot;+score+&quot;,评级是A&quot; : (89 &gt;= score &amp;&amp; score &gt;= 60 ? &quot;学生&quot;+student+&quot;的分数是&quot;+score+&quot;,评级是B&quot; : (59 &gt;= score &amp;&amp; score &gt;= 0 ? &quot;学生&quot;+student+&quot;的分数是&quot;+score+&quot;,评级是C&quot; :&quot;非法输入&quot; ));
</code></pre>
</li>
</ul>
<ol start="7">
<li>位运算</li>
</ol>
<ul>
<li>~ 按位取反 把字符的字节里面0变成1，1变成0</li>
<li>补码：+1</li>
<li>负数是通过补码表示的</li>
</ul>
<table>
<thead>
<tr>
<th align="center">4</th>
<th align="center">0000</th>
<th align="center">0100</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">取反</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th align="center">~</th>
<th align="center">1111</th>
<th align="center">1011</th>
</tr>
</thead>
</table>
<p>+1</p>
<hr>
<table>
<thead>
<tr>
<th align="center">-4</th>
<th align="center">0000</th>
<th align="center">1100</th>
</tr>
</thead>
</table>
<ul>
<li>补码可以完成加法和减法（不进位加法）
<strong>Eg：5-3</strong></li>
</ul>
<table>
<thead>
<tr>
<th align="center">5</th>
<th align="center">0000</th>
<th align="center">0101</th>
</tr>
</thead>
</table>
<table>
<thead>
<tr>
<th align="center">3</th>
<th align="center">0000</th>
<th align="center">0011</th>
</tr>
</thead>
</table>
<p>取反补位</p>
<hr>
<table>
<thead>
<tr>
<th align="center">-3</th>
<th align="center">1111</th>
<th align="center">1101</th>
</tr>
</thead>
</table>
<hr>
<hr>
<table>
<thead>
<tr>
<th align="center">5+（-3）</th>
<th align="center">10000</th>
<th align="center">0100</th>
</tr>
</thead>
</table>
<p>去掉第一位</p>
<hr>
<table>
<thead>
<tr>
<th align="center">2</th>
<th align="center">0000</th>
<th align="center">0010</th>
</tr>
</thead>
</table>
<ul>
<li>&amp; &amp;= 按位与  ：每个位进行一次与操作（有一个是0，则都是0）【And】</li>
</ul>
<p>0000 0011   3</p>
<p>0000 0101   5</p>
<hr>
<p>0000 0001   1</p>
<ul>
<li>| |= 按位或 ：有一个是1，则就是1【or】</li>
</ul>
<p>0000 0110   6</p>
<p>0000 1000   8</p>
<hr>
<p>0000 1110   14</p>
<pre><code>Y ^ Y = 0 
Y ^ 0 = Y 
Eg:
[1,2,3,4,5,6]
[1,2,3,4,2,1]
//找重复出现的数则用异或
</code></pre>
<p>判断字符串里是否有某个字符</p>
<pre><code>public static boolean isValidHexCharacter(char ch) {
    byte bch = (byte) ch;
    String str = &quot;0123456789AaBbCcDdEeFf&quot;;
    for (int i = 0; i &lt; str.length(); i++) {
        int b = (int) str.charAt(i);
        int d = b ^ bch;
        if (d == 0) {
            return true;
        }
    }
    return false;
}
</code></pre>
<p>位运算代替boolean</p>
<pre><code>public class Cat {
   private static int CUTE = 0x1;
   private int properties = 0;

/**
 * 使用位运算设置猫咪萌的属性
 *
 * @param cute true为萌，false为不萌
 */
public void setCute(boolean cute) {
    properties = cute? (properties | CUTE) : (properties &amp;(~CUTE));//true为1 ，false为0
    
}

/**
 * 这只猫萌吗？请在此处使用位运算读取properties，得到猫是否萌的结果
 *
 * @return 萌则返回true，否则返回false
 */
public boolean isCute() {
    return (properties &amp; CUTE) != 0;
}
</code></pre>
<ul>
<li>&laquo;=左移【&laquo;】</li>
</ul>
<p>0000 0101     |5[左移一位]</p>
<p><del>0</del> 0000 101++0++    |  5 * 2 ^ 1 = 10（去掉最前一位，后面补一个0）</p>
<p>0000 0101   |5[左移2位]</p>
<p><del>00</del>  0001 01++00++  5* 2 ^ 2= 20</p>
<p>对任何进制进行左移操作，就是乘以这个进制的基数
左移n为，相当于乘以2的n次方</p>
<ul>
<li><code>&gt;&gt;</code> &raquo;=带符号右移：该数对应的二进制码整体右移，左边的用原有标志位（原本是1就用1，是0就用0）补充，右边超出的部分舍弃。</li>
</ul>
<p>1(表示符号'+&rsquo;) 111 1110</p>
<p>0(表示符号&rsquo;-') 111 1110</p>
<ul>
<li><code>&gt;&gt;&gt;</code> &raquo;&gt;=无符号右移：不管正负标志位为0还是1，将该数的二进制码整体右移，左边部分总是以0填充，右边部分舍弃。</li>
</ul>
<p>-5用二进制表示1111 1011 <em>标志</em>位</p>
<p>-5&raquo;2: <em>1</em>111 1011&mdash;&mdash;&mdash;&mdash;&ndash;&gt;<strong>11</strong> <em>1</em>1 1110。</p>
<p><strong>11</strong>为标志位</p>
<p>-5&raquo;&gt;2:  <em>1</em>111 1011&mdash;&mdash;&mdash;&mdash;&ndash;&gt;<strong>00</strong> <em>1</em>1 1110。</p>
<p><strong>00</strong>为补充的0</p>
<p>位运算：</p>
<ol>
<li>设置属性某一位上面是1，其他都是0。</li>
<li>然后进行按位与（与过有1的都是1），从而把属性都放进int里面，只需要4个字节
boolean： 存放需要32个字节</li>
</ol>
<ul>
<li>
<p>设置<code>|</code>  无论原先是0还是1 ，进行按位或1操作最后都是1</p>
</li>
<li>
<p>读取<code>&amp;</code>  无论原先是0还是1 ，进行按位与1操作最后都是1</p>
</li>
<li>
<p>不用乘除号进行运算</p>
<pre><code>  // 返回number乘以16的结果
  // 请不要使用乘号
  public static int multiply16(int number) {
      return number &lt;&lt; 4;
  }
  // 返回number除以16的结果
  // 请不要使用除号
  public static int divide16(int number) {
       return number &gt;&gt; 4;
   }
</code></pre>
</li>
</ul>
<ol start="8">
<li>运算符的优先级</li>
</ol>
<ul>
<li>乘除高于加减</li>
<li>其他全部加括号</li>
</ul>
<ol start="9">
<li>字符串加法</li>
</ol>
<ul>
<li>对象进行字符串加法的时候，就会把相应的toString方法或者原生类型的相应表示</li>
<li>字符串加法会自动调用StringBuilder，减轻内存压力。因为对象是不可改变的，进行运算的时候会残生很多新的对象，造成储存空间的浪费。</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Java的数据类型</title>
            <link>https://procarihana.github.io/public/posts/java%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
            <pubDate>Wed, 29 Apr 2020 15:16:54 +0800</pubDate>
            
            <guid>https://procarihana.github.io/public/posts/java%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
            <description>数据类型  两种数据类型   原生数据 赋值的是值本身     原生数据 字节 最小值 最大值     byte 1     short 2  0*7fffffff(21亿)   int 4     long 8  2^63-1   float 4     double 8     char 2       boolean true/false void     存储数据超过最大值会溢出</description>
            <content type="html"><![CDATA[<h4 id="数据类型">数据类型</h4>
<ul>
<li>两种数据类型</li>
</ul>
<ol>
<li>原生数据 赋值的是值本身</li>
</ol>
<table>
<thead>
<tr>
<th align="center">原生数据</th>
<th align="center">字节</th>
<th align="center">最小值</th>
<th align="center">最大值</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">byte</td>
<td align="center">1</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">short</td>
<td align="center">2</td>
<td align="center"></td>
<td align="center">0*7fffffff(21亿)</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">4</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">8</td>
<td align="center"></td>
<td align="center">2^63-1</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">4</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">8</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">char</td>
<td align="center">2</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>boolean true/false</li>
<li>void</li>
</ul>
<hr>
<ul>
<li>
<p>存储数据超过最大值会溢出<br>
<em>Eg：（byte）127+1=-128</em></p>
</li>
<li>
<p>float 浮点数 是小数，在计算机中<strong>近似表示</strong><br>
<em>Eg：0.1+0.2=0.300000000004</em></p>
</li>
<li>
<p>double 双精浮点数</p>
</li>
<li>
<p>浮点数判断大小，不可以比较相等<br>
<code>==</code>可能可以工作，但是不安全</p>
<pre><code>  Math.abc(d-0.0)&lt;0.0000001
  //通过绝对值判断浮点数d是否为0
</code></pre>
</li>
<li>
<p>long、float、double 声明值</p>
<pre><code>  long l = 0L;
  float f = 0.0f;
  double d = 0.0d;
  double e = 2e-3;//科学计算法可以在浮点数里使用
</code></pre>
</li>
</ul>
<ol start="2">
<li>引用数据类型 对象 本质上就都是地址 赋值的是地址</li>
</ol>
<h4 id="二进制">二进制</h4>
<ol>
<li>字节：计算机内存能够寻址的最小单位</li>
<li>int 32 位 31个1 二进制</li>
<li>ASCII 码 最常用的字符的对照表</li>
</ol>
<ul>
<li>可以通过int的强制转换看到字符的对应数字表</li>
</ul>
<ol start="4">
<li>强类型:即使数据一样，但是类型不一样，解释也不一样</li>
<li>16进制 0-9 a-f 不区分大小写</li>
</ol>
<h4 id="类型转换与类型提升">类型转换与类型提升</h4>
<ul>
<li>
<p>高精度的 转化为低精度的不会出现问题，但是反过来就可能会损失数据</p>
</li>
<li>
<p>整数除法是地板除：除的结果如果不能整出，就会向下取值<br>
<strong>Eg：3/2=1</strong><br>
<em>解决：把所有值（或者其中一个，另一个就会激动提高精度）都提高到最高的精度进行计算</em></p>
</li>
<li>
<p>丢失精度的时候需要进行强制转换<br>
<strong>Eg：int i；double d =（double）i</strong></p>
</li>
<li>
<p>ASKII码表：前128个最常用的字符</p>
<pre><code> //在ASKII中数据49为字符‘1’，数据50为字符‘2’
 char c = '1';//完全等价于char c = 49
 c = (char)(c+1);//完全等价于char c = 50
</code></pre>
</li>
</ul>
<h4 id="基本数据类型的装箱类型">基本数据类型的装箱类型</h4>
<ol>
<li>区分是不是对象，通过判断有没有对应的类<br>
<strong>Eg：int i = 0是原生数据；Integer integer = 0 是对象</strong></li>
</ol>
<ul>
<li>因为Integer是integer对应的类，而integer只是一个地址，指向存储‘100’的数据，这个过程通过自动装拆箱完成</li>
</ul>
<ol start="2">
<li>自动装拆箱<br>
<strong>Eg:当你声明int i，而需要用到Integer的时候，ide就会自动进行装箱<br>
Integer integer = i 这个过程</strong></li>
</ol>
<h4 id="引用类型装箱意义">引用类型，装箱意义</h4>
<ol>
<li>容器类不接受原生数据类型（List/Set</li>
<li>可以赋值null</li>
</ol>
<ul>
<li>null意义：Boolean可以有true/false和null三种状态，而boolean只有两种</li>
<li>null会在自动装拆箱中出现问题，因为原生数据没有null，当引用为null的时候，拆箱过程中就会出现空指针异常</li>
</ul>
<ol start="3">
<li>提供额外的方法<br>
<strong>Eg:可以通过Integer.parseInt把字符转换成数字</strong></li>
<li>自动装箱与拆箱</li>
</ol>
<h4 id="null与equals约定在数据类型中的应用">null与equals约定在数据类型中的应用</h4>
<ol>
<li>== 比较原生数据的时候，比较的是值是否相同；而比较对象的时候，实质比较的是地址是否相同</li>
<li>equals 是object的子类，比较两个对象的数据value是否相同</li>
<li>Integer 常用的数字（-128～127）有缓存，所以使用==判断这个范围的数据的时候，地址会相等</li>
<li>Integer 对象不可变，只能去读取里面的内容，不能去修改里面的数据</li>
</ol>
<h4 id="数组类型">数组类型</h4>
<ul>
<li>有JDK负责创建</li>
</ul>
<ol>
<li>X[] x = new X[10] 创造一个数组x，里面有10个元素</li>
<li>X[] x =new [] {2，1，3，4}</li>
<li>X[][] x = new int [] []<code>{``{``}</code>,<code>{``}``}</code> 嵌套数组</li>
<li>其中X可以也是数组类型</li>
</ol>
<ul>
<li>数组的主要特性</li>
</ul>
<ol>
<li>⻓度不可变</li>
<li>类型安全</li>
<li>只有⼀个length属性</li>
<li>可以使⽤for循环迭代</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Java程序的基本结构</title>
            <link>https://procarihana.github.io/public/posts/java%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/</link>
            <pubDate>Tue, 28 Apr 2020 16:58:28 +0800</pubDate>
            
            <guid>https://procarihana.github.io/public/posts/java%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/</guid>
            <description>Java程序的基本结构 Java 简述  强类型：在内存的每一个数据都需要和一个类型相绑定   即使数据相同，但是类型不一样，解释的方式也不一样  静态   Java code &amp;ndash;&amp;gt; 字节码 （编译）  跨平台性能   操作系统  Linux、windows、mac…… 不同的操作系统有不同的语言 （API 【Application Programming Interface】 应用编程接口）&amp;ndash;&amp;gt;实现跨平台就要通过JVM实现   JVM 【Java Vitual Mach】（Java虚拟机） 字节码   最小单位为字节，八个字节为一个字节码   Java 成句基本结构 类和包的关系  基本结构&amp;ndash;类，Java 程序的最小的结构单元，按照约定放在自己同名的&amp;rsquo;.java&amp;rsquo; 文件中 每个 Class 都处于一个package中 Package 的名字是相对于src决定的，也就是由目录结构确定的，名字通常用域名的倒叙 如果class 直接放在java文件夹下面，就不会显示package 因为处于默认包里面  包的意义  类的名字是一个简单的字符串，通过包更容易区分 Eg：通过运用全限定类名，可以用于区分不同的同名类   全限定类名 ：包含包名的类&amp;ndash;&amp;gt;package.class  可以通过import引入包，可以让引用类的编写更加便捷  第三方包的引用  Maven 当方法属于Java.</description>
            <content type="html"><![CDATA[<h1 id="java程序的基本结构">Java程序的基本结构</h1>
<h3 id="java-简述">Java 简述</h3>
<ol>
<li>强类型：在内存的每一个数据都需要和一个类型相绑定</li>
</ol>
<ul>
<li>即使数据相同，但是类型不一样，解释的方式也不一样</li>
</ul>
<ol start="2">
<li>静态</li>
</ol>
<ul>
<li>Java code &ndash;&gt; 字节码 （编译）</li>
</ul>
<ol start="3">
<li>跨平台性能</li>
</ol>
<hr>
<h3 id="操作系统">操作系统</h3>
<ol>
<li>Linux、windows、mac……</li>
<li>不同的操作系统有不同的语言 （API 【Application Programming Interface】 应用编程接口）&ndash;&gt;实现跨平台就要通过JVM实现</li>
</ol>
<ul>
<li>JVM 【Java Vitual Mach】（Java虚拟机）</li>
<li>字节码</li>
</ul>
<ol>
<li>最小单位为字节，八个字节为一个字节码</li>
</ol>
<hr>
<h3 id="java-成句基本结构">Java 成句基本结构</h3>
<h4 id="类和包的关系">类和包的关系</h4>
<ol>
<li>基本结构&ndash;类，Java 程序的最小的结构单元，按照约定放在自己同名的&rsquo;.java&rsquo; 文件中</li>
<li>每个 Class 都处于一个package中</li>
<li>Package 的名字是相对于src决定的，也就是由目录结构确定的，名字通常用域名的倒叙</li>
<li>如果class 直接放在java文件夹下面，就不会显示package 因为处于默认包里面</li>
</ol>
<h4 id="包的意义">包的意义</h4>
<ol>
<li>类的名字是一个简单的字符串，通过包更容易区分
Eg：通过运用全限定类名，可以用于区分不同的同名类</li>
</ol>
<ul>
<li>全限定类名 ：包含包名的类&ndash;&gt;package.class</li>
</ul>
<ol start="2">
<li>可以通过import引入包，可以让引用类的编写更加便捷</li>
</ol>
<h4 id="第三方包的引用">第三方包的引用</h4>
<ol>
<li>Maven</li>
<li>当方法属于Java.lang的时候后，不需要特地去引用</li>
</ol>
<h4 id="方法静态方法与静态成员变量">方法、静态方法与静态成员变量</h4>
<ol>
<li>方法</li>
</ol>
<ul>
<li>静态方法:就是一个函数，一个不依附于任何对象的方法，不用去创造任何对象</li>
</ul>
<ol start="2">
<li>函数调用</li>
</ol>
<ul>
<li>每次函数调用的时候会产生新的独立的环境</li>
<li>函数调动可以多次调用，调用完成后，局部变量就会被销毁</li>
</ul>
<ol start="3">
<li>
<p>局部变量的作用域在第一对花括号里面</p>
<pre><code>     public static int result(int a,int b)
</code></pre>
</li>
<li>
<p>成员变量 ：和一个对象绑定的变量</p>
<pre><code> public class Cat{
     private String name;
     }
</code></pre>
</li>
<li>
<p>静态成员变量：是一个类的成员，方法调用后的结果会持续存在，独立于任何的函数调用，函数调用结束后都不会被销毁
<code>public static int i</code></p>
</li>
<li>
<p><code>static</code>不和任何对象绑定</p>
</li>
</ol>
<h4 id="对象结构与成员变量">对象、结构与成员变量</h4>
<ol>
<li>类 说明书，说明方法如何调用，调用后会得到什么机结果</li>
<li>对象（实例） 通过new一个构造函数，从而创造出一个对象<br>
<code>Cat cat = new Cat();</code></li>
<li>构造器</li>
</ol>
<ul>
<li>
<p>没有生命任何的constructor构造器，编译器会自动构造一个</p>
</li>
<li>
<p>一个特殊的实例方法</p>
<pre><code>Cat(){}//编译器自动生成
</code></pre>
</li>
</ul>
<hr>
<pre><code>public Cat(String name){
    this.name = name;
}
</code></pre>
<ul>
<li>构造器里面可以声明参数</li>
<li>可以写public</li>
<li>没有返回值（返回的是构造函数的一个实例）</li>
<li>可以声明多个构造器</li>
</ul>
<ol start="4">
<li><code>this</code> 的使用：在不构成歧义的情况下可以不使用</li>
</ol>
<h4 id="实例方法与空指针异常">实例方法与空指针异常</h4>
<ol>
<li>实例方法 和对象相绑定的方法，只有实例才能够调用</li>
<li>空指针异常 会在对对象取属性或者调用实例方法的时候后发生</li>
</ol>
<ul>
<li>解决：可以通过if else 为null 进行判断</li>
</ul>
<h4 id="sum">sum</h4>
<ol>
<li>静态变量 不和任何对象绑定，一个全局的存储单元，被所有对象所共享。在所有的对方都可以对这个变量进行读写。</li>
<li>静态方法 不和任何实例对象相绑定</li>
<li>成员变量，没有static 限定，和一个对象紧密绑定的</li>
<li>实例方法 不能仅通过一个类名去引用，需要先创造出一个实例对象，这个对象才可以去调用这个方法。</li>
</ol>
<ul>
<li>在构造器里面可以直接调用实例方法</li>
</ul>
<hr>
<h4 id="对象与引用">对象与引用</h4>
<ol>
<li>引用 == 地址</li>
<li>所有的对象都是地址，一个实例被创造出来，实际上就是创造出一个地址，指向自己类的内存空间。对象被进行赋值的时候，只是地址被进行复制，而对象本身并没有改变。</li>
<li>深拷贝deepCopy 浅拷贝</li>
</ol>
<ul>
<li>浅拷贝只是复制了地址，并没有复制对象的所数据
<img src="/%E6%B5%85%E6%8B%B7%E8%B4%9D.png" alt="浅拷贝"></li>
<li>深拷贝需要创造所有的对应的对象进行拷贝,把对象的所有值都进行赋值。地址虽然不一样，但是通过赋值可以的到一样的数据
<img src="/%E6%B7%B1%E6%8B%B7%E8%B4%9D.png" alt="深拷贝"></li>
</ul>
<hr>
<h4 id="对象与引用-1">对象与引用</h4>
<ol>
<li>引用 == 地址</li>
<li>所有的对象都是地址，一个实例被创造出来，实际上就是创造出一个地址，指向自己类的内存空间。对象被进行赋值的时候，只是地址被进行复制，而对象本身并没有改变。</li>
<li>深拷贝deepCopy 浅拷贝</li>
</ol>
<ul>
<li>浅拷贝只是复制了地址，并没有复制对象的所数据</li>
<li>深拷贝需要创造所有的对应的对象进行拷贝</li>
</ul>
<h4 id="方法的传值-vs-传引用">方法的传值 vs 传引用</h4>
<ol>
<li>
<p>传值 通过引用的方法传值，只是把数据赋值一遍,修改是不会生效的。因为执行方法的时候后会创建一个全新的环境，结束后数据就会销毁。</p>
<p>public static void main (String [] args){
int i = 0;
addOne(i);
}
static void int addOne(int i){
i = i+1
}</p>
</li>
<li>
<p>传引用 本质为传递地址</p>
<pre><code> public static void main (String [] args){
     Cat cat = new Cat();
     cat.name = &quot;111&quot;;
     renameCat(cat);
 }

 stativ void renameCat(Cat cat){ 
  //在Cat这个类的储存空间里面赋值，把结果的地址传递给main里面的cat
  cat.name = &quot;mewo&quot;
 }
</code></pre>
</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>The Second Test</title>
            <link>https://procarihana.github.io/public/posts/the-second-test/</link>
            <pubDate>Sun, 26 Apr 2020 18:49:13 +0800</pubDate>
            
            <guid>https://procarihana.github.io/public/posts/the-second-test/</guid>
            <description>Test Second </description>
            <content type="html"><![CDATA[<h3 id="test">Test</h3>
<h1 id="second">Second</h1>
<p><img src="/1.jpg" alt=""></p>
]]></content>
        </item>
        
        <item>
            <title>TEST</title>
            <link>https://procarihana.github.io/public/posts/test/</link>
            <pubDate>Sat, 25 Apr 2020 23:50:04 +0800</pubDate>
            
            <guid>https://procarihana.github.io/public/posts/test/</guid>
            <description>TEST &amp;ndash; OK? ???
I am fine</description>
            <content type="html"><![CDATA[<h1 id="test">TEST</h1>
<h2 id="--">&ndash;</h2>
<h2 id="ok">OK?</h2>
<p>???</p>
<p>I am fine</p>
]]></content>
        </item>
        
    </channel>
</rss>
